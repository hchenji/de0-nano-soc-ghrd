// soc_system_fft_sub_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 20.1 720

`timescale 1 ps / 1 ps
module soc_system_fft_sub_mm_interconnect_0 (
		input  wire         clk_0_clk_clk,                                 //                               clk_0_clk.clk
		input  wire         mm_bridge_0_reset_reset_bridge_in_reset_reset, // mm_bridge_0_reset_reset_bridge_in_reset.reset
		input  wire [18:0]  mm_bridge_0_m0_address,                        //                          mm_bridge_0_m0.address
		output wire         mm_bridge_0_m0_waitrequest,                    //                                        .waitrequest
		input  wire [0:0]   mm_bridge_0_m0_burstcount,                     //                                        .burstcount
		input  wire [3:0]   mm_bridge_0_m0_byteenable,                     //                                        .byteenable
		input  wire         mm_bridge_0_m0_read,                           //                                        .read
		output wire [31:0]  mm_bridge_0_m0_readdata,                       //                                        .readdata
		output wire         mm_bridge_0_m0_readdatavalid,                  //                                        .readdatavalid
		input  wire         mm_bridge_0_m0_write,                          //                                        .write
		input  wire [31:0]  mm_bridge_0_m0_writedata,                      //                                        .writedata
		input  wire         mm_bridge_0_m0_debugaccess,                    //                                        .debugaccess
		input  wire [30:0]  sgdma_from_fft_mm_write_address,               //                 sgdma_from_fft_mm_write.address
		output wire         sgdma_from_fft_mm_write_waitrequest,           //                                        .waitrequest
		input  wire [5:0]   sgdma_from_fft_mm_write_burstcount,            //                                        .burstcount
		input  wire [7:0]   sgdma_from_fft_mm_write_byteenable,            //                                        .byteenable
		input  wire         sgdma_from_fft_mm_write_write,                 //                                        .write
		input  wire [63:0]  sgdma_from_fft_mm_write_writedata,             //                                        .writedata
		input  wire [18:0]  sgdma_from_ram_mm_read_address,                //                  sgdma_from_ram_mm_read.address
		output wire         sgdma_from_ram_mm_read_waitrequest,            //                                        .waitrequest
		input  wire [5:0]   sgdma_from_ram_mm_read_burstcount,             //                                        .burstcount
		input  wire [7:0]   sgdma_from_ram_mm_read_byteenable,             //                                        .byteenable
		input  wire         sgdma_from_ram_mm_read_read,                   //                                        .read
		output wire [63:0]  sgdma_from_ram_mm_read_readdata,               //                                        .readdata
		output wire         sgdma_from_ram_mm_read_readdatavalid,          //                                        .readdatavalid
		input  wire [30:0]  sgdma_from_ram_mm_write_address,               //                 sgdma_from_ram_mm_write.address
		output wire         sgdma_from_ram_mm_write_waitrequest,           //                                        .waitrequest
		input  wire [5:0]   sgdma_from_ram_mm_write_burstcount,            //                                        .burstcount
		input  wire [7:0]   sgdma_from_ram_mm_write_byteenable,            //                                        .byteenable
		input  wire         sgdma_from_ram_mm_write_write,                 //                                        .write
		input  wire [63:0]  sgdma_from_ram_mm_write_writedata,             //                                        .writedata
		input  wire [30:0]  sgdma_to_fft_mm_read_address,                  //                    sgdma_to_fft_mm_read.address
		output wire         sgdma_to_fft_mm_read_waitrequest,              //                                        .waitrequest
		input  wire [6:0]   sgdma_to_fft_mm_read_burstcount,               //                                        .burstcount
		input  wire [3:0]   sgdma_to_fft_mm_read_byteenable,               //                                        .byteenable
		input  wire         sgdma_to_fft_mm_read_read,                     //                                        .read
		output wire [31:0]  sgdma_to_fft_mm_read_readdata,                 //                                        .readdata
		output wire         sgdma_to_fft_mm_read_readdatavalid,            //                                        .readdatavalid
		output wire [12:0]  data_s1_address,                               //                                 data_s1.address
		output wire         data_s1_write,                                 //                                        .write
		input  wire [63:0]  data_s1_readdata,                              //                                        .readdata
		output wire [63:0]  data_s1_writedata,                             //                                        .writedata
		output wire [7:0]   data_s1_byteenable,                            //                                        .byteenable
		output wire         data_s1_chipselect,                            //                                        .chipselect
		output wire         data_s1_clken,                                 //                                        .clken
		output wire [29:0]  DDR_s0_address,                                //                                  DDR_s0.address
		output wire         DDR_s0_write,                                  //                                        .write
		output wire         DDR_s0_read,                                   //                                        .read
		input  wire [63:0]  DDR_s0_readdata,                               //                                        .readdata
		output wire [63:0]  DDR_s0_writedata,                              //                                        .writedata
		output wire [5:0]   DDR_s0_burstcount,                             //                                        .burstcount
		output wire [7:0]   DDR_s0_byteenable,                             //                                        .byteenable
		input  wire         DDR_s0_readdatavalid,                          //                                        .readdatavalid
		input  wire         DDR_s0_waitrequest,                            //                                        .waitrequest
		output wire         DDR_s0_debugaccess,                            //                                        .debugaccess
		output wire [1:0]   FFT_STadapter_0_s0_address,                    //                      FFT_STadapter_0_s0.address
		output wire         FFT_STadapter_0_s0_write,                      //                                        .write
		output wire         FFT_STadapter_0_s0_read,                       //                                        .read
		input  wire [31:0]  FFT_STadapter_0_s0_readdata,                   //                                        .readdata
		output wire [31:0]  FFT_STadapter_0_s0_writedata,                  //                                        .writedata
		output wire [2:0]   sgdma_from_fft_csr_address,                    //                      sgdma_from_fft_csr.address
		output wire         sgdma_from_fft_csr_write,                      //                                        .write
		output wire         sgdma_from_fft_csr_read,                       //                                        .read
		input  wire [31:0]  sgdma_from_fft_csr_readdata,                   //                                        .readdata
		output wire [31:0]  sgdma_from_fft_csr_writedata,                  //                                        .writedata
		output wire [3:0]   sgdma_from_fft_csr_byteenable,                 //                                        .byteenable
		output wire         sgdma_from_fft_descriptor_slave_write,         //         sgdma_from_fft_descriptor_slave.write
		output wire [127:0] sgdma_from_fft_descriptor_slave_writedata,     //                                        .writedata
		output wire [15:0]  sgdma_from_fft_descriptor_slave_byteenable,    //                                        .byteenable
		input  wire         sgdma_from_fft_descriptor_slave_waitrequest,   //                                        .waitrequest
		output wire [2:0]   sgdma_from_ram_csr_address,                    //                      sgdma_from_ram_csr.address
		output wire         sgdma_from_ram_csr_write,                      //                                        .write
		output wire         sgdma_from_ram_csr_read,                       //                                        .read
		input  wire [31:0]  sgdma_from_ram_csr_readdata,                   //                                        .readdata
		output wire [31:0]  sgdma_from_ram_csr_writedata,                  //                                        .writedata
		output wire [3:0]   sgdma_from_ram_csr_byteenable,                 //                                        .byteenable
		output wire         sgdma_from_ram_descriptor_slave_write,         //         sgdma_from_ram_descriptor_slave.write
		output wire [127:0] sgdma_from_ram_descriptor_slave_writedata,     //                                        .writedata
		output wire [15:0]  sgdma_from_ram_descriptor_slave_byteenable,    //                                        .byteenable
		input  wire         sgdma_from_ram_descriptor_slave_waitrequest,   //                                        .waitrequest
		output wire [2:0]   sgdma_to_fft_csr_address,                      //                        sgdma_to_fft_csr.address
		output wire         sgdma_to_fft_csr_write,                        //                                        .write
		output wire         sgdma_to_fft_csr_read,                         //                                        .read
		input  wire [31:0]  sgdma_to_fft_csr_readdata,                     //                                        .readdata
		output wire [31:0]  sgdma_to_fft_csr_writedata,                    //                                        .writedata
		output wire [3:0]   sgdma_to_fft_csr_byteenable,                   //                                        .byteenable
		output wire         sgdma_to_fft_descriptor_slave_write,           //           sgdma_to_fft_descriptor_slave.write
		output wire [127:0] sgdma_to_fft_descriptor_slave_writedata,       //                                        .writedata
		output wire [15:0]  sgdma_to_fft_descriptor_slave_byteenable,      //                                        .byteenable
		input  wire         sgdma_to_fft_descriptor_slave_waitrequest      //                                        .waitrequest
	);

	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest;                       // mm_bridge_0_m0_agent:av_waitrequest -> mm_bridge_0_m0_translator:uav_waitrequest
	wire   [31:0] mm_bridge_0_m0_translator_avalon_universal_master_0_readdata;                          // mm_bridge_0_m0_agent:av_readdata -> mm_bridge_0_m0_translator:uav_readdata
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess;                       // mm_bridge_0_m0_translator:uav_debugaccess -> mm_bridge_0_m0_agent:av_debugaccess
	wire   [30:0] mm_bridge_0_m0_translator_avalon_universal_master_0_address;                           // mm_bridge_0_m0_translator:uav_address -> mm_bridge_0_m0_agent:av_address
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_read;                              // mm_bridge_0_m0_translator:uav_read -> mm_bridge_0_m0_agent:av_read
	wire    [3:0] mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable;                        // mm_bridge_0_m0_translator:uav_byteenable -> mm_bridge_0_m0_agent:av_byteenable
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid;                     // mm_bridge_0_m0_agent:av_readdatavalid -> mm_bridge_0_m0_translator:uav_readdatavalid
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_lock;                              // mm_bridge_0_m0_translator:uav_lock -> mm_bridge_0_m0_agent:av_lock
	wire          mm_bridge_0_m0_translator_avalon_universal_master_0_write;                             // mm_bridge_0_m0_translator:uav_write -> mm_bridge_0_m0_agent:av_write
	wire   [31:0] mm_bridge_0_m0_translator_avalon_universal_master_0_writedata;                         // mm_bridge_0_m0_translator:uav_writedata -> mm_bridge_0_m0_agent:av_writedata
	wire    [2:0] mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount;                        // mm_bridge_0_m0_translator:uav_burstcount -> mm_bridge_0_m0_agent:av_burstcount
	wire          sgdma_to_fft_mm_read_translator_avalon_universal_master_0_waitrequest;                 // sgdma_to_fft_mm_read_agent:av_waitrequest -> sgdma_to_fft_mm_read_translator:uav_waitrequest
	wire   [31:0] sgdma_to_fft_mm_read_translator_avalon_universal_master_0_readdata;                    // sgdma_to_fft_mm_read_agent:av_readdata -> sgdma_to_fft_mm_read_translator:uav_readdata
	wire          sgdma_to_fft_mm_read_translator_avalon_universal_master_0_debugaccess;                 // sgdma_to_fft_mm_read_translator:uav_debugaccess -> sgdma_to_fft_mm_read_agent:av_debugaccess
	wire   [30:0] sgdma_to_fft_mm_read_translator_avalon_universal_master_0_address;                     // sgdma_to_fft_mm_read_translator:uav_address -> sgdma_to_fft_mm_read_agent:av_address
	wire          sgdma_to_fft_mm_read_translator_avalon_universal_master_0_read;                        // sgdma_to_fft_mm_read_translator:uav_read -> sgdma_to_fft_mm_read_agent:av_read
	wire    [3:0] sgdma_to_fft_mm_read_translator_avalon_universal_master_0_byteenable;                  // sgdma_to_fft_mm_read_translator:uav_byteenable -> sgdma_to_fft_mm_read_agent:av_byteenable
	wire          sgdma_to_fft_mm_read_translator_avalon_universal_master_0_readdatavalid;               // sgdma_to_fft_mm_read_agent:av_readdatavalid -> sgdma_to_fft_mm_read_translator:uav_readdatavalid
	wire          sgdma_to_fft_mm_read_translator_avalon_universal_master_0_lock;                        // sgdma_to_fft_mm_read_translator:uav_lock -> sgdma_to_fft_mm_read_agent:av_lock
	wire          sgdma_to_fft_mm_read_translator_avalon_universal_master_0_write;                       // sgdma_to_fft_mm_read_translator:uav_write -> sgdma_to_fft_mm_read_agent:av_write
	wire   [31:0] sgdma_to_fft_mm_read_translator_avalon_universal_master_0_writedata;                   // sgdma_to_fft_mm_read_translator:uav_writedata -> sgdma_to_fft_mm_read_agent:av_writedata
	wire    [8:0] sgdma_to_fft_mm_read_translator_avalon_universal_master_0_burstcount;                  // sgdma_to_fft_mm_read_translator:uav_burstcount -> sgdma_to_fft_mm_read_agent:av_burstcount
	wire          sgdma_from_ram_mm_read_translator_avalon_universal_master_0_waitrequest;               // sgdma_from_ram_mm_read_agent:av_waitrequest -> sgdma_from_ram_mm_read_translator:uav_waitrequest
	wire   [63:0] sgdma_from_ram_mm_read_translator_avalon_universal_master_0_readdata;                  // sgdma_from_ram_mm_read_agent:av_readdata -> sgdma_from_ram_mm_read_translator:uav_readdata
	wire          sgdma_from_ram_mm_read_translator_avalon_universal_master_0_debugaccess;               // sgdma_from_ram_mm_read_translator:uav_debugaccess -> sgdma_from_ram_mm_read_agent:av_debugaccess
	wire   [30:0] sgdma_from_ram_mm_read_translator_avalon_universal_master_0_address;                   // sgdma_from_ram_mm_read_translator:uav_address -> sgdma_from_ram_mm_read_agent:av_address
	wire          sgdma_from_ram_mm_read_translator_avalon_universal_master_0_read;                      // sgdma_from_ram_mm_read_translator:uav_read -> sgdma_from_ram_mm_read_agent:av_read
	wire    [7:0] sgdma_from_ram_mm_read_translator_avalon_universal_master_0_byteenable;                // sgdma_from_ram_mm_read_translator:uav_byteenable -> sgdma_from_ram_mm_read_agent:av_byteenable
	wire          sgdma_from_ram_mm_read_translator_avalon_universal_master_0_readdatavalid;             // sgdma_from_ram_mm_read_agent:av_readdatavalid -> sgdma_from_ram_mm_read_translator:uav_readdatavalid
	wire          sgdma_from_ram_mm_read_translator_avalon_universal_master_0_lock;                      // sgdma_from_ram_mm_read_translator:uav_lock -> sgdma_from_ram_mm_read_agent:av_lock
	wire          sgdma_from_ram_mm_read_translator_avalon_universal_master_0_write;                     // sgdma_from_ram_mm_read_translator:uav_write -> sgdma_from_ram_mm_read_agent:av_write
	wire   [63:0] sgdma_from_ram_mm_read_translator_avalon_universal_master_0_writedata;                 // sgdma_from_ram_mm_read_translator:uav_writedata -> sgdma_from_ram_mm_read_agent:av_writedata
	wire    [8:0] sgdma_from_ram_mm_read_translator_avalon_universal_master_0_burstcount;                // sgdma_from_ram_mm_read_translator:uav_burstcount -> sgdma_from_ram_mm_read_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                                 // rsp_mux_002:src_valid -> sgdma_from_ram_mm_read_agent:rp_valid
	wire  [148:0] rsp_mux_002_src_data;                                                                  // rsp_mux_002:src_data -> sgdma_from_ram_mm_read_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                                 // sgdma_from_ram_mm_read_agent:rp_ready -> rsp_mux_002:src_ready
	wire    [8:0] rsp_mux_002_src_channel;                                                               // rsp_mux_002:src_channel -> sgdma_from_ram_mm_read_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                                         // rsp_mux_002:src_startofpacket -> sgdma_from_ram_mm_read_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                           // rsp_mux_002:src_endofpacket -> sgdma_from_ram_mm_read_agent:rp_endofpacket
	wire          sgdma_from_fft_mm_write_translator_avalon_universal_master_0_waitrequest;              // sgdma_from_fft_mm_write_agent:av_waitrequest -> sgdma_from_fft_mm_write_translator:uav_waitrequest
	wire   [63:0] sgdma_from_fft_mm_write_translator_avalon_universal_master_0_readdata;                 // sgdma_from_fft_mm_write_agent:av_readdata -> sgdma_from_fft_mm_write_translator:uav_readdata
	wire          sgdma_from_fft_mm_write_translator_avalon_universal_master_0_debugaccess;              // sgdma_from_fft_mm_write_translator:uav_debugaccess -> sgdma_from_fft_mm_write_agent:av_debugaccess
	wire   [30:0] sgdma_from_fft_mm_write_translator_avalon_universal_master_0_address;                  // sgdma_from_fft_mm_write_translator:uav_address -> sgdma_from_fft_mm_write_agent:av_address
	wire          sgdma_from_fft_mm_write_translator_avalon_universal_master_0_read;                     // sgdma_from_fft_mm_write_translator:uav_read -> sgdma_from_fft_mm_write_agent:av_read
	wire    [7:0] sgdma_from_fft_mm_write_translator_avalon_universal_master_0_byteenable;               // sgdma_from_fft_mm_write_translator:uav_byteenable -> sgdma_from_fft_mm_write_agent:av_byteenable
	wire          sgdma_from_fft_mm_write_translator_avalon_universal_master_0_readdatavalid;            // sgdma_from_fft_mm_write_agent:av_readdatavalid -> sgdma_from_fft_mm_write_translator:uav_readdatavalid
	wire          sgdma_from_fft_mm_write_translator_avalon_universal_master_0_lock;                     // sgdma_from_fft_mm_write_translator:uav_lock -> sgdma_from_fft_mm_write_agent:av_lock
	wire          sgdma_from_fft_mm_write_translator_avalon_universal_master_0_write;                    // sgdma_from_fft_mm_write_translator:uav_write -> sgdma_from_fft_mm_write_agent:av_write
	wire   [63:0] sgdma_from_fft_mm_write_translator_avalon_universal_master_0_writedata;                // sgdma_from_fft_mm_write_translator:uav_writedata -> sgdma_from_fft_mm_write_agent:av_writedata
	wire    [8:0] sgdma_from_fft_mm_write_translator_avalon_universal_master_0_burstcount;               // sgdma_from_fft_mm_write_translator:uav_burstcount -> sgdma_from_fft_mm_write_agent:av_burstcount
	wire          rsp_mux_003_src_valid;                                                                 // rsp_mux_003:src_valid -> sgdma_from_fft_mm_write_agent:rp_valid
	wire  [148:0] rsp_mux_003_src_data;                                                                  // rsp_mux_003:src_data -> sgdma_from_fft_mm_write_agent:rp_data
	wire          rsp_mux_003_src_ready;                                                                 // sgdma_from_fft_mm_write_agent:rp_ready -> rsp_mux_003:src_ready
	wire    [8:0] rsp_mux_003_src_channel;                                                               // rsp_mux_003:src_channel -> sgdma_from_fft_mm_write_agent:rp_channel
	wire          rsp_mux_003_src_startofpacket;                                                         // rsp_mux_003:src_startofpacket -> sgdma_from_fft_mm_write_agent:rp_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                           // rsp_mux_003:src_endofpacket -> sgdma_from_fft_mm_write_agent:rp_endofpacket
	wire          sgdma_from_ram_mm_write_translator_avalon_universal_master_0_waitrequest;              // sgdma_from_ram_mm_write_agent:av_waitrequest -> sgdma_from_ram_mm_write_translator:uav_waitrequest
	wire   [63:0] sgdma_from_ram_mm_write_translator_avalon_universal_master_0_readdata;                 // sgdma_from_ram_mm_write_agent:av_readdata -> sgdma_from_ram_mm_write_translator:uav_readdata
	wire          sgdma_from_ram_mm_write_translator_avalon_universal_master_0_debugaccess;              // sgdma_from_ram_mm_write_translator:uav_debugaccess -> sgdma_from_ram_mm_write_agent:av_debugaccess
	wire   [30:0] sgdma_from_ram_mm_write_translator_avalon_universal_master_0_address;                  // sgdma_from_ram_mm_write_translator:uav_address -> sgdma_from_ram_mm_write_agent:av_address
	wire          sgdma_from_ram_mm_write_translator_avalon_universal_master_0_read;                     // sgdma_from_ram_mm_write_translator:uav_read -> sgdma_from_ram_mm_write_agent:av_read
	wire    [7:0] sgdma_from_ram_mm_write_translator_avalon_universal_master_0_byteenable;               // sgdma_from_ram_mm_write_translator:uav_byteenable -> sgdma_from_ram_mm_write_agent:av_byteenable
	wire          sgdma_from_ram_mm_write_translator_avalon_universal_master_0_readdatavalid;            // sgdma_from_ram_mm_write_agent:av_readdatavalid -> sgdma_from_ram_mm_write_translator:uav_readdatavalid
	wire          sgdma_from_ram_mm_write_translator_avalon_universal_master_0_lock;                     // sgdma_from_ram_mm_write_translator:uav_lock -> sgdma_from_ram_mm_write_agent:av_lock
	wire          sgdma_from_ram_mm_write_translator_avalon_universal_master_0_write;                    // sgdma_from_ram_mm_write_translator:uav_write -> sgdma_from_ram_mm_write_agent:av_write
	wire   [63:0] sgdma_from_ram_mm_write_translator_avalon_universal_master_0_writedata;                // sgdma_from_ram_mm_write_translator:uav_writedata -> sgdma_from_ram_mm_write_agent:av_writedata
	wire    [8:0] sgdma_from_ram_mm_write_translator_avalon_universal_master_0_burstcount;               // sgdma_from_ram_mm_write_translator:uav_burstcount -> sgdma_from_ram_mm_write_agent:av_burstcount
	wire          rsp_mux_004_src_valid;                                                                 // rsp_mux_004:src_valid -> sgdma_from_ram_mm_write_agent:rp_valid
	wire  [148:0] rsp_mux_004_src_data;                                                                  // rsp_mux_004:src_data -> sgdma_from_ram_mm_write_agent:rp_data
	wire          rsp_mux_004_src_ready;                                                                 // sgdma_from_ram_mm_write_agent:rp_ready -> rsp_mux_004:src_ready
	wire    [8:0] rsp_mux_004_src_channel;                                                               // rsp_mux_004:src_channel -> sgdma_from_ram_mm_write_agent:rp_channel
	wire          rsp_mux_004_src_startofpacket;                                                         // rsp_mux_004:src_startofpacket -> sgdma_from_ram_mm_write_agent:rp_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                           // rsp_mux_004:src_endofpacket -> sgdma_from_ram_mm_write_agent:rp_endofpacket
	wire   [31:0] sgdma_from_fft_csr_agent_m0_readdata;                                                  // sgdma_from_fft_csr_translator:uav_readdata -> sgdma_from_fft_csr_agent:m0_readdata
	wire          sgdma_from_fft_csr_agent_m0_waitrequest;                                               // sgdma_from_fft_csr_translator:uav_waitrequest -> sgdma_from_fft_csr_agent:m0_waitrequest
	wire          sgdma_from_fft_csr_agent_m0_debugaccess;                                               // sgdma_from_fft_csr_agent:m0_debugaccess -> sgdma_from_fft_csr_translator:uav_debugaccess
	wire   [30:0] sgdma_from_fft_csr_agent_m0_address;                                                   // sgdma_from_fft_csr_agent:m0_address -> sgdma_from_fft_csr_translator:uav_address
	wire    [3:0] sgdma_from_fft_csr_agent_m0_byteenable;                                                // sgdma_from_fft_csr_agent:m0_byteenable -> sgdma_from_fft_csr_translator:uav_byteenable
	wire          sgdma_from_fft_csr_agent_m0_read;                                                      // sgdma_from_fft_csr_agent:m0_read -> sgdma_from_fft_csr_translator:uav_read
	wire          sgdma_from_fft_csr_agent_m0_readdatavalid;                                             // sgdma_from_fft_csr_translator:uav_readdatavalid -> sgdma_from_fft_csr_agent:m0_readdatavalid
	wire          sgdma_from_fft_csr_agent_m0_lock;                                                      // sgdma_from_fft_csr_agent:m0_lock -> sgdma_from_fft_csr_translator:uav_lock
	wire   [31:0] sgdma_from_fft_csr_agent_m0_writedata;                                                 // sgdma_from_fft_csr_agent:m0_writedata -> sgdma_from_fft_csr_translator:uav_writedata
	wire          sgdma_from_fft_csr_agent_m0_write;                                                     // sgdma_from_fft_csr_agent:m0_write -> sgdma_from_fft_csr_translator:uav_write
	wire    [2:0] sgdma_from_fft_csr_agent_m0_burstcount;                                                // sgdma_from_fft_csr_agent:m0_burstcount -> sgdma_from_fft_csr_translator:uav_burstcount
	wire          sgdma_from_fft_csr_agent_rf_source_valid;                                              // sgdma_from_fft_csr_agent:rf_source_valid -> sgdma_from_fft_csr_agent_rsp_fifo:in_valid
	wire  [113:0] sgdma_from_fft_csr_agent_rf_source_data;                                               // sgdma_from_fft_csr_agent:rf_source_data -> sgdma_from_fft_csr_agent_rsp_fifo:in_data
	wire          sgdma_from_fft_csr_agent_rf_source_ready;                                              // sgdma_from_fft_csr_agent_rsp_fifo:in_ready -> sgdma_from_fft_csr_agent:rf_source_ready
	wire          sgdma_from_fft_csr_agent_rf_source_startofpacket;                                      // sgdma_from_fft_csr_agent:rf_source_startofpacket -> sgdma_from_fft_csr_agent_rsp_fifo:in_startofpacket
	wire          sgdma_from_fft_csr_agent_rf_source_endofpacket;                                        // sgdma_from_fft_csr_agent:rf_source_endofpacket -> sgdma_from_fft_csr_agent_rsp_fifo:in_endofpacket
	wire          sgdma_from_fft_csr_agent_rsp_fifo_out_valid;                                           // sgdma_from_fft_csr_agent_rsp_fifo:out_valid -> sgdma_from_fft_csr_agent:rf_sink_valid
	wire  [113:0] sgdma_from_fft_csr_agent_rsp_fifo_out_data;                                            // sgdma_from_fft_csr_agent_rsp_fifo:out_data -> sgdma_from_fft_csr_agent:rf_sink_data
	wire          sgdma_from_fft_csr_agent_rsp_fifo_out_ready;                                           // sgdma_from_fft_csr_agent:rf_sink_ready -> sgdma_from_fft_csr_agent_rsp_fifo:out_ready
	wire          sgdma_from_fft_csr_agent_rsp_fifo_out_startofpacket;                                   // sgdma_from_fft_csr_agent_rsp_fifo:out_startofpacket -> sgdma_from_fft_csr_agent:rf_sink_startofpacket
	wire          sgdma_from_fft_csr_agent_rsp_fifo_out_endofpacket;                                     // sgdma_from_fft_csr_agent_rsp_fifo:out_endofpacket -> sgdma_from_fft_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                                     // cmd_mux:src_valid -> sgdma_from_fft_csr_agent:cp_valid
	wire  [112:0] cmd_mux_src_data;                                                                      // cmd_mux:src_data -> sgdma_from_fft_csr_agent:cp_data
	wire          cmd_mux_src_ready;                                                                     // sgdma_from_fft_csr_agent:cp_ready -> cmd_mux:src_ready
	wire    [8:0] cmd_mux_src_channel;                                                                   // cmd_mux:src_channel -> sgdma_from_fft_csr_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                             // cmd_mux:src_startofpacket -> sgdma_from_fft_csr_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                               // cmd_mux:src_endofpacket -> sgdma_from_fft_csr_agent:cp_endofpacket
	wire   [31:0] sgdma_to_fft_csr_agent_m0_readdata;                                                    // sgdma_to_fft_csr_translator:uav_readdata -> sgdma_to_fft_csr_agent:m0_readdata
	wire          sgdma_to_fft_csr_agent_m0_waitrequest;                                                 // sgdma_to_fft_csr_translator:uav_waitrequest -> sgdma_to_fft_csr_agent:m0_waitrequest
	wire          sgdma_to_fft_csr_agent_m0_debugaccess;                                                 // sgdma_to_fft_csr_agent:m0_debugaccess -> sgdma_to_fft_csr_translator:uav_debugaccess
	wire   [30:0] sgdma_to_fft_csr_agent_m0_address;                                                     // sgdma_to_fft_csr_agent:m0_address -> sgdma_to_fft_csr_translator:uav_address
	wire    [3:0] sgdma_to_fft_csr_agent_m0_byteenable;                                                  // sgdma_to_fft_csr_agent:m0_byteenable -> sgdma_to_fft_csr_translator:uav_byteenable
	wire          sgdma_to_fft_csr_agent_m0_read;                                                        // sgdma_to_fft_csr_agent:m0_read -> sgdma_to_fft_csr_translator:uav_read
	wire          sgdma_to_fft_csr_agent_m0_readdatavalid;                                               // sgdma_to_fft_csr_translator:uav_readdatavalid -> sgdma_to_fft_csr_agent:m0_readdatavalid
	wire          sgdma_to_fft_csr_agent_m0_lock;                                                        // sgdma_to_fft_csr_agent:m0_lock -> sgdma_to_fft_csr_translator:uav_lock
	wire   [31:0] sgdma_to_fft_csr_agent_m0_writedata;                                                   // sgdma_to_fft_csr_agent:m0_writedata -> sgdma_to_fft_csr_translator:uav_writedata
	wire          sgdma_to_fft_csr_agent_m0_write;                                                       // sgdma_to_fft_csr_agent:m0_write -> sgdma_to_fft_csr_translator:uav_write
	wire    [2:0] sgdma_to_fft_csr_agent_m0_burstcount;                                                  // sgdma_to_fft_csr_agent:m0_burstcount -> sgdma_to_fft_csr_translator:uav_burstcount
	wire          sgdma_to_fft_csr_agent_rf_source_valid;                                                // sgdma_to_fft_csr_agent:rf_source_valid -> sgdma_to_fft_csr_agent_rsp_fifo:in_valid
	wire  [113:0] sgdma_to_fft_csr_agent_rf_source_data;                                                 // sgdma_to_fft_csr_agent:rf_source_data -> sgdma_to_fft_csr_agent_rsp_fifo:in_data
	wire          sgdma_to_fft_csr_agent_rf_source_ready;                                                // sgdma_to_fft_csr_agent_rsp_fifo:in_ready -> sgdma_to_fft_csr_agent:rf_source_ready
	wire          sgdma_to_fft_csr_agent_rf_source_startofpacket;                                        // sgdma_to_fft_csr_agent:rf_source_startofpacket -> sgdma_to_fft_csr_agent_rsp_fifo:in_startofpacket
	wire          sgdma_to_fft_csr_agent_rf_source_endofpacket;                                          // sgdma_to_fft_csr_agent:rf_source_endofpacket -> sgdma_to_fft_csr_agent_rsp_fifo:in_endofpacket
	wire          sgdma_to_fft_csr_agent_rsp_fifo_out_valid;                                             // sgdma_to_fft_csr_agent_rsp_fifo:out_valid -> sgdma_to_fft_csr_agent:rf_sink_valid
	wire  [113:0] sgdma_to_fft_csr_agent_rsp_fifo_out_data;                                              // sgdma_to_fft_csr_agent_rsp_fifo:out_data -> sgdma_to_fft_csr_agent:rf_sink_data
	wire          sgdma_to_fft_csr_agent_rsp_fifo_out_ready;                                             // sgdma_to_fft_csr_agent:rf_sink_ready -> sgdma_to_fft_csr_agent_rsp_fifo:out_ready
	wire          sgdma_to_fft_csr_agent_rsp_fifo_out_startofpacket;                                     // sgdma_to_fft_csr_agent_rsp_fifo:out_startofpacket -> sgdma_to_fft_csr_agent:rf_sink_startofpacket
	wire          sgdma_to_fft_csr_agent_rsp_fifo_out_endofpacket;                                       // sgdma_to_fft_csr_agent_rsp_fifo:out_endofpacket -> sgdma_to_fft_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                                 // cmd_mux_001:src_valid -> sgdma_to_fft_csr_agent:cp_valid
	wire  [112:0] cmd_mux_001_src_data;                                                                  // cmd_mux_001:src_data -> sgdma_to_fft_csr_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                                 // sgdma_to_fft_csr_agent:cp_ready -> cmd_mux_001:src_ready
	wire    [8:0] cmd_mux_001_src_channel;                                                               // cmd_mux_001:src_channel -> sgdma_to_fft_csr_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                         // cmd_mux_001:src_startofpacket -> sgdma_to_fft_csr_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                           // cmd_mux_001:src_endofpacket -> sgdma_to_fft_csr_agent:cp_endofpacket
	wire   [31:0] sgdma_from_ram_csr_agent_m0_readdata;                                                  // sgdma_from_ram_csr_translator:uav_readdata -> sgdma_from_ram_csr_agent:m0_readdata
	wire          sgdma_from_ram_csr_agent_m0_waitrequest;                                               // sgdma_from_ram_csr_translator:uav_waitrequest -> sgdma_from_ram_csr_agent:m0_waitrequest
	wire          sgdma_from_ram_csr_agent_m0_debugaccess;                                               // sgdma_from_ram_csr_agent:m0_debugaccess -> sgdma_from_ram_csr_translator:uav_debugaccess
	wire   [30:0] sgdma_from_ram_csr_agent_m0_address;                                                   // sgdma_from_ram_csr_agent:m0_address -> sgdma_from_ram_csr_translator:uav_address
	wire    [3:0] sgdma_from_ram_csr_agent_m0_byteenable;                                                // sgdma_from_ram_csr_agent:m0_byteenable -> sgdma_from_ram_csr_translator:uav_byteenable
	wire          sgdma_from_ram_csr_agent_m0_read;                                                      // sgdma_from_ram_csr_agent:m0_read -> sgdma_from_ram_csr_translator:uav_read
	wire          sgdma_from_ram_csr_agent_m0_readdatavalid;                                             // sgdma_from_ram_csr_translator:uav_readdatavalid -> sgdma_from_ram_csr_agent:m0_readdatavalid
	wire          sgdma_from_ram_csr_agent_m0_lock;                                                      // sgdma_from_ram_csr_agent:m0_lock -> sgdma_from_ram_csr_translator:uav_lock
	wire   [31:0] sgdma_from_ram_csr_agent_m0_writedata;                                                 // sgdma_from_ram_csr_agent:m0_writedata -> sgdma_from_ram_csr_translator:uav_writedata
	wire          sgdma_from_ram_csr_agent_m0_write;                                                     // sgdma_from_ram_csr_agent:m0_write -> sgdma_from_ram_csr_translator:uav_write
	wire    [2:0] sgdma_from_ram_csr_agent_m0_burstcount;                                                // sgdma_from_ram_csr_agent:m0_burstcount -> sgdma_from_ram_csr_translator:uav_burstcount
	wire          sgdma_from_ram_csr_agent_rf_source_valid;                                              // sgdma_from_ram_csr_agent:rf_source_valid -> sgdma_from_ram_csr_agent_rsp_fifo:in_valid
	wire  [113:0] sgdma_from_ram_csr_agent_rf_source_data;                                               // sgdma_from_ram_csr_agent:rf_source_data -> sgdma_from_ram_csr_agent_rsp_fifo:in_data
	wire          sgdma_from_ram_csr_agent_rf_source_ready;                                              // sgdma_from_ram_csr_agent_rsp_fifo:in_ready -> sgdma_from_ram_csr_agent:rf_source_ready
	wire          sgdma_from_ram_csr_agent_rf_source_startofpacket;                                      // sgdma_from_ram_csr_agent:rf_source_startofpacket -> sgdma_from_ram_csr_agent_rsp_fifo:in_startofpacket
	wire          sgdma_from_ram_csr_agent_rf_source_endofpacket;                                        // sgdma_from_ram_csr_agent:rf_source_endofpacket -> sgdma_from_ram_csr_agent_rsp_fifo:in_endofpacket
	wire          sgdma_from_ram_csr_agent_rsp_fifo_out_valid;                                           // sgdma_from_ram_csr_agent_rsp_fifo:out_valid -> sgdma_from_ram_csr_agent:rf_sink_valid
	wire  [113:0] sgdma_from_ram_csr_agent_rsp_fifo_out_data;                                            // sgdma_from_ram_csr_agent_rsp_fifo:out_data -> sgdma_from_ram_csr_agent:rf_sink_data
	wire          sgdma_from_ram_csr_agent_rsp_fifo_out_ready;                                           // sgdma_from_ram_csr_agent:rf_sink_ready -> sgdma_from_ram_csr_agent_rsp_fifo:out_ready
	wire          sgdma_from_ram_csr_agent_rsp_fifo_out_startofpacket;                                   // sgdma_from_ram_csr_agent_rsp_fifo:out_startofpacket -> sgdma_from_ram_csr_agent:rf_sink_startofpacket
	wire          sgdma_from_ram_csr_agent_rsp_fifo_out_endofpacket;                                     // sgdma_from_ram_csr_agent_rsp_fifo:out_endofpacket -> sgdma_from_ram_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                                 // cmd_mux_002:src_valid -> sgdma_from_ram_csr_agent:cp_valid
	wire  [112:0] cmd_mux_002_src_data;                                                                  // cmd_mux_002:src_data -> sgdma_from_ram_csr_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                                 // sgdma_from_ram_csr_agent:cp_ready -> cmd_mux_002:src_ready
	wire    [8:0] cmd_mux_002_src_channel;                                                               // cmd_mux_002:src_channel -> sgdma_from_ram_csr_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                         // cmd_mux_002:src_startofpacket -> sgdma_from_ram_csr_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                           // cmd_mux_002:src_endofpacket -> sgdma_from_ram_csr_agent:cp_endofpacket
	wire  [127:0] sgdma_from_fft_descriptor_slave_agent_m0_readdata;                                     // sgdma_from_fft_descriptor_slave_translator:uav_readdata -> sgdma_from_fft_descriptor_slave_agent:m0_readdata
	wire          sgdma_from_fft_descriptor_slave_agent_m0_waitrequest;                                  // sgdma_from_fft_descriptor_slave_translator:uav_waitrequest -> sgdma_from_fft_descriptor_slave_agent:m0_waitrequest
	wire          sgdma_from_fft_descriptor_slave_agent_m0_debugaccess;                                  // sgdma_from_fft_descriptor_slave_agent:m0_debugaccess -> sgdma_from_fft_descriptor_slave_translator:uav_debugaccess
	wire   [30:0] sgdma_from_fft_descriptor_slave_agent_m0_address;                                      // sgdma_from_fft_descriptor_slave_agent:m0_address -> sgdma_from_fft_descriptor_slave_translator:uav_address
	wire   [15:0] sgdma_from_fft_descriptor_slave_agent_m0_byteenable;                                   // sgdma_from_fft_descriptor_slave_agent:m0_byteenable -> sgdma_from_fft_descriptor_slave_translator:uav_byteenable
	wire          sgdma_from_fft_descriptor_slave_agent_m0_read;                                         // sgdma_from_fft_descriptor_slave_agent:m0_read -> sgdma_from_fft_descriptor_slave_translator:uav_read
	wire          sgdma_from_fft_descriptor_slave_agent_m0_readdatavalid;                                // sgdma_from_fft_descriptor_slave_translator:uav_readdatavalid -> sgdma_from_fft_descriptor_slave_agent:m0_readdatavalid
	wire          sgdma_from_fft_descriptor_slave_agent_m0_lock;                                         // sgdma_from_fft_descriptor_slave_agent:m0_lock -> sgdma_from_fft_descriptor_slave_translator:uav_lock
	wire  [127:0] sgdma_from_fft_descriptor_slave_agent_m0_writedata;                                    // sgdma_from_fft_descriptor_slave_agent:m0_writedata -> sgdma_from_fft_descriptor_slave_translator:uav_writedata
	wire          sgdma_from_fft_descriptor_slave_agent_m0_write;                                        // sgdma_from_fft_descriptor_slave_agent:m0_write -> sgdma_from_fft_descriptor_slave_translator:uav_write
	wire    [4:0] sgdma_from_fft_descriptor_slave_agent_m0_burstcount;                                   // sgdma_from_fft_descriptor_slave_agent:m0_burstcount -> sgdma_from_fft_descriptor_slave_translator:uav_burstcount
	wire          sgdma_from_fft_descriptor_slave_agent_rf_source_valid;                                 // sgdma_from_fft_descriptor_slave_agent:rf_source_valid -> sgdma_from_fft_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [221:0] sgdma_from_fft_descriptor_slave_agent_rf_source_data;                                  // sgdma_from_fft_descriptor_slave_agent:rf_source_data -> sgdma_from_fft_descriptor_slave_agent_rsp_fifo:in_data
	wire          sgdma_from_fft_descriptor_slave_agent_rf_source_ready;                                 // sgdma_from_fft_descriptor_slave_agent_rsp_fifo:in_ready -> sgdma_from_fft_descriptor_slave_agent:rf_source_ready
	wire          sgdma_from_fft_descriptor_slave_agent_rf_source_startofpacket;                         // sgdma_from_fft_descriptor_slave_agent:rf_source_startofpacket -> sgdma_from_fft_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          sgdma_from_fft_descriptor_slave_agent_rf_source_endofpacket;                           // sgdma_from_fft_descriptor_slave_agent:rf_source_endofpacket -> sgdma_from_fft_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          sgdma_from_fft_descriptor_slave_agent_rsp_fifo_out_valid;                              // sgdma_from_fft_descriptor_slave_agent_rsp_fifo:out_valid -> sgdma_from_fft_descriptor_slave_agent:rf_sink_valid
	wire  [221:0] sgdma_from_fft_descriptor_slave_agent_rsp_fifo_out_data;                               // sgdma_from_fft_descriptor_slave_agent_rsp_fifo:out_data -> sgdma_from_fft_descriptor_slave_agent:rf_sink_data
	wire          sgdma_from_fft_descriptor_slave_agent_rsp_fifo_out_ready;                              // sgdma_from_fft_descriptor_slave_agent:rf_sink_ready -> sgdma_from_fft_descriptor_slave_agent_rsp_fifo:out_ready
	wire          sgdma_from_fft_descriptor_slave_agent_rsp_fifo_out_startofpacket;                      // sgdma_from_fft_descriptor_slave_agent_rsp_fifo:out_startofpacket -> sgdma_from_fft_descriptor_slave_agent:rf_sink_startofpacket
	wire          sgdma_from_fft_descriptor_slave_agent_rsp_fifo_out_endofpacket;                        // sgdma_from_fft_descriptor_slave_agent_rsp_fifo:out_endofpacket -> sgdma_from_fft_descriptor_slave_agent:rf_sink_endofpacket
	wire          sgdma_from_fft_descriptor_slave_agent_rdata_fifo_src_valid;                            // sgdma_from_fft_descriptor_slave_agent:rdata_fifo_src_valid -> sgdma_from_fft_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [129:0] sgdma_from_fft_descriptor_slave_agent_rdata_fifo_src_data;                             // sgdma_from_fft_descriptor_slave_agent:rdata_fifo_src_data -> sgdma_from_fft_descriptor_slave_agent_rdata_fifo:in_data
	wire          sgdma_from_fft_descriptor_slave_agent_rdata_fifo_src_ready;                            // sgdma_from_fft_descriptor_slave_agent_rdata_fifo:in_ready -> sgdma_from_fft_descriptor_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_003_src_valid;                                                                 // cmd_mux_003:src_valid -> sgdma_from_fft_descriptor_slave_agent:cp_valid
	wire  [220:0] cmd_mux_003_src_data;                                                                  // cmd_mux_003:src_data -> sgdma_from_fft_descriptor_slave_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                                 // sgdma_from_fft_descriptor_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire    [8:0] cmd_mux_003_src_channel;                                                               // cmd_mux_003:src_channel -> sgdma_from_fft_descriptor_slave_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                         // cmd_mux_003:src_startofpacket -> sgdma_from_fft_descriptor_slave_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                           // cmd_mux_003:src_endofpacket -> sgdma_from_fft_descriptor_slave_agent:cp_endofpacket
	wire  [127:0] sgdma_to_fft_descriptor_slave_agent_m0_readdata;                                       // sgdma_to_fft_descriptor_slave_translator:uav_readdata -> sgdma_to_fft_descriptor_slave_agent:m0_readdata
	wire          sgdma_to_fft_descriptor_slave_agent_m0_waitrequest;                                    // sgdma_to_fft_descriptor_slave_translator:uav_waitrequest -> sgdma_to_fft_descriptor_slave_agent:m0_waitrequest
	wire          sgdma_to_fft_descriptor_slave_agent_m0_debugaccess;                                    // sgdma_to_fft_descriptor_slave_agent:m0_debugaccess -> sgdma_to_fft_descriptor_slave_translator:uav_debugaccess
	wire   [30:0] sgdma_to_fft_descriptor_slave_agent_m0_address;                                        // sgdma_to_fft_descriptor_slave_agent:m0_address -> sgdma_to_fft_descriptor_slave_translator:uav_address
	wire   [15:0] sgdma_to_fft_descriptor_slave_agent_m0_byteenable;                                     // sgdma_to_fft_descriptor_slave_agent:m0_byteenable -> sgdma_to_fft_descriptor_slave_translator:uav_byteenable
	wire          sgdma_to_fft_descriptor_slave_agent_m0_read;                                           // sgdma_to_fft_descriptor_slave_agent:m0_read -> sgdma_to_fft_descriptor_slave_translator:uav_read
	wire          sgdma_to_fft_descriptor_slave_agent_m0_readdatavalid;                                  // sgdma_to_fft_descriptor_slave_translator:uav_readdatavalid -> sgdma_to_fft_descriptor_slave_agent:m0_readdatavalid
	wire          sgdma_to_fft_descriptor_slave_agent_m0_lock;                                           // sgdma_to_fft_descriptor_slave_agent:m0_lock -> sgdma_to_fft_descriptor_slave_translator:uav_lock
	wire  [127:0] sgdma_to_fft_descriptor_slave_agent_m0_writedata;                                      // sgdma_to_fft_descriptor_slave_agent:m0_writedata -> sgdma_to_fft_descriptor_slave_translator:uav_writedata
	wire          sgdma_to_fft_descriptor_slave_agent_m0_write;                                          // sgdma_to_fft_descriptor_slave_agent:m0_write -> sgdma_to_fft_descriptor_slave_translator:uav_write
	wire    [4:0] sgdma_to_fft_descriptor_slave_agent_m0_burstcount;                                     // sgdma_to_fft_descriptor_slave_agent:m0_burstcount -> sgdma_to_fft_descriptor_slave_translator:uav_burstcount
	wire          sgdma_to_fft_descriptor_slave_agent_rf_source_valid;                                   // sgdma_to_fft_descriptor_slave_agent:rf_source_valid -> sgdma_to_fft_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [221:0] sgdma_to_fft_descriptor_slave_agent_rf_source_data;                                    // sgdma_to_fft_descriptor_slave_agent:rf_source_data -> sgdma_to_fft_descriptor_slave_agent_rsp_fifo:in_data
	wire          sgdma_to_fft_descriptor_slave_agent_rf_source_ready;                                   // sgdma_to_fft_descriptor_slave_agent_rsp_fifo:in_ready -> sgdma_to_fft_descriptor_slave_agent:rf_source_ready
	wire          sgdma_to_fft_descriptor_slave_agent_rf_source_startofpacket;                           // sgdma_to_fft_descriptor_slave_agent:rf_source_startofpacket -> sgdma_to_fft_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          sgdma_to_fft_descriptor_slave_agent_rf_source_endofpacket;                             // sgdma_to_fft_descriptor_slave_agent:rf_source_endofpacket -> sgdma_to_fft_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          sgdma_to_fft_descriptor_slave_agent_rsp_fifo_out_valid;                                // sgdma_to_fft_descriptor_slave_agent_rsp_fifo:out_valid -> sgdma_to_fft_descriptor_slave_agent:rf_sink_valid
	wire  [221:0] sgdma_to_fft_descriptor_slave_agent_rsp_fifo_out_data;                                 // sgdma_to_fft_descriptor_slave_agent_rsp_fifo:out_data -> sgdma_to_fft_descriptor_slave_agent:rf_sink_data
	wire          sgdma_to_fft_descriptor_slave_agent_rsp_fifo_out_ready;                                // sgdma_to_fft_descriptor_slave_agent:rf_sink_ready -> sgdma_to_fft_descriptor_slave_agent_rsp_fifo:out_ready
	wire          sgdma_to_fft_descriptor_slave_agent_rsp_fifo_out_startofpacket;                        // sgdma_to_fft_descriptor_slave_agent_rsp_fifo:out_startofpacket -> sgdma_to_fft_descriptor_slave_agent:rf_sink_startofpacket
	wire          sgdma_to_fft_descriptor_slave_agent_rsp_fifo_out_endofpacket;                          // sgdma_to_fft_descriptor_slave_agent_rsp_fifo:out_endofpacket -> sgdma_to_fft_descriptor_slave_agent:rf_sink_endofpacket
	wire          sgdma_to_fft_descriptor_slave_agent_rdata_fifo_src_valid;                              // sgdma_to_fft_descriptor_slave_agent:rdata_fifo_src_valid -> sgdma_to_fft_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [129:0] sgdma_to_fft_descriptor_slave_agent_rdata_fifo_src_data;                               // sgdma_to_fft_descriptor_slave_agent:rdata_fifo_src_data -> sgdma_to_fft_descriptor_slave_agent_rdata_fifo:in_data
	wire          sgdma_to_fft_descriptor_slave_agent_rdata_fifo_src_ready;                              // sgdma_to_fft_descriptor_slave_agent_rdata_fifo:in_ready -> sgdma_to_fft_descriptor_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_004_src_valid;                                                                 // cmd_mux_004:src_valid -> sgdma_to_fft_descriptor_slave_agent:cp_valid
	wire  [220:0] cmd_mux_004_src_data;                                                                  // cmd_mux_004:src_data -> sgdma_to_fft_descriptor_slave_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                                 // sgdma_to_fft_descriptor_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire    [8:0] cmd_mux_004_src_channel;                                                               // cmd_mux_004:src_channel -> sgdma_to_fft_descriptor_slave_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                         // cmd_mux_004:src_startofpacket -> sgdma_to_fft_descriptor_slave_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                           // cmd_mux_004:src_endofpacket -> sgdma_to_fft_descriptor_slave_agent:cp_endofpacket
	wire  [127:0] sgdma_from_ram_descriptor_slave_agent_m0_readdata;                                     // sgdma_from_ram_descriptor_slave_translator:uav_readdata -> sgdma_from_ram_descriptor_slave_agent:m0_readdata
	wire          sgdma_from_ram_descriptor_slave_agent_m0_waitrequest;                                  // sgdma_from_ram_descriptor_slave_translator:uav_waitrequest -> sgdma_from_ram_descriptor_slave_agent:m0_waitrequest
	wire          sgdma_from_ram_descriptor_slave_agent_m0_debugaccess;                                  // sgdma_from_ram_descriptor_slave_agent:m0_debugaccess -> sgdma_from_ram_descriptor_slave_translator:uav_debugaccess
	wire   [30:0] sgdma_from_ram_descriptor_slave_agent_m0_address;                                      // sgdma_from_ram_descriptor_slave_agent:m0_address -> sgdma_from_ram_descriptor_slave_translator:uav_address
	wire   [15:0] sgdma_from_ram_descriptor_slave_agent_m0_byteenable;                                   // sgdma_from_ram_descriptor_slave_agent:m0_byteenable -> sgdma_from_ram_descriptor_slave_translator:uav_byteenable
	wire          sgdma_from_ram_descriptor_slave_agent_m0_read;                                         // sgdma_from_ram_descriptor_slave_agent:m0_read -> sgdma_from_ram_descriptor_slave_translator:uav_read
	wire          sgdma_from_ram_descriptor_slave_agent_m0_readdatavalid;                                // sgdma_from_ram_descriptor_slave_translator:uav_readdatavalid -> sgdma_from_ram_descriptor_slave_agent:m0_readdatavalid
	wire          sgdma_from_ram_descriptor_slave_agent_m0_lock;                                         // sgdma_from_ram_descriptor_slave_agent:m0_lock -> sgdma_from_ram_descriptor_slave_translator:uav_lock
	wire  [127:0] sgdma_from_ram_descriptor_slave_agent_m0_writedata;                                    // sgdma_from_ram_descriptor_slave_agent:m0_writedata -> sgdma_from_ram_descriptor_slave_translator:uav_writedata
	wire          sgdma_from_ram_descriptor_slave_agent_m0_write;                                        // sgdma_from_ram_descriptor_slave_agent:m0_write -> sgdma_from_ram_descriptor_slave_translator:uav_write
	wire    [4:0] sgdma_from_ram_descriptor_slave_agent_m0_burstcount;                                   // sgdma_from_ram_descriptor_slave_agent:m0_burstcount -> sgdma_from_ram_descriptor_slave_translator:uav_burstcount
	wire          sgdma_from_ram_descriptor_slave_agent_rf_source_valid;                                 // sgdma_from_ram_descriptor_slave_agent:rf_source_valid -> sgdma_from_ram_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [221:0] sgdma_from_ram_descriptor_slave_agent_rf_source_data;                                  // sgdma_from_ram_descriptor_slave_agent:rf_source_data -> sgdma_from_ram_descriptor_slave_agent_rsp_fifo:in_data
	wire          sgdma_from_ram_descriptor_slave_agent_rf_source_ready;                                 // sgdma_from_ram_descriptor_slave_agent_rsp_fifo:in_ready -> sgdma_from_ram_descriptor_slave_agent:rf_source_ready
	wire          sgdma_from_ram_descriptor_slave_agent_rf_source_startofpacket;                         // sgdma_from_ram_descriptor_slave_agent:rf_source_startofpacket -> sgdma_from_ram_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          sgdma_from_ram_descriptor_slave_agent_rf_source_endofpacket;                           // sgdma_from_ram_descriptor_slave_agent:rf_source_endofpacket -> sgdma_from_ram_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          sgdma_from_ram_descriptor_slave_agent_rsp_fifo_out_valid;                              // sgdma_from_ram_descriptor_slave_agent_rsp_fifo:out_valid -> sgdma_from_ram_descriptor_slave_agent:rf_sink_valid
	wire  [221:0] sgdma_from_ram_descriptor_slave_agent_rsp_fifo_out_data;                               // sgdma_from_ram_descriptor_slave_agent_rsp_fifo:out_data -> sgdma_from_ram_descriptor_slave_agent:rf_sink_data
	wire          sgdma_from_ram_descriptor_slave_agent_rsp_fifo_out_ready;                              // sgdma_from_ram_descriptor_slave_agent:rf_sink_ready -> sgdma_from_ram_descriptor_slave_agent_rsp_fifo:out_ready
	wire          sgdma_from_ram_descriptor_slave_agent_rsp_fifo_out_startofpacket;                      // sgdma_from_ram_descriptor_slave_agent_rsp_fifo:out_startofpacket -> sgdma_from_ram_descriptor_slave_agent:rf_sink_startofpacket
	wire          sgdma_from_ram_descriptor_slave_agent_rsp_fifo_out_endofpacket;                        // sgdma_from_ram_descriptor_slave_agent_rsp_fifo:out_endofpacket -> sgdma_from_ram_descriptor_slave_agent:rf_sink_endofpacket
	wire          sgdma_from_ram_descriptor_slave_agent_rdata_fifo_src_valid;                            // sgdma_from_ram_descriptor_slave_agent:rdata_fifo_src_valid -> sgdma_from_ram_descriptor_slave_agent_rdata_fifo:in_valid
	wire  [129:0] sgdma_from_ram_descriptor_slave_agent_rdata_fifo_src_data;                             // sgdma_from_ram_descriptor_slave_agent:rdata_fifo_src_data -> sgdma_from_ram_descriptor_slave_agent_rdata_fifo:in_data
	wire          sgdma_from_ram_descriptor_slave_agent_rdata_fifo_src_ready;                            // sgdma_from_ram_descriptor_slave_agent_rdata_fifo:in_ready -> sgdma_from_ram_descriptor_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_005_src_valid;                                                                 // cmd_mux_005:src_valid -> sgdma_from_ram_descriptor_slave_agent:cp_valid
	wire  [220:0] cmd_mux_005_src_data;                                                                  // cmd_mux_005:src_data -> sgdma_from_ram_descriptor_slave_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                                 // sgdma_from_ram_descriptor_slave_agent:cp_ready -> cmd_mux_005:src_ready
	wire    [8:0] cmd_mux_005_src_channel;                                                               // cmd_mux_005:src_channel -> sgdma_from_ram_descriptor_slave_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                         // cmd_mux_005:src_startofpacket -> sgdma_from_ram_descriptor_slave_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                           // cmd_mux_005:src_endofpacket -> sgdma_from_ram_descriptor_slave_agent:cp_endofpacket
	wire   [31:0] fft_stadapter_0_s0_agent_m0_readdata;                                                  // FFT_STadapter_0_s0_translator:uav_readdata -> FFT_STadapter_0_s0_agent:m0_readdata
	wire          fft_stadapter_0_s0_agent_m0_waitrequest;                                               // FFT_STadapter_0_s0_translator:uav_waitrequest -> FFT_STadapter_0_s0_agent:m0_waitrequest
	wire          fft_stadapter_0_s0_agent_m0_debugaccess;                                               // FFT_STadapter_0_s0_agent:m0_debugaccess -> FFT_STadapter_0_s0_translator:uav_debugaccess
	wire   [30:0] fft_stadapter_0_s0_agent_m0_address;                                                   // FFT_STadapter_0_s0_agent:m0_address -> FFT_STadapter_0_s0_translator:uav_address
	wire    [3:0] fft_stadapter_0_s0_agent_m0_byteenable;                                                // FFT_STadapter_0_s0_agent:m0_byteenable -> FFT_STadapter_0_s0_translator:uav_byteenable
	wire          fft_stadapter_0_s0_agent_m0_read;                                                      // FFT_STadapter_0_s0_agent:m0_read -> FFT_STadapter_0_s0_translator:uav_read
	wire          fft_stadapter_0_s0_agent_m0_readdatavalid;                                             // FFT_STadapter_0_s0_translator:uav_readdatavalid -> FFT_STadapter_0_s0_agent:m0_readdatavalid
	wire          fft_stadapter_0_s0_agent_m0_lock;                                                      // FFT_STadapter_0_s0_agent:m0_lock -> FFT_STadapter_0_s0_translator:uav_lock
	wire   [31:0] fft_stadapter_0_s0_agent_m0_writedata;                                                 // FFT_STadapter_0_s0_agent:m0_writedata -> FFT_STadapter_0_s0_translator:uav_writedata
	wire          fft_stadapter_0_s0_agent_m0_write;                                                     // FFT_STadapter_0_s0_agent:m0_write -> FFT_STadapter_0_s0_translator:uav_write
	wire    [2:0] fft_stadapter_0_s0_agent_m0_burstcount;                                                // FFT_STadapter_0_s0_agent:m0_burstcount -> FFT_STadapter_0_s0_translator:uav_burstcount
	wire          fft_stadapter_0_s0_agent_rf_source_valid;                                              // FFT_STadapter_0_s0_agent:rf_source_valid -> FFT_STadapter_0_s0_agent_rsp_fifo:in_valid
	wire  [113:0] fft_stadapter_0_s0_agent_rf_source_data;                                               // FFT_STadapter_0_s0_agent:rf_source_data -> FFT_STadapter_0_s0_agent_rsp_fifo:in_data
	wire          fft_stadapter_0_s0_agent_rf_source_ready;                                              // FFT_STadapter_0_s0_agent_rsp_fifo:in_ready -> FFT_STadapter_0_s0_agent:rf_source_ready
	wire          fft_stadapter_0_s0_agent_rf_source_startofpacket;                                      // FFT_STadapter_0_s0_agent:rf_source_startofpacket -> FFT_STadapter_0_s0_agent_rsp_fifo:in_startofpacket
	wire          fft_stadapter_0_s0_agent_rf_source_endofpacket;                                        // FFT_STadapter_0_s0_agent:rf_source_endofpacket -> FFT_STadapter_0_s0_agent_rsp_fifo:in_endofpacket
	wire          fft_stadapter_0_s0_agent_rsp_fifo_out_valid;                                           // FFT_STadapter_0_s0_agent_rsp_fifo:out_valid -> FFT_STadapter_0_s0_agent:rf_sink_valid
	wire  [113:0] fft_stadapter_0_s0_agent_rsp_fifo_out_data;                                            // FFT_STadapter_0_s0_agent_rsp_fifo:out_data -> FFT_STadapter_0_s0_agent:rf_sink_data
	wire          fft_stadapter_0_s0_agent_rsp_fifo_out_ready;                                           // FFT_STadapter_0_s0_agent:rf_sink_ready -> FFT_STadapter_0_s0_agent_rsp_fifo:out_ready
	wire          fft_stadapter_0_s0_agent_rsp_fifo_out_startofpacket;                                   // FFT_STadapter_0_s0_agent_rsp_fifo:out_startofpacket -> FFT_STadapter_0_s0_agent:rf_sink_startofpacket
	wire          fft_stadapter_0_s0_agent_rsp_fifo_out_endofpacket;                                     // FFT_STadapter_0_s0_agent_rsp_fifo:out_endofpacket -> FFT_STadapter_0_s0_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                                 // cmd_mux_006:src_valid -> FFT_STadapter_0_s0_agent:cp_valid
	wire  [112:0] cmd_mux_006_src_data;                                                                  // cmd_mux_006:src_data -> FFT_STadapter_0_s0_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                                 // FFT_STadapter_0_s0_agent:cp_ready -> cmd_mux_006:src_ready
	wire    [8:0] cmd_mux_006_src_channel;                                                               // cmd_mux_006:src_channel -> FFT_STadapter_0_s0_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                         // cmd_mux_006:src_startofpacket -> FFT_STadapter_0_s0_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                           // cmd_mux_006:src_endofpacket -> FFT_STadapter_0_s0_agent:cp_endofpacket
	wire   [63:0] data_s1_agent_m0_readdata;                                                             // data_s1_translator:uav_readdata -> data_s1_agent:m0_readdata
	wire          data_s1_agent_m0_waitrequest;                                                          // data_s1_translator:uav_waitrequest -> data_s1_agent:m0_waitrequest
	wire          data_s1_agent_m0_debugaccess;                                                          // data_s1_agent:m0_debugaccess -> data_s1_translator:uav_debugaccess
	wire   [30:0] data_s1_agent_m0_address;                                                              // data_s1_agent:m0_address -> data_s1_translator:uav_address
	wire    [7:0] data_s1_agent_m0_byteenable;                                                           // data_s1_agent:m0_byteenable -> data_s1_translator:uav_byteenable
	wire          data_s1_agent_m0_read;                                                                 // data_s1_agent:m0_read -> data_s1_translator:uav_read
	wire          data_s1_agent_m0_readdatavalid;                                                        // data_s1_translator:uav_readdatavalid -> data_s1_agent:m0_readdatavalid
	wire          data_s1_agent_m0_lock;                                                                 // data_s1_agent:m0_lock -> data_s1_translator:uav_lock
	wire   [63:0] data_s1_agent_m0_writedata;                                                            // data_s1_agent:m0_writedata -> data_s1_translator:uav_writedata
	wire          data_s1_agent_m0_write;                                                                // data_s1_agent:m0_write -> data_s1_translator:uav_write
	wire    [3:0] data_s1_agent_m0_burstcount;                                                           // data_s1_agent:m0_burstcount -> data_s1_translator:uav_burstcount
	wire          data_s1_agent_rf_source_valid;                                                         // data_s1_agent:rf_source_valid -> data_s1_agent_rsp_fifo:in_valid
	wire  [149:0] data_s1_agent_rf_source_data;                                                          // data_s1_agent:rf_source_data -> data_s1_agent_rsp_fifo:in_data
	wire          data_s1_agent_rf_source_ready;                                                         // data_s1_agent_rsp_fifo:in_ready -> data_s1_agent:rf_source_ready
	wire          data_s1_agent_rf_source_startofpacket;                                                 // data_s1_agent:rf_source_startofpacket -> data_s1_agent_rsp_fifo:in_startofpacket
	wire          data_s1_agent_rf_source_endofpacket;                                                   // data_s1_agent:rf_source_endofpacket -> data_s1_agent_rsp_fifo:in_endofpacket
	wire          data_s1_agent_rsp_fifo_out_valid;                                                      // data_s1_agent_rsp_fifo:out_valid -> data_s1_agent:rf_sink_valid
	wire  [149:0] data_s1_agent_rsp_fifo_out_data;                                                       // data_s1_agent_rsp_fifo:out_data -> data_s1_agent:rf_sink_data
	wire          data_s1_agent_rsp_fifo_out_ready;                                                      // data_s1_agent:rf_sink_ready -> data_s1_agent_rsp_fifo:out_ready
	wire          data_s1_agent_rsp_fifo_out_startofpacket;                                              // data_s1_agent_rsp_fifo:out_startofpacket -> data_s1_agent:rf_sink_startofpacket
	wire          data_s1_agent_rsp_fifo_out_endofpacket;                                                // data_s1_agent_rsp_fifo:out_endofpacket -> data_s1_agent:rf_sink_endofpacket
	wire          data_s1_agent_rdata_fifo_src_valid;                                                    // data_s1_agent:rdata_fifo_src_valid -> data_s1_agent_rdata_fifo:in_valid
	wire   [65:0] data_s1_agent_rdata_fifo_src_data;                                                     // data_s1_agent:rdata_fifo_src_data -> data_s1_agent_rdata_fifo:in_data
	wire          data_s1_agent_rdata_fifo_src_ready;                                                    // data_s1_agent_rdata_fifo:in_ready -> data_s1_agent:rdata_fifo_src_ready
	wire   [63:0] ddr_s0_agent_m0_readdata;                                                              // DDR_s0_translator:uav_readdata -> DDR_s0_agent:m0_readdata
	wire          ddr_s0_agent_m0_waitrequest;                                                           // DDR_s0_translator:uav_waitrequest -> DDR_s0_agent:m0_waitrequest
	wire          ddr_s0_agent_m0_debugaccess;                                                           // DDR_s0_agent:m0_debugaccess -> DDR_s0_translator:uav_debugaccess
	wire   [30:0] ddr_s0_agent_m0_address;                                                               // DDR_s0_agent:m0_address -> DDR_s0_translator:uav_address
	wire    [7:0] ddr_s0_agent_m0_byteenable;                                                            // DDR_s0_agent:m0_byteenable -> DDR_s0_translator:uav_byteenable
	wire          ddr_s0_agent_m0_read;                                                                  // DDR_s0_agent:m0_read -> DDR_s0_translator:uav_read
	wire          ddr_s0_agent_m0_readdatavalid;                                                         // DDR_s0_translator:uav_readdatavalid -> DDR_s0_agent:m0_readdatavalid
	wire          ddr_s0_agent_m0_lock;                                                                  // DDR_s0_agent:m0_lock -> DDR_s0_translator:uav_lock
	wire   [63:0] ddr_s0_agent_m0_writedata;                                                             // DDR_s0_agent:m0_writedata -> DDR_s0_translator:uav_writedata
	wire          ddr_s0_agent_m0_write;                                                                 // DDR_s0_agent:m0_write -> DDR_s0_translator:uav_write
	wire    [8:0] ddr_s0_agent_m0_burstcount;                                                            // DDR_s0_agent:m0_burstcount -> DDR_s0_translator:uav_burstcount
	wire          ddr_s0_agent_rf_source_valid;                                                          // DDR_s0_agent:rf_source_valid -> DDR_s0_agent_rsp_fifo:in_valid
	wire  [149:0] ddr_s0_agent_rf_source_data;                                                           // DDR_s0_agent:rf_source_data -> DDR_s0_agent_rsp_fifo:in_data
	wire          ddr_s0_agent_rf_source_ready;                                                          // DDR_s0_agent_rsp_fifo:in_ready -> DDR_s0_agent:rf_source_ready
	wire          ddr_s0_agent_rf_source_startofpacket;                                                  // DDR_s0_agent:rf_source_startofpacket -> DDR_s0_agent_rsp_fifo:in_startofpacket
	wire          ddr_s0_agent_rf_source_endofpacket;                                                    // DDR_s0_agent:rf_source_endofpacket -> DDR_s0_agent_rsp_fifo:in_endofpacket
	wire          ddr_s0_agent_rsp_fifo_out_valid;                                                       // DDR_s0_agent_rsp_fifo:out_valid -> DDR_s0_agent:rf_sink_valid
	wire  [149:0] ddr_s0_agent_rsp_fifo_out_data;                                                        // DDR_s0_agent_rsp_fifo:out_data -> DDR_s0_agent:rf_sink_data
	wire          ddr_s0_agent_rsp_fifo_out_ready;                                                       // DDR_s0_agent:rf_sink_ready -> DDR_s0_agent_rsp_fifo:out_ready
	wire          ddr_s0_agent_rsp_fifo_out_startofpacket;                                               // DDR_s0_agent_rsp_fifo:out_startofpacket -> DDR_s0_agent:rf_sink_startofpacket
	wire          ddr_s0_agent_rsp_fifo_out_endofpacket;                                                 // DDR_s0_agent_rsp_fifo:out_endofpacket -> DDR_s0_agent:rf_sink_endofpacket
	wire          ddr_s0_agent_rdata_fifo_src_valid;                                                     // DDR_s0_agent:rdata_fifo_src_valid -> DDR_s0_agent_rdata_fifo:in_valid
	wire   [65:0] ddr_s0_agent_rdata_fifo_src_data;                                                      // DDR_s0_agent:rdata_fifo_src_data -> DDR_s0_agent_rdata_fifo:in_data
	wire          ddr_s0_agent_rdata_fifo_src_ready;                                                     // DDR_s0_agent_rdata_fifo:in_ready -> DDR_s0_agent:rdata_fifo_src_ready
	wire          mm_bridge_0_m0_agent_cp_valid;                                                         // mm_bridge_0_m0_agent:cp_valid -> router:sink_valid
	wire  [112:0] mm_bridge_0_m0_agent_cp_data;                                                          // mm_bridge_0_m0_agent:cp_data -> router:sink_data
	wire          mm_bridge_0_m0_agent_cp_ready;                                                         // router:sink_ready -> mm_bridge_0_m0_agent:cp_ready
	wire          mm_bridge_0_m0_agent_cp_startofpacket;                                                 // mm_bridge_0_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          mm_bridge_0_m0_agent_cp_endofpacket;                                                   // mm_bridge_0_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          sgdma_to_fft_mm_read_agent_cp_valid;                                                   // sgdma_to_fft_mm_read_agent:cp_valid -> router_001:sink_valid
	wire  [112:0] sgdma_to_fft_mm_read_agent_cp_data;                                                    // sgdma_to_fft_mm_read_agent:cp_data -> router_001:sink_data
	wire          sgdma_to_fft_mm_read_agent_cp_ready;                                                   // router_001:sink_ready -> sgdma_to_fft_mm_read_agent:cp_ready
	wire          sgdma_to_fft_mm_read_agent_cp_startofpacket;                                           // sgdma_to_fft_mm_read_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          sgdma_to_fft_mm_read_agent_cp_endofpacket;                                             // sgdma_to_fft_mm_read_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          sgdma_from_ram_mm_read_agent_cp_valid;                                                 // sgdma_from_ram_mm_read_agent:cp_valid -> router_002:sink_valid
	wire  [148:0] sgdma_from_ram_mm_read_agent_cp_data;                                                  // sgdma_from_ram_mm_read_agent:cp_data -> router_002:sink_data
	wire          sgdma_from_ram_mm_read_agent_cp_ready;                                                 // router_002:sink_ready -> sgdma_from_ram_mm_read_agent:cp_ready
	wire          sgdma_from_ram_mm_read_agent_cp_startofpacket;                                         // sgdma_from_ram_mm_read_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          sgdma_from_ram_mm_read_agent_cp_endofpacket;                                           // sgdma_from_ram_mm_read_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                  // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [148:0] router_002_src_data;                                                                   // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                                  // cmd_demux_002:sink_ready -> router_002:src_ready
	wire    [8:0] router_002_src_channel;                                                                // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                                          // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                            // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          sgdma_from_fft_mm_write_agent_cp_valid;                                                // sgdma_from_fft_mm_write_agent:cp_valid -> router_003:sink_valid
	wire  [148:0] sgdma_from_fft_mm_write_agent_cp_data;                                                 // sgdma_from_fft_mm_write_agent:cp_data -> router_003:sink_data
	wire          sgdma_from_fft_mm_write_agent_cp_ready;                                                // router_003:sink_ready -> sgdma_from_fft_mm_write_agent:cp_ready
	wire          sgdma_from_fft_mm_write_agent_cp_startofpacket;                                        // sgdma_from_fft_mm_write_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          sgdma_from_fft_mm_write_agent_cp_endofpacket;                                          // sgdma_from_fft_mm_write_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                  // router_003:src_valid -> cmd_demux_003:sink_valid
	wire  [148:0] router_003_src_data;                                                                   // router_003:src_data -> cmd_demux_003:sink_data
	wire          router_003_src_ready;                                                                  // cmd_demux_003:sink_ready -> router_003:src_ready
	wire    [8:0] router_003_src_channel;                                                                // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_startofpacket;                                                          // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          router_003_src_endofpacket;                                                            // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          sgdma_from_ram_mm_write_agent_cp_valid;                                                // sgdma_from_ram_mm_write_agent:cp_valid -> router_004:sink_valid
	wire  [148:0] sgdma_from_ram_mm_write_agent_cp_data;                                                 // sgdma_from_ram_mm_write_agent:cp_data -> router_004:sink_data
	wire          sgdma_from_ram_mm_write_agent_cp_ready;                                                // router_004:sink_ready -> sgdma_from_ram_mm_write_agent:cp_ready
	wire          sgdma_from_ram_mm_write_agent_cp_startofpacket;                                        // sgdma_from_ram_mm_write_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          sgdma_from_ram_mm_write_agent_cp_endofpacket;                                          // sgdma_from_ram_mm_write_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                  // router_004:src_valid -> cmd_demux_004:sink_valid
	wire  [148:0] router_004_src_data;                                                                   // router_004:src_data -> cmd_demux_004:sink_data
	wire          router_004_src_ready;                                                                  // cmd_demux_004:sink_ready -> router_004:src_ready
	wire    [8:0] router_004_src_channel;                                                                // router_004:src_channel -> cmd_demux_004:sink_channel
	wire          router_004_src_startofpacket;                                                          // router_004:src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          router_004_src_endofpacket;                                                            // router_004:src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          sgdma_from_fft_csr_agent_rp_valid;                                                     // sgdma_from_fft_csr_agent:rp_valid -> router_005:sink_valid
	wire  [112:0] sgdma_from_fft_csr_agent_rp_data;                                                      // sgdma_from_fft_csr_agent:rp_data -> router_005:sink_data
	wire          sgdma_from_fft_csr_agent_rp_ready;                                                     // router_005:sink_ready -> sgdma_from_fft_csr_agent:rp_ready
	wire          sgdma_from_fft_csr_agent_rp_startofpacket;                                             // sgdma_from_fft_csr_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          sgdma_from_fft_csr_agent_rp_endofpacket;                                               // sgdma_from_fft_csr_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                  // router_005:src_valid -> rsp_demux:sink_valid
	wire  [112:0] router_005_src_data;                                                                   // router_005:src_data -> rsp_demux:sink_data
	wire          router_005_src_ready;                                                                  // rsp_demux:sink_ready -> router_005:src_ready
	wire    [8:0] router_005_src_channel;                                                                // router_005:src_channel -> rsp_demux:sink_channel
	wire          router_005_src_startofpacket;                                                          // router_005:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_005_src_endofpacket;                                                            // router_005:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          sgdma_to_fft_csr_agent_rp_valid;                                                       // sgdma_to_fft_csr_agent:rp_valid -> router_006:sink_valid
	wire  [112:0] sgdma_to_fft_csr_agent_rp_data;                                                        // sgdma_to_fft_csr_agent:rp_data -> router_006:sink_data
	wire          sgdma_to_fft_csr_agent_rp_ready;                                                       // router_006:sink_ready -> sgdma_to_fft_csr_agent:rp_ready
	wire          sgdma_to_fft_csr_agent_rp_startofpacket;                                               // sgdma_to_fft_csr_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          sgdma_to_fft_csr_agent_rp_endofpacket;                                                 // sgdma_to_fft_csr_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                  // router_006:src_valid -> rsp_demux_001:sink_valid
	wire  [112:0] router_006_src_data;                                                                   // router_006:src_data -> rsp_demux_001:sink_data
	wire          router_006_src_ready;                                                                  // rsp_demux_001:sink_ready -> router_006:src_ready
	wire    [8:0] router_006_src_channel;                                                                // router_006:src_channel -> rsp_demux_001:sink_channel
	wire          router_006_src_startofpacket;                                                          // router_006:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_006_src_endofpacket;                                                            // router_006:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          sgdma_from_ram_csr_agent_rp_valid;                                                     // sgdma_from_ram_csr_agent:rp_valid -> router_007:sink_valid
	wire  [112:0] sgdma_from_ram_csr_agent_rp_data;                                                      // sgdma_from_ram_csr_agent:rp_data -> router_007:sink_data
	wire          sgdma_from_ram_csr_agent_rp_ready;                                                     // router_007:sink_ready -> sgdma_from_ram_csr_agent:rp_ready
	wire          sgdma_from_ram_csr_agent_rp_startofpacket;                                             // sgdma_from_ram_csr_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          sgdma_from_ram_csr_agent_rp_endofpacket;                                               // sgdma_from_ram_csr_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                  // router_007:src_valid -> rsp_demux_002:sink_valid
	wire  [112:0] router_007_src_data;                                                                   // router_007:src_data -> rsp_demux_002:sink_data
	wire          router_007_src_ready;                                                                  // rsp_demux_002:sink_ready -> router_007:src_ready
	wire    [8:0] router_007_src_channel;                                                                // router_007:src_channel -> rsp_demux_002:sink_channel
	wire          router_007_src_startofpacket;                                                          // router_007:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_007_src_endofpacket;                                                            // router_007:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          sgdma_from_fft_descriptor_slave_agent_rp_valid;                                        // sgdma_from_fft_descriptor_slave_agent:rp_valid -> router_008:sink_valid
	wire  [220:0] sgdma_from_fft_descriptor_slave_agent_rp_data;                                         // sgdma_from_fft_descriptor_slave_agent:rp_data -> router_008:sink_data
	wire          sgdma_from_fft_descriptor_slave_agent_rp_ready;                                        // router_008:sink_ready -> sgdma_from_fft_descriptor_slave_agent:rp_ready
	wire          sgdma_from_fft_descriptor_slave_agent_rp_startofpacket;                                // sgdma_from_fft_descriptor_slave_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          sgdma_from_fft_descriptor_slave_agent_rp_endofpacket;                                  // sgdma_from_fft_descriptor_slave_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                  // router_008:src_valid -> rsp_demux_003:sink_valid
	wire  [220:0] router_008_src_data;                                                                   // router_008:src_data -> rsp_demux_003:sink_data
	wire          router_008_src_ready;                                                                  // rsp_demux_003:sink_ready -> router_008:src_ready
	wire    [8:0] router_008_src_channel;                                                                // router_008:src_channel -> rsp_demux_003:sink_channel
	wire          router_008_src_startofpacket;                                                          // router_008:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_008_src_endofpacket;                                                            // router_008:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          sgdma_to_fft_descriptor_slave_agent_rp_valid;                                          // sgdma_to_fft_descriptor_slave_agent:rp_valid -> router_009:sink_valid
	wire  [220:0] sgdma_to_fft_descriptor_slave_agent_rp_data;                                           // sgdma_to_fft_descriptor_slave_agent:rp_data -> router_009:sink_data
	wire          sgdma_to_fft_descriptor_slave_agent_rp_ready;                                          // router_009:sink_ready -> sgdma_to_fft_descriptor_slave_agent:rp_ready
	wire          sgdma_to_fft_descriptor_slave_agent_rp_startofpacket;                                  // sgdma_to_fft_descriptor_slave_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          sgdma_to_fft_descriptor_slave_agent_rp_endofpacket;                                    // sgdma_to_fft_descriptor_slave_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                  // router_009:src_valid -> rsp_demux_004:sink_valid
	wire  [220:0] router_009_src_data;                                                                   // router_009:src_data -> rsp_demux_004:sink_data
	wire          router_009_src_ready;                                                                  // rsp_demux_004:sink_ready -> router_009:src_ready
	wire    [8:0] router_009_src_channel;                                                                // router_009:src_channel -> rsp_demux_004:sink_channel
	wire          router_009_src_startofpacket;                                                          // router_009:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_009_src_endofpacket;                                                            // router_009:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          sgdma_from_ram_descriptor_slave_agent_rp_valid;                                        // sgdma_from_ram_descriptor_slave_agent:rp_valid -> router_010:sink_valid
	wire  [220:0] sgdma_from_ram_descriptor_slave_agent_rp_data;                                         // sgdma_from_ram_descriptor_slave_agent:rp_data -> router_010:sink_data
	wire          sgdma_from_ram_descriptor_slave_agent_rp_ready;                                        // router_010:sink_ready -> sgdma_from_ram_descriptor_slave_agent:rp_ready
	wire          sgdma_from_ram_descriptor_slave_agent_rp_startofpacket;                                // sgdma_from_ram_descriptor_slave_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          sgdma_from_ram_descriptor_slave_agent_rp_endofpacket;                                  // sgdma_from_ram_descriptor_slave_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                  // router_010:src_valid -> rsp_demux_005:sink_valid
	wire  [220:0] router_010_src_data;                                                                   // router_010:src_data -> rsp_demux_005:sink_data
	wire          router_010_src_ready;                                                                  // rsp_demux_005:sink_ready -> router_010:src_ready
	wire    [8:0] router_010_src_channel;                                                                // router_010:src_channel -> rsp_demux_005:sink_channel
	wire          router_010_src_startofpacket;                                                          // router_010:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_010_src_endofpacket;                                                            // router_010:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          fft_stadapter_0_s0_agent_rp_valid;                                                     // FFT_STadapter_0_s0_agent:rp_valid -> router_011:sink_valid
	wire  [112:0] fft_stadapter_0_s0_agent_rp_data;                                                      // FFT_STadapter_0_s0_agent:rp_data -> router_011:sink_data
	wire          fft_stadapter_0_s0_agent_rp_ready;                                                     // router_011:sink_ready -> FFT_STadapter_0_s0_agent:rp_ready
	wire          fft_stadapter_0_s0_agent_rp_startofpacket;                                             // FFT_STadapter_0_s0_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          fft_stadapter_0_s0_agent_rp_endofpacket;                                               // FFT_STadapter_0_s0_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                  // router_011:src_valid -> rsp_demux_006:sink_valid
	wire  [112:0] router_011_src_data;                                                                   // router_011:src_data -> rsp_demux_006:sink_data
	wire          router_011_src_ready;                                                                  // rsp_demux_006:sink_ready -> router_011:src_ready
	wire    [8:0] router_011_src_channel;                                                                // router_011:src_channel -> rsp_demux_006:sink_channel
	wire          router_011_src_startofpacket;                                                          // router_011:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_011_src_endofpacket;                                                            // router_011:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          data_s1_agent_rp_valid;                                                                // data_s1_agent:rp_valid -> router_012:sink_valid
	wire  [148:0] data_s1_agent_rp_data;                                                                 // data_s1_agent:rp_data -> router_012:sink_data
	wire          data_s1_agent_rp_ready;                                                                // router_012:sink_ready -> data_s1_agent:rp_ready
	wire          data_s1_agent_rp_startofpacket;                                                        // data_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          data_s1_agent_rp_endofpacket;                                                          // data_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                  // router_012:src_valid -> rsp_demux_007:sink_valid
	wire  [148:0] router_012_src_data;                                                                   // router_012:src_data -> rsp_demux_007:sink_data
	wire          router_012_src_ready;                                                                  // rsp_demux_007:sink_ready -> router_012:src_ready
	wire    [8:0] router_012_src_channel;                                                                // router_012:src_channel -> rsp_demux_007:sink_channel
	wire          router_012_src_startofpacket;                                                          // router_012:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_012_src_endofpacket;                                                            // router_012:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          ddr_s0_agent_rp_valid;                                                                 // DDR_s0_agent:rp_valid -> router_013:sink_valid
	wire  [148:0] ddr_s0_agent_rp_data;                                                                  // DDR_s0_agent:rp_data -> router_013:sink_data
	wire          ddr_s0_agent_rp_ready;                                                                 // router_013:sink_ready -> DDR_s0_agent:rp_ready
	wire          ddr_s0_agent_rp_startofpacket;                                                         // DDR_s0_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          ddr_s0_agent_rp_endofpacket;                                                           // DDR_s0_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                  // router_013:src_valid -> rsp_demux_008:sink_valid
	wire  [148:0] router_013_src_data;                                                                   // router_013:src_data -> rsp_demux_008:sink_data
	wire          router_013_src_ready;                                                                  // rsp_demux_008:sink_ready -> router_013:src_ready
	wire    [8:0] router_013_src_channel;                                                                // router_013:src_channel -> rsp_demux_008:sink_channel
	wire          router_013_src_startofpacket;                                                          // router_013:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_013_src_endofpacket;                                                            // router_013:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          router_src_valid;                                                                      // router:src_valid -> mm_bridge_0_m0_limiter:cmd_sink_valid
	wire  [112:0] router_src_data;                                                                       // router:src_data -> mm_bridge_0_m0_limiter:cmd_sink_data
	wire          router_src_ready;                                                                      // mm_bridge_0_m0_limiter:cmd_sink_ready -> router:src_ready
	wire    [8:0] router_src_channel;                                                                    // router:src_channel -> mm_bridge_0_m0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                              // router:src_startofpacket -> mm_bridge_0_m0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                                // router:src_endofpacket -> mm_bridge_0_m0_limiter:cmd_sink_endofpacket
	wire  [112:0] mm_bridge_0_m0_limiter_cmd_src_data;                                                   // mm_bridge_0_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          mm_bridge_0_m0_limiter_cmd_src_ready;                                                  // cmd_demux:sink_ready -> mm_bridge_0_m0_limiter:cmd_src_ready
	wire    [8:0] mm_bridge_0_m0_limiter_cmd_src_channel;                                                // mm_bridge_0_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          mm_bridge_0_m0_limiter_cmd_src_startofpacket;                                          // mm_bridge_0_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          mm_bridge_0_m0_limiter_cmd_src_endofpacket;                                            // mm_bridge_0_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                     // rsp_mux:src_valid -> mm_bridge_0_m0_limiter:rsp_sink_valid
	wire  [112:0] rsp_mux_src_data;                                                                      // rsp_mux:src_data -> mm_bridge_0_m0_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                     // mm_bridge_0_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [8:0] rsp_mux_src_channel;                                                                   // rsp_mux:src_channel -> mm_bridge_0_m0_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                             // rsp_mux:src_startofpacket -> mm_bridge_0_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                               // rsp_mux:src_endofpacket -> mm_bridge_0_m0_limiter:rsp_sink_endofpacket
	wire          mm_bridge_0_m0_limiter_rsp_src_valid;                                                  // mm_bridge_0_m0_limiter:rsp_src_valid -> mm_bridge_0_m0_agent:rp_valid
	wire  [112:0] mm_bridge_0_m0_limiter_rsp_src_data;                                                   // mm_bridge_0_m0_limiter:rsp_src_data -> mm_bridge_0_m0_agent:rp_data
	wire          mm_bridge_0_m0_limiter_rsp_src_ready;                                                  // mm_bridge_0_m0_agent:rp_ready -> mm_bridge_0_m0_limiter:rsp_src_ready
	wire    [8:0] mm_bridge_0_m0_limiter_rsp_src_channel;                                                // mm_bridge_0_m0_limiter:rsp_src_channel -> mm_bridge_0_m0_agent:rp_channel
	wire          mm_bridge_0_m0_limiter_rsp_src_startofpacket;                                          // mm_bridge_0_m0_limiter:rsp_src_startofpacket -> mm_bridge_0_m0_agent:rp_startofpacket
	wire          mm_bridge_0_m0_limiter_rsp_src_endofpacket;                                            // mm_bridge_0_m0_limiter:rsp_src_endofpacket -> mm_bridge_0_m0_agent:rp_endofpacket
	wire          router_001_src_valid;                                                                  // router_001:src_valid -> sgdma_to_fft_mm_read_limiter:cmd_sink_valid
	wire  [112:0] router_001_src_data;                                                                   // router_001:src_data -> sgdma_to_fft_mm_read_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                                  // sgdma_to_fft_mm_read_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [8:0] router_001_src_channel;                                                                // router_001:src_channel -> sgdma_to_fft_mm_read_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                          // router_001:src_startofpacket -> sgdma_to_fft_mm_read_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                            // router_001:src_endofpacket -> sgdma_to_fft_mm_read_limiter:cmd_sink_endofpacket
	wire  [112:0] sgdma_to_fft_mm_read_limiter_cmd_src_data;                                             // sgdma_to_fft_mm_read_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          sgdma_to_fft_mm_read_limiter_cmd_src_ready;                                            // cmd_demux_001:sink_ready -> sgdma_to_fft_mm_read_limiter:cmd_src_ready
	wire    [8:0] sgdma_to_fft_mm_read_limiter_cmd_src_channel;                                          // sgdma_to_fft_mm_read_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          sgdma_to_fft_mm_read_limiter_cmd_src_startofpacket;                                    // sgdma_to_fft_mm_read_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          sgdma_to_fft_mm_read_limiter_cmd_src_endofpacket;                                      // sgdma_to_fft_mm_read_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                                 // rsp_mux_001:src_valid -> sgdma_to_fft_mm_read_limiter:rsp_sink_valid
	wire  [112:0] rsp_mux_001_src_data;                                                                  // rsp_mux_001:src_data -> sgdma_to_fft_mm_read_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                                 // sgdma_to_fft_mm_read_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [8:0] rsp_mux_001_src_channel;                                                               // rsp_mux_001:src_channel -> sgdma_to_fft_mm_read_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                         // rsp_mux_001:src_startofpacket -> sgdma_to_fft_mm_read_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                           // rsp_mux_001:src_endofpacket -> sgdma_to_fft_mm_read_limiter:rsp_sink_endofpacket
	wire          sgdma_to_fft_mm_read_limiter_rsp_src_valid;                                            // sgdma_to_fft_mm_read_limiter:rsp_src_valid -> sgdma_to_fft_mm_read_agent:rp_valid
	wire  [112:0] sgdma_to_fft_mm_read_limiter_rsp_src_data;                                             // sgdma_to_fft_mm_read_limiter:rsp_src_data -> sgdma_to_fft_mm_read_agent:rp_data
	wire          sgdma_to_fft_mm_read_limiter_rsp_src_ready;                                            // sgdma_to_fft_mm_read_agent:rp_ready -> sgdma_to_fft_mm_read_limiter:rsp_src_ready
	wire    [8:0] sgdma_to_fft_mm_read_limiter_rsp_src_channel;                                          // sgdma_to_fft_mm_read_limiter:rsp_src_channel -> sgdma_to_fft_mm_read_agent:rp_channel
	wire          sgdma_to_fft_mm_read_limiter_rsp_src_startofpacket;                                    // sgdma_to_fft_mm_read_limiter:rsp_src_startofpacket -> sgdma_to_fft_mm_read_agent:rp_startofpacket
	wire          sgdma_to_fft_mm_read_limiter_rsp_src_endofpacket;                                      // sgdma_to_fft_mm_read_limiter:rsp_src_endofpacket -> sgdma_to_fft_mm_read_agent:rp_endofpacket
	wire          cmd_mux_007_src_valid;                                                                 // cmd_mux_007:src_valid -> data_s1_burst_adapter:sink0_valid
	wire  [148:0] cmd_mux_007_src_data;                                                                  // cmd_mux_007:src_data -> data_s1_burst_adapter:sink0_data
	wire          cmd_mux_007_src_ready;                                                                 // data_s1_burst_adapter:sink0_ready -> cmd_mux_007:src_ready
	wire    [8:0] cmd_mux_007_src_channel;                                                               // cmd_mux_007:src_channel -> data_s1_burst_adapter:sink0_channel
	wire          cmd_mux_007_src_startofpacket;                                                         // cmd_mux_007:src_startofpacket -> data_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                           // cmd_mux_007:src_endofpacket -> data_s1_burst_adapter:sink0_endofpacket
	wire          data_s1_burst_adapter_source0_valid;                                                   // data_s1_burst_adapter:source0_valid -> data_s1_agent:cp_valid
	wire  [148:0] data_s1_burst_adapter_source0_data;                                                    // data_s1_burst_adapter:source0_data -> data_s1_agent:cp_data
	wire          data_s1_burst_adapter_source0_ready;                                                   // data_s1_agent:cp_ready -> data_s1_burst_adapter:source0_ready
	wire    [8:0] data_s1_burst_adapter_source0_channel;                                                 // data_s1_burst_adapter:source0_channel -> data_s1_agent:cp_channel
	wire          data_s1_burst_adapter_source0_startofpacket;                                           // data_s1_burst_adapter:source0_startofpacket -> data_s1_agent:cp_startofpacket
	wire          data_s1_burst_adapter_source0_endofpacket;                                             // data_s1_burst_adapter:source0_endofpacket -> data_s1_agent:cp_endofpacket
	wire          ddr_s0_burst_adapter_source0_valid;                                                    // DDR_s0_burst_adapter:source0_valid -> DDR_s0_agent:cp_valid
	wire  [148:0] ddr_s0_burst_adapter_source0_data;                                                     // DDR_s0_burst_adapter:source0_data -> DDR_s0_agent:cp_data
	wire          ddr_s0_burst_adapter_source0_ready;                                                    // DDR_s0_agent:cp_ready -> DDR_s0_burst_adapter:source0_ready
	wire    [8:0] ddr_s0_burst_adapter_source0_channel;                                                  // DDR_s0_burst_adapter:source0_channel -> DDR_s0_agent:cp_channel
	wire          ddr_s0_burst_adapter_source0_startofpacket;                                            // DDR_s0_burst_adapter:source0_startofpacket -> DDR_s0_agent:cp_startofpacket
	wire          ddr_s0_burst_adapter_source0_endofpacket;                                              // DDR_s0_burst_adapter:source0_endofpacket -> DDR_s0_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                                  // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [112:0] cmd_demux_src0_data;                                                                   // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                  // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [8:0] cmd_demux_src0_channel;                                                                // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                          // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                            // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                  // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [112:0] cmd_demux_src1_data;                                                                   // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                                  // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [8:0] cmd_demux_src1_channel;                                                                // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                          // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                            // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                                  // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [112:0] cmd_demux_src2_data;                                                                   // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                                  // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [8:0] cmd_demux_src2_channel;                                                                // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                          // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                            // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                                  // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [112:0] cmd_demux_src6_data;                                                                   // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                                  // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire    [8:0] cmd_demux_src6_channel;                                                                // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                          // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                            // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_002_src0_valid;                                                              // cmd_demux_002:src0_valid -> cmd_mux_007:sink2_valid
	wire  [148:0] cmd_demux_002_src0_data;                                                               // cmd_demux_002:src0_data -> cmd_mux_007:sink2_data
	wire          cmd_demux_002_src0_ready;                                                              // cmd_mux_007:sink2_ready -> cmd_demux_002:src0_ready
	wire    [8:0] cmd_demux_002_src0_channel;                                                            // cmd_demux_002:src0_channel -> cmd_mux_007:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                                      // cmd_demux_002:src0_startofpacket -> cmd_mux_007:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                        // cmd_demux_002:src0_endofpacket -> cmd_mux_007:sink2_endofpacket
	wire          cmd_demux_003_src0_valid;                                                              // cmd_demux_003:src0_valid -> cmd_mux_007:sink3_valid
	wire  [148:0] cmd_demux_003_src0_data;                                                               // cmd_demux_003:src0_data -> cmd_mux_007:sink3_data
	wire          cmd_demux_003_src0_ready;                                                              // cmd_mux_007:sink3_ready -> cmd_demux_003:src0_ready
	wire    [8:0] cmd_demux_003_src0_channel;                                                            // cmd_demux_003:src0_channel -> cmd_mux_007:sink3_channel
	wire          cmd_demux_003_src0_startofpacket;                                                      // cmd_demux_003:src0_startofpacket -> cmd_mux_007:sink3_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                        // cmd_demux_003:src0_endofpacket -> cmd_mux_007:sink3_endofpacket
	wire          cmd_demux_003_src1_valid;                                                              // cmd_demux_003:src1_valid -> cmd_mux_008:sink1_valid
	wire  [148:0] cmd_demux_003_src1_data;                                                               // cmd_demux_003:src1_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_003_src1_ready;                                                              // cmd_mux_008:sink1_ready -> cmd_demux_003:src1_ready
	wire    [8:0] cmd_demux_003_src1_channel;                                                            // cmd_demux_003:src1_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_003_src1_startofpacket;                                                      // cmd_demux_003:src1_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                                        // cmd_demux_003:src1_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_004_src0_valid;                                                              // cmd_demux_004:src0_valid -> cmd_mux_008:sink2_valid
	wire  [148:0] cmd_demux_004_src0_data;                                                               // cmd_demux_004:src0_data -> cmd_mux_008:sink2_data
	wire          cmd_demux_004_src0_ready;                                                              // cmd_mux_008:sink2_ready -> cmd_demux_004:src0_ready
	wire    [8:0] cmd_demux_004_src0_channel;                                                            // cmd_demux_004:src0_channel -> cmd_mux_008:sink2_channel
	wire          cmd_demux_004_src0_startofpacket;                                                      // cmd_demux_004:src0_startofpacket -> cmd_mux_008:sink2_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                        // cmd_demux_004:src0_endofpacket -> cmd_mux_008:sink2_endofpacket
	wire          rsp_demux_src0_valid;                                                                  // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [112:0] rsp_demux_src0_data;                                                                   // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                  // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [8:0] rsp_demux_src0_channel;                                                                // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                          // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                            // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                              // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [112:0] rsp_demux_001_src0_data;                                                               // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                              // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [8:0] rsp_demux_001_src0_channel;                                                            // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                      // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                        // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                              // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [112:0] rsp_demux_002_src0_data;                                                               // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                              // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [8:0] rsp_demux_002_src0_channel;                                                            // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                      // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                        // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_006_src0_valid;                                                              // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [112:0] rsp_demux_006_src0_data;                                                               // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                              // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire    [8:0] rsp_demux_006_src0_channel;                                                            // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                      // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                        // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_007_src2_valid;                                                              // rsp_demux_007:src2_valid -> rsp_mux_002:sink0_valid
	wire  [148:0] rsp_demux_007_src2_data;                                                               // rsp_demux_007:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_007_src2_ready;                                                              // rsp_mux_002:sink0_ready -> rsp_demux_007:src2_ready
	wire    [8:0] rsp_demux_007_src2_channel;                                                            // rsp_demux_007:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_007_src2_startofpacket;                                                      // rsp_demux_007:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_007_src2_endofpacket;                                                        // rsp_demux_007:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_007_src3_valid;                                                              // rsp_demux_007:src3_valid -> rsp_mux_003:sink0_valid
	wire  [148:0] rsp_demux_007_src3_data;                                                               // rsp_demux_007:src3_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_007_src3_ready;                                                              // rsp_mux_003:sink0_ready -> rsp_demux_007:src3_ready
	wire    [8:0] rsp_demux_007_src3_channel;                                                            // rsp_demux_007:src3_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_007_src3_startofpacket;                                                      // rsp_demux_007:src3_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_007_src3_endofpacket;                                                        // rsp_demux_007:src3_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_008_src1_valid;                                                              // rsp_demux_008:src1_valid -> rsp_mux_003:sink1_valid
	wire  [148:0] rsp_demux_008_src1_data;                                                               // rsp_demux_008:src1_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_008_src1_ready;                                                              // rsp_mux_003:sink1_ready -> rsp_demux_008:src1_ready
	wire    [8:0] rsp_demux_008_src1_channel;                                                            // rsp_demux_008:src1_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_008_src1_startofpacket;                                                      // rsp_demux_008:src1_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                        // rsp_demux_008:src1_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          rsp_demux_008_src2_valid;                                                              // rsp_demux_008:src2_valid -> rsp_mux_004:sink0_valid
	wire  [148:0] rsp_demux_008_src2_data;                                                               // rsp_demux_008:src2_data -> rsp_mux_004:sink0_data
	wire          rsp_demux_008_src2_ready;                                                              // rsp_mux_004:sink0_ready -> rsp_demux_008:src2_ready
	wire    [8:0] rsp_demux_008_src2_channel;                                                            // rsp_demux_008:src2_channel -> rsp_mux_004:sink0_channel
	wire          rsp_demux_008_src2_startofpacket;                                                      // rsp_demux_008:src2_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          rsp_demux_008_src2_endofpacket;                                                        // rsp_demux_008:src2_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                                  // cmd_demux:src3_valid -> mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter:in_valid
	wire  [112:0] cmd_demux_src3_data;                                                                   // cmd_demux:src3_data -> mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_demux_src3_ready;                                                                  // mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter:in_ready -> cmd_demux:src3_ready
	wire    [8:0] cmd_demux_src3_channel;                                                                // cmd_demux:src3_channel -> mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_src3_startofpacket;                                                          // cmd_demux:src3_startofpacket -> mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                            // cmd_demux:src3_endofpacket -> mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter_src_valid;         // mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter:out_valid -> cmd_mux_003:sink0_valid
	wire  [220:0] mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter_src_data;          // mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter:out_data -> cmd_mux_003:sink0_data
	wire          mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter_src_ready;         // cmd_mux_003:sink0_ready -> mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter:out_ready
	wire    [8:0] mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter_src_channel;       // mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter:out_channel -> cmd_mux_003:sink0_channel
	wire          mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter_src_startofpacket; // mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter_src_endofpacket;   // mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                                  // cmd_demux:src4_valid -> mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter:in_valid
	wire  [112:0] cmd_demux_src4_data;                                                                   // cmd_demux:src4_data -> mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_demux_src4_ready;                                                                  // mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter:in_ready -> cmd_demux:src4_ready
	wire    [8:0] cmd_demux_src4_channel;                                                                // cmd_demux:src4_channel -> mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_src4_startofpacket;                                                          // cmd_demux:src4_startofpacket -> mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                            // cmd_demux:src4_endofpacket -> mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter_src_valid;           // mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter:out_valid -> cmd_mux_004:sink0_valid
	wire  [220:0] mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter_src_data;            // mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter:out_data -> cmd_mux_004:sink0_data
	wire          mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter_src_ready;           // cmd_mux_004:sink0_ready -> mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter:out_ready
	wire    [8:0] mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter_src_channel;         // mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter:out_channel -> cmd_mux_004:sink0_channel
	wire          mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter_src_startofpacket;   // mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter_src_endofpacket;     // mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                                  // cmd_demux:src5_valid -> mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter:in_valid
	wire  [112:0] cmd_demux_src5_data;                                                                   // cmd_demux:src5_data -> mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_demux_src5_ready;                                                                  // mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter:in_ready -> cmd_demux:src5_ready
	wire    [8:0] cmd_demux_src5_channel;                                                                // cmd_demux:src5_channel -> mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_src5_startofpacket;                                                          // cmd_demux:src5_startofpacket -> mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                            // cmd_demux:src5_endofpacket -> mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter_src_valid;         // mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter:out_valid -> cmd_mux_005:sink0_valid
	wire  [220:0] mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter_src_data;          // mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter:out_data -> cmd_mux_005:sink0_data
	wire          mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter_src_ready;         // cmd_mux_005:sink0_ready -> mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter:out_ready
	wire    [8:0] mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter_src_channel;       // mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter:out_channel -> cmd_mux_005:sink0_channel
	wire          mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter_src_startofpacket; // mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter_src_endofpacket;   // mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                                  // cmd_demux:src7_valid -> mm_bridge_0_m0_to_data_s1_cmd_width_adapter:in_valid
	wire  [112:0] cmd_demux_src7_data;                                                                   // cmd_demux:src7_data -> mm_bridge_0_m0_to_data_s1_cmd_width_adapter:in_data
	wire          cmd_demux_src7_ready;                                                                  // mm_bridge_0_m0_to_data_s1_cmd_width_adapter:in_ready -> cmd_demux:src7_ready
	wire    [8:0] cmd_demux_src7_channel;                                                                // cmd_demux:src7_channel -> mm_bridge_0_m0_to_data_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src7_startofpacket;                                                          // cmd_demux:src7_startofpacket -> mm_bridge_0_m0_to_data_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                            // cmd_demux:src7_endofpacket -> mm_bridge_0_m0_to_data_s1_cmd_width_adapter:in_endofpacket
	wire          mm_bridge_0_m0_to_data_s1_cmd_width_adapter_src_valid;                                 // mm_bridge_0_m0_to_data_s1_cmd_width_adapter:out_valid -> cmd_mux_007:sink0_valid
	wire  [148:0] mm_bridge_0_m0_to_data_s1_cmd_width_adapter_src_data;                                  // mm_bridge_0_m0_to_data_s1_cmd_width_adapter:out_data -> cmd_mux_007:sink0_data
	wire          mm_bridge_0_m0_to_data_s1_cmd_width_adapter_src_ready;                                 // cmd_mux_007:sink0_ready -> mm_bridge_0_m0_to_data_s1_cmd_width_adapter:out_ready
	wire    [8:0] mm_bridge_0_m0_to_data_s1_cmd_width_adapter_src_channel;                               // mm_bridge_0_m0_to_data_s1_cmd_width_adapter:out_channel -> cmd_mux_007:sink0_channel
	wire          mm_bridge_0_m0_to_data_s1_cmd_width_adapter_src_startofpacket;                         // mm_bridge_0_m0_to_data_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          mm_bridge_0_m0_to_data_s1_cmd_width_adapter_src_endofpacket;                           // mm_bridge_0_m0_to_data_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                              // cmd_demux_001:src0_valid -> sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter:in_valid
	wire  [112:0] cmd_demux_001_src0_data;                                                               // cmd_demux_001:src0_data -> sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter:in_data
	wire          cmd_demux_001_src0_ready;                                                              // sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter:in_ready -> cmd_demux_001:src0_ready
	wire    [8:0] cmd_demux_001_src0_channel;                                                            // cmd_demux_001:src0_channel -> sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                                      // cmd_demux_001:src0_startofpacket -> sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                        // cmd_demux_001:src0_endofpacket -> sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter:in_endofpacket
	wire          sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter_src_valid;                           // sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter:out_valid -> cmd_mux_007:sink1_valid
	wire  [148:0] sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter_src_data;                            // sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter:out_data -> cmd_mux_007:sink1_data
	wire          sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter_src_ready;                           // cmd_mux_007:sink1_ready -> sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter:out_ready
	wire    [8:0] sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter_src_channel;                         // sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter:out_channel -> cmd_mux_007:sink1_channel
	wire          sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter_src_startofpacket;                   // sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter_src_endofpacket;                     // sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                              // cmd_demux_001:src1_valid -> sgdma_to_fft_mm_read_to_DDR_s0_cmd_width_adapter:in_valid
	wire  [112:0] cmd_demux_001_src1_data;                                                               // cmd_demux_001:src1_data -> sgdma_to_fft_mm_read_to_DDR_s0_cmd_width_adapter:in_data
	wire          cmd_demux_001_src1_ready;                                                              // sgdma_to_fft_mm_read_to_DDR_s0_cmd_width_adapter:in_ready -> cmd_demux_001:src1_ready
	wire    [8:0] cmd_demux_001_src1_channel;                                                            // cmd_demux_001:src1_channel -> sgdma_to_fft_mm_read_to_DDR_s0_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                                      // cmd_demux_001:src1_startofpacket -> sgdma_to_fft_mm_read_to_DDR_s0_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                        // cmd_demux_001:src1_endofpacket -> sgdma_to_fft_mm_read_to_DDR_s0_cmd_width_adapter:in_endofpacket
	wire          sgdma_to_fft_mm_read_to_ddr_s0_cmd_width_adapter_src_valid;                            // sgdma_to_fft_mm_read_to_DDR_s0_cmd_width_adapter:out_valid -> cmd_mux_008:sink0_valid
	wire  [148:0] sgdma_to_fft_mm_read_to_ddr_s0_cmd_width_adapter_src_data;                             // sgdma_to_fft_mm_read_to_DDR_s0_cmd_width_adapter:out_data -> cmd_mux_008:sink0_data
	wire          sgdma_to_fft_mm_read_to_ddr_s0_cmd_width_adapter_src_ready;                            // cmd_mux_008:sink0_ready -> sgdma_to_fft_mm_read_to_DDR_s0_cmd_width_adapter:out_ready
	wire    [8:0] sgdma_to_fft_mm_read_to_ddr_s0_cmd_width_adapter_src_channel;                          // sgdma_to_fft_mm_read_to_DDR_s0_cmd_width_adapter:out_channel -> cmd_mux_008:sink0_channel
	wire          sgdma_to_fft_mm_read_to_ddr_s0_cmd_width_adapter_src_startofpacket;                    // sgdma_to_fft_mm_read_to_DDR_s0_cmd_width_adapter:out_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          sgdma_to_fft_mm_read_to_ddr_s0_cmd_width_adapter_src_endofpacket;                      // sgdma_to_fft_mm_read_to_DDR_s0_cmd_width_adapter:out_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          rsp_demux_003_src0_valid;                                                              // rsp_demux_003:src0_valid -> sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_valid
	wire  [220:0] rsp_demux_003_src0_data;                                                               // rsp_demux_003:src0_data -> sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_data
	wire          rsp_demux_003_src0_ready;                                                              // sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_ready -> rsp_demux_003:src0_ready
	wire    [8:0] rsp_demux_003_src0_channel;                                                            // rsp_demux_003:src0_channel -> sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                                      // rsp_demux_003:src0_startofpacket -> sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                        // rsp_demux_003:src0_endofpacket -> sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_endofpacket
	wire          sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_valid;         // sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_valid -> rsp_mux:sink3_valid
	wire  [112:0] sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_data;          // sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_data -> rsp_mux:sink3_data
	wire          sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_ready;         // rsp_mux:sink3_ready -> sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_ready
	wire    [8:0] sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_channel;       // sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_channel -> rsp_mux:sink3_channel
	wire          sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket; // sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket;   // sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                              // rsp_demux_004:src0_valid -> sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_valid
	wire  [220:0] rsp_demux_004_src0_data;                                                               // rsp_demux_004:src0_data -> sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_data
	wire          rsp_demux_004_src0_ready;                                                              // sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_ready -> rsp_demux_004:src0_ready
	wire    [8:0] rsp_demux_004_src0_channel;                                                            // rsp_demux_004:src0_channel -> sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                                      // rsp_demux_004:src0_startofpacket -> sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                        // rsp_demux_004:src0_endofpacket -> sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_endofpacket
	wire          sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_valid;           // sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_valid -> rsp_mux:sink4_valid
	wire  [112:0] sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_data;            // sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_data -> rsp_mux:sink4_data
	wire          sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_ready;           // rsp_mux:sink4_ready -> sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_ready
	wire    [8:0] sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_channel;         // sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_channel -> rsp_mux:sink4_channel
	wire          sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket;   // sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire          sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket;     // sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                              // rsp_demux_005:src0_valid -> sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_valid
	wire  [220:0] rsp_demux_005_src0_data;                                                               // rsp_demux_005:src0_data -> sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_data
	wire          rsp_demux_005_src0_ready;                                                              // sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_ready -> rsp_demux_005:src0_ready
	wire    [8:0] rsp_demux_005_src0_channel;                                                            // rsp_demux_005:src0_channel -> sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_005_src0_startofpacket;                                                      // rsp_demux_005:src0_startofpacket -> sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                        // rsp_demux_005:src0_endofpacket -> sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:in_endofpacket
	wire          sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_valid;         // sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_valid -> rsp_mux:sink5_valid
	wire  [112:0] sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_data;          // sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_data -> rsp_mux:sink5_data
	wire          sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_ready;         // rsp_mux:sink5_ready -> sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_ready
	wire    [8:0] sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_channel;       // sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_channel -> rsp_mux:sink5_channel
	wire          sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket; // sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink5_startofpacket
	wire          sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket;   // sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_007_src0_valid;                                                              // rsp_demux_007:src0_valid -> data_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_valid
	wire  [148:0] rsp_demux_007_src0_data;                                                               // rsp_demux_007:src0_data -> data_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_data
	wire          rsp_demux_007_src0_ready;                                                              // data_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_ready -> rsp_demux_007:src0_ready
	wire    [8:0] rsp_demux_007_src0_channel;                                                            // rsp_demux_007:src0_channel -> data_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_007_src0_startofpacket;                                                      // rsp_demux_007:src0_startofpacket -> data_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                        // rsp_demux_007:src0_endofpacket -> data_s1_to_mm_bridge_0_m0_rsp_width_adapter:in_endofpacket
	wire          data_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_valid;                                 // data_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_valid -> rsp_mux:sink7_valid
	wire  [112:0] data_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_data;                                  // data_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_data -> rsp_mux:sink7_data
	wire          data_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_ready;                                 // rsp_mux:sink7_ready -> data_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_ready
	wire    [8:0] data_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_channel;                               // data_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_channel -> rsp_mux:sink7_channel
	wire          data_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket;                         // data_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink7_startofpacket
	wire          data_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket;                           // data_s1_to_mm_bridge_0_m0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                              // rsp_demux_007:src1_valid -> data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter:in_valid
	wire  [148:0] rsp_demux_007_src1_data;                                                               // rsp_demux_007:src1_data -> data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter:in_data
	wire          rsp_demux_007_src1_ready;                                                              // data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter:in_ready -> rsp_demux_007:src1_ready
	wire    [8:0] rsp_demux_007_src1_channel;                                                            // rsp_demux_007:src1_channel -> data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter:in_channel
	wire          rsp_demux_007_src1_startofpacket;                                                      // rsp_demux_007:src1_startofpacket -> data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                                        // rsp_demux_007:src1_endofpacket -> data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter:in_endofpacket
	wire          data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_valid;                           // data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter:out_valid -> rsp_mux_001:sink0_valid
	wire  [112:0] data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_data;                            // data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter:out_data -> rsp_mux_001:sink0_data
	wire          data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_ready;                           // rsp_mux_001:sink0_ready -> data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter:out_ready
	wire    [8:0] data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_channel;                         // data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter:out_channel -> rsp_mux_001:sink0_channel
	wire          data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_startofpacket;                   // data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_endofpacket;                     // data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_008_src0_valid;                                                              // rsp_demux_008:src0_valid -> DDR_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter:in_valid
	wire  [148:0] rsp_demux_008_src0_data;                                                               // rsp_demux_008:src0_data -> DDR_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter:in_data
	wire          rsp_demux_008_src0_ready;                                                              // DDR_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter:in_ready -> rsp_demux_008:src0_ready
	wire    [8:0] rsp_demux_008_src0_channel;                                                            // rsp_demux_008:src0_channel -> DDR_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter:in_channel
	wire          rsp_demux_008_src0_startofpacket;                                                      // rsp_demux_008:src0_startofpacket -> DDR_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                        // rsp_demux_008:src0_endofpacket -> DDR_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter:in_endofpacket
	wire          ddr_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_valid;                            // DDR_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter:out_valid -> rsp_mux_001:sink1_valid
	wire  [112:0] ddr_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_data;                             // DDR_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter:out_data -> rsp_mux_001:sink1_data
	wire          ddr_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_ready;                            // rsp_mux_001:sink1_ready -> DDR_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter:out_ready
	wire    [8:0] ddr_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_channel;                          // DDR_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter:out_channel -> rsp_mux_001:sink1_channel
	wire          ddr_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_startofpacket;                    // DDR_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          ddr_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_endofpacket;                      // DDR_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          cmd_mux_008_src_valid;                                                                 // cmd_mux_008:src_valid -> pipeline_stage:in_valid
	wire  [148:0] cmd_mux_008_src_data;                                                                  // cmd_mux_008:src_data -> pipeline_stage:in_data
	wire          cmd_mux_008_src_ready;                                                                 // pipeline_stage:in_ready -> cmd_mux_008:src_ready
	wire    [8:0] cmd_mux_008_src_channel;                                                               // cmd_mux_008:src_channel -> pipeline_stage:in_channel
	wire          cmd_mux_008_src_startofpacket;                                                         // cmd_mux_008:src_startofpacket -> pipeline_stage:in_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                           // cmd_mux_008:src_endofpacket -> pipeline_stage:in_endofpacket
	wire          pipeline_stage_source0_valid;                                                          // pipeline_stage:out_valid -> DDR_s0_burst_adapter:sink0_valid
	wire  [148:0] pipeline_stage_source0_data;                                                           // pipeline_stage:out_data -> DDR_s0_burst_adapter:sink0_data
	wire          pipeline_stage_source0_ready;                                                          // DDR_s0_burst_adapter:sink0_ready -> pipeline_stage:out_ready
	wire    [8:0] pipeline_stage_source0_channel;                                                        // pipeline_stage:out_channel -> DDR_s0_burst_adapter:sink0_channel
	wire          pipeline_stage_source0_startofpacket;                                                  // pipeline_stage:out_startofpacket -> DDR_s0_burst_adapter:sink0_startofpacket
	wire          pipeline_stage_source0_endofpacket;                                                    // pipeline_stage:out_endofpacket -> DDR_s0_burst_adapter:sink0_endofpacket
	wire    [8:0] mm_bridge_0_m0_limiter_cmd_valid_data;                                                 // mm_bridge_0_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [8:0] sgdma_to_fft_mm_read_limiter_cmd_valid_data;                                           // sgdma_to_fft_mm_read_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          sgdma_from_fft_csr_agent_rdata_fifo_src_valid;                                         // sgdma_from_fft_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] sgdma_from_fft_csr_agent_rdata_fifo_src_data;                                          // sgdma_from_fft_csr_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          sgdma_from_fft_csr_agent_rdata_fifo_src_ready;                                         // avalon_st_adapter:in_0_ready -> sgdma_from_fft_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                         // avalon_st_adapter:out_0_valid -> sgdma_from_fft_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                          // avalon_st_adapter:out_0_data -> sgdma_from_fft_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                         // sgdma_from_fft_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                         // avalon_st_adapter:out_0_error -> sgdma_from_fft_csr_agent:rdata_fifo_sink_error
	wire          sgdma_to_fft_csr_agent_rdata_fifo_src_valid;                                           // sgdma_to_fft_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] sgdma_to_fft_csr_agent_rdata_fifo_src_data;                                            // sgdma_to_fft_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          sgdma_to_fft_csr_agent_rdata_fifo_src_ready;                                           // avalon_st_adapter_001:in_0_ready -> sgdma_to_fft_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                     // avalon_st_adapter_001:out_0_valid -> sgdma_to_fft_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                      // avalon_st_adapter_001:out_0_data -> sgdma_to_fft_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                     // sgdma_to_fft_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                     // avalon_st_adapter_001:out_0_error -> sgdma_to_fft_csr_agent:rdata_fifo_sink_error
	wire          sgdma_from_ram_csr_agent_rdata_fifo_src_valid;                                         // sgdma_from_ram_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] sgdma_from_ram_csr_agent_rdata_fifo_src_data;                                          // sgdma_from_ram_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          sgdma_from_ram_csr_agent_rdata_fifo_src_ready;                                         // avalon_st_adapter_002:in_0_ready -> sgdma_from_ram_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                     // avalon_st_adapter_002:out_0_valid -> sgdma_from_ram_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                      // avalon_st_adapter_002:out_0_data -> sgdma_from_ram_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                     // sgdma_from_ram_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                     // avalon_st_adapter_002:out_0_error -> sgdma_from_ram_csr_agent:rdata_fifo_sink_error
	wire          sgdma_from_fft_descriptor_slave_agent_rdata_fifo_out_valid;                            // sgdma_from_fft_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire  [129:0] sgdma_from_fft_descriptor_slave_agent_rdata_fifo_out_data;                             // sgdma_from_fft_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          sgdma_from_fft_descriptor_slave_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_003:in_0_ready -> sgdma_from_fft_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                     // avalon_st_adapter_003:out_0_valid -> sgdma_from_fft_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_003_out_0_data;                                                      // avalon_st_adapter_003:out_0_data -> sgdma_from_fft_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                     // sgdma_from_fft_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                     // avalon_st_adapter_003:out_0_error -> sgdma_from_fft_descriptor_slave_agent:rdata_fifo_sink_error
	wire          sgdma_to_fft_descriptor_slave_agent_rdata_fifo_out_valid;                              // sgdma_to_fft_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire  [129:0] sgdma_to_fft_descriptor_slave_agent_rdata_fifo_out_data;                               // sgdma_to_fft_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          sgdma_to_fft_descriptor_slave_agent_rdata_fifo_out_ready;                              // avalon_st_adapter_004:in_0_ready -> sgdma_to_fft_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                     // avalon_st_adapter_004:out_0_valid -> sgdma_to_fft_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_004_out_0_data;                                                      // avalon_st_adapter_004:out_0_data -> sgdma_to_fft_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                     // sgdma_to_fft_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                     // avalon_st_adapter_004:out_0_error -> sgdma_to_fft_descriptor_slave_agent:rdata_fifo_sink_error
	wire          sgdma_from_ram_descriptor_slave_agent_rdata_fifo_out_valid;                            // sgdma_from_ram_descriptor_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire  [129:0] sgdma_from_ram_descriptor_slave_agent_rdata_fifo_out_data;                             // sgdma_from_ram_descriptor_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          sgdma_from_ram_descriptor_slave_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_005:in_0_ready -> sgdma_from_ram_descriptor_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                     // avalon_st_adapter_005:out_0_valid -> sgdma_from_ram_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_005_out_0_data;                                                      // avalon_st_adapter_005:out_0_data -> sgdma_from_ram_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                     // sgdma_from_ram_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                     // avalon_st_adapter_005:out_0_error -> sgdma_from_ram_descriptor_slave_agent:rdata_fifo_sink_error
	wire          fft_stadapter_0_s0_agent_rdata_fifo_src_valid;                                         // FFT_STadapter_0_s0_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] fft_stadapter_0_s0_agent_rdata_fifo_src_data;                                          // FFT_STadapter_0_s0_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          fft_stadapter_0_s0_agent_rdata_fifo_src_ready;                                         // avalon_st_adapter_006:in_0_ready -> FFT_STadapter_0_s0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                     // avalon_st_adapter_006:out_0_valid -> FFT_STadapter_0_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                      // avalon_st_adapter_006:out_0_data -> FFT_STadapter_0_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                     // FFT_STadapter_0_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                     // avalon_st_adapter_006:out_0_error -> FFT_STadapter_0_s0_agent:rdata_fifo_sink_error
	wire          data_s1_agent_rdata_fifo_out_valid;                                                    // data_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [65:0] data_s1_agent_rdata_fifo_out_data;                                                     // data_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          data_s1_agent_rdata_fifo_out_ready;                                                    // avalon_st_adapter_007:in_0_ready -> data_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                     // avalon_st_adapter_007:out_0_valid -> data_s1_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_007_out_0_data;                                                      // avalon_st_adapter_007:out_0_data -> data_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                     // data_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                     // avalon_st_adapter_007:out_0_error -> data_s1_agent:rdata_fifo_sink_error
	wire          ddr_s0_agent_rdata_fifo_out_valid;                                                     // DDR_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [65:0] ddr_s0_agent_rdata_fifo_out_data;                                                      // DDR_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          ddr_s0_agent_rdata_fifo_out_ready;                                                     // avalon_st_adapter_008:in_0_ready -> DDR_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                     // avalon_st_adapter_008:out_0_valid -> DDR_s0_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_008_out_0_data;                                                      // avalon_st_adapter_008:out_0_data -> DDR_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                     // DDR_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                     // avalon_st_adapter_008:out_0_error -> DDR_s0_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (19),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (31),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_bridge_0_m0_translator (
		.clk                    (clk_0_clk_clk),                                                     //                       clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address            (mm_bridge_0_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (mm_bridge_0_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (mm_bridge_0_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (mm_bridge_0_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (mm_bridge_0_m0_byteenable),                                         //                          .byteenable
		.av_read                (mm_bridge_0_m0_read),                                               //                          .read
		.av_readdata            (mm_bridge_0_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (mm_bridge_0_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (mm_bridge_0_m0_write),                                              //                          .write
		.av_writedata           (mm_bridge_0_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (mm_bridge_0_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                              //               (terminated)
		.av_begintransfer       (1'b0),                                                              //               (terminated)
		.av_chipselect          (1'b0),                                                              //               (terminated)
		.av_lock                (1'b0),                                                              //               (terminated)
		.uav_clken              (),                                                                  //               (terminated)
		.av_clken               (1'b1),                                                              //               (terminated)
		.uav_response           (2'b00),                                                             //               (terminated)
		.av_response            (),                                                                  //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                              //               (terminated)
		.av_writeresponsevalid  ()                                                                   //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (31),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (7),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (31),
		.UAV_BURSTCOUNT_W            (9),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_to_fft_mm_read_translator (
		.clk                    (clk_0_clk_clk),                                                           //                       clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),                           //                     reset.reset
		.uav_address            (sgdma_to_fft_mm_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (sgdma_to_fft_mm_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (sgdma_to_fft_mm_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (sgdma_to_fft_mm_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (sgdma_to_fft_mm_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (sgdma_to_fft_mm_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (sgdma_to_fft_mm_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (sgdma_to_fft_mm_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (sgdma_to_fft_mm_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (sgdma_to_fft_mm_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (sgdma_to_fft_mm_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (sgdma_to_fft_mm_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (sgdma_to_fft_mm_read_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (sgdma_to_fft_mm_read_burstcount),                                         //                          .burstcount
		.av_byteenable          (sgdma_to_fft_mm_read_byteenable),                                         //                          .byteenable
		.av_read                (sgdma_to_fft_mm_read_read),                                               //                          .read
		.av_readdata            (sgdma_to_fft_mm_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (sgdma_to_fft_mm_read_readdatavalid),                                      //                          .readdatavalid
		.av_beginbursttransfer  (1'b0),                                                                    //               (terminated)
		.av_begintransfer       (1'b0),                                                                    //               (terminated)
		.av_chipselect          (1'b0),                                                                    //               (terminated)
		.av_write               (1'b0),                                                                    //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                    //               (terminated)
		.av_lock                (1'b0),                                                                    //               (terminated)
		.av_debugaccess         (1'b0),                                                                    //               (terminated)
		.uav_clken              (),                                                                        //               (terminated)
		.av_clken               (1'b1),                                                                    //               (terminated)
		.uav_response           (2'b00),                                                                   //               (terminated)
		.av_response            (),                                                                        //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                    //               (terminated)
		.av_writeresponsevalid  ()                                                                         //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (19),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (6),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (31),
		.UAV_BURSTCOUNT_W            (9),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_from_ram_mm_read_translator (
		.clk                    (clk_0_clk_clk),                                                             //                       clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),                             //                     reset.reset
		.uav_address            (sgdma_from_ram_mm_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (sgdma_from_ram_mm_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (sgdma_from_ram_mm_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (sgdma_from_ram_mm_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (sgdma_from_ram_mm_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (sgdma_from_ram_mm_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (sgdma_from_ram_mm_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (sgdma_from_ram_mm_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (sgdma_from_ram_mm_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (sgdma_from_ram_mm_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (sgdma_from_ram_mm_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (sgdma_from_ram_mm_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (sgdma_from_ram_mm_read_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (sgdma_from_ram_mm_read_burstcount),                                         //                          .burstcount
		.av_byteenable          (sgdma_from_ram_mm_read_byteenable),                                         //                          .byteenable
		.av_read                (sgdma_from_ram_mm_read_read),                                               //                          .read
		.av_readdata            (sgdma_from_ram_mm_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (sgdma_from_ram_mm_read_readdatavalid),                                      //                          .readdatavalid
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_write               (1'b0),                                                                      //               (terminated)
		.av_writedata           (64'b0000000000000000000000000000000000000000000000000000000000000000),      //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (31),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (6),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (31),
		.UAV_BURSTCOUNT_W            (9),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_from_fft_mm_write_translator (
		.clk                    (clk_0_clk_clk),                                                              //                       clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (sgdma_from_fft_mm_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (sgdma_from_fft_mm_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (sgdma_from_fft_mm_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (sgdma_from_fft_mm_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (sgdma_from_fft_mm_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (sgdma_from_fft_mm_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (sgdma_from_fft_mm_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (sgdma_from_fft_mm_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (sgdma_from_fft_mm_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (sgdma_from_fft_mm_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (sgdma_from_fft_mm_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (sgdma_from_fft_mm_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (sgdma_from_fft_mm_write_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (sgdma_from_fft_mm_write_burstcount),                                         //                          .burstcount
		.av_byteenable          (sgdma_from_fft_mm_write_byteenable),                                         //                          .byteenable
		.av_write               (sgdma_from_fft_mm_write_write),                                              //                          .write
		.av_writedata           (sgdma_from_fft_mm_write_writedata),                                          //                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                       //               (terminated)
		.av_begintransfer       (1'b0),                                                                       //               (terminated)
		.av_chipselect          (1'b0),                                                                       //               (terminated)
		.av_read                (1'b0),                                                                       //               (terminated)
		.av_readdata            (),                                                                           //               (terminated)
		.av_readdatavalid       (),                                                                           //               (terminated)
		.av_lock                (1'b0),                                                                       //               (terminated)
		.av_debugaccess         (1'b0),                                                                       //               (terminated)
		.uav_clken              (),                                                                           //               (terminated)
		.av_clken               (1'b1),                                                                       //               (terminated)
		.uav_response           (2'b00),                                                                      //               (terminated)
		.av_response            (),                                                                           //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                       //               (terminated)
		.av_writeresponsevalid  ()                                                                            //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (31),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (6),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (31),
		.UAV_BURSTCOUNT_W            (9),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_from_ram_mm_write_translator (
		.clk                    (clk_0_clk_clk),                                                              //                       clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (sgdma_from_ram_mm_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (sgdma_from_ram_mm_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (sgdma_from_ram_mm_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (sgdma_from_ram_mm_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (sgdma_from_ram_mm_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (sgdma_from_ram_mm_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (sgdma_from_ram_mm_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (sgdma_from_ram_mm_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (sgdma_from_ram_mm_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (sgdma_from_ram_mm_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (sgdma_from_ram_mm_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (sgdma_from_ram_mm_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (sgdma_from_ram_mm_write_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (sgdma_from_ram_mm_write_burstcount),                                         //                          .burstcount
		.av_byteenable          (sgdma_from_ram_mm_write_byteenable),                                         //                          .byteenable
		.av_write               (sgdma_from_ram_mm_write_write),                                              //                          .write
		.av_writedata           (sgdma_from_ram_mm_write_writedata),                                          //                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                       //               (terminated)
		.av_begintransfer       (1'b0),                                                                       //               (terminated)
		.av_chipselect          (1'b0),                                                                       //               (terminated)
		.av_read                (1'b0),                                                                       //               (terminated)
		.av_readdata            (),                                                                           //               (terminated)
		.av_readdatavalid       (),                                                                           //               (terminated)
		.av_lock                (1'b0),                                                                       //               (terminated)
		.av_debugaccess         (1'b0),                                                                       //               (terminated)
		.uav_clken              (),                                                                           //               (terminated)
		.av_clken               (1'b1),                                                                       //               (terminated)
		.uav_response           (2'b00),                                                                      //               (terminated)
		.av_response            (),                                                                           //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                       //               (terminated)
		.av_writeresponsevalid  ()                                                                            //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (31),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sgdma_from_fft_csr_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sgdma_from_fft_csr_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (sgdma_from_fft_csr_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (sgdma_from_fft_csr_agent_m0_read),              //                         .read
		.uav_write              (sgdma_from_fft_csr_agent_m0_write),             //                         .write
		.uav_waitrequest        (sgdma_from_fft_csr_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (sgdma_from_fft_csr_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (sgdma_from_fft_csr_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (sgdma_from_fft_csr_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (sgdma_from_fft_csr_agent_m0_writedata),         //                         .writedata
		.uav_lock               (sgdma_from_fft_csr_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (sgdma_from_fft_csr_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (sgdma_from_fft_csr_address),                    //      avalon_anti_slave_0.address
		.av_write               (sgdma_from_fft_csr_write),                      //                         .write
		.av_read                (sgdma_from_fft_csr_read),                       //                         .read
		.av_readdata            (sgdma_from_fft_csr_readdata),                   //                         .readdata
		.av_writedata           (sgdma_from_fft_csr_writedata),                  //                         .writedata
		.av_byteenable          (sgdma_from_fft_csr_byteenable),                 //                         .byteenable
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (31),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sgdma_to_fft_csr_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sgdma_to_fft_csr_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (sgdma_to_fft_csr_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (sgdma_to_fft_csr_agent_m0_read),                //                         .read
		.uav_write              (sgdma_to_fft_csr_agent_m0_write),               //                         .write
		.uav_waitrequest        (sgdma_to_fft_csr_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (sgdma_to_fft_csr_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (sgdma_to_fft_csr_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (sgdma_to_fft_csr_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (sgdma_to_fft_csr_agent_m0_writedata),           //                         .writedata
		.uav_lock               (sgdma_to_fft_csr_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (sgdma_to_fft_csr_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (sgdma_to_fft_csr_address),                      //      avalon_anti_slave_0.address
		.av_write               (sgdma_to_fft_csr_write),                        //                         .write
		.av_read                (sgdma_to_fft_csr_read),                         //                         .read
		.av_readdata            (sgdma_to_fft_csr_readdata),                     //                         .readdata
		.av_writedata           (sgdma_to_fft_csr_writedata),                    //                         .writedata
		.av_byteenable          (sgdma_to_fft_csr_byteenable),                   //                         .byteenable
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (31),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sgdma_from_ram_csr_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sgdma_from_ram_csr_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (sgdma_from_ram_csr_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (sgdma_from_ram_csr_agent_m0_read),              //                         .read
		.uav_write              (sgdma_from_ram_csr_agent_m0_write),             //                         .write
		.uav_waitrequest        (sgdma_from_ram_csr_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (sgdma_from_ram_csr_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (sgdma_from_ram_csr_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (sgdma_from_ram_csr_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (sgdma_from_ram_csr_agent_m0_writedata),         //                         .writedata
		.uav_lock               (sgdma_from_ram_csr_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (sgdma_from_ram_csr_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (sgdma_from_ram_csr_address),                    //      avalon_anti_slave_0.address
		.av_write               (sgdma_from_ram_csr_write),                      //                         .write
		.av_read                (sgdma_from_ram_csr_read),                       //                         .read
		.av_readdata            (sgdma_from_ram_csr_readdata),                   //                         .readdata
		.av_writedata           (sgdma_from_ram_csr_writedata),                  //                         .writedata
		.av_byteenable          (sgdma_from_ram_csr_byteenable),                 //                         .byteenable
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (31),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sgdma_from_fft_descriptor_slave_translator (
		.clk                    (clk_0_clk_clk),                                                                                                                         //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                                                                         //                    reset.reset
		.uav_address            (sgdma_from_fft_descriptor_slave_agent_m0_address),                                                                                      // avalon_universal_slave_0.address
		.uav_burstcount         (sgdma_from_fft_descriptor_slave_agent_m0_burstcount),                                                                                   //                         .burstcount
		.uav_read               (sgdma_from_fft_descriptor_slave_agent_m0_read),                                                                                         //                         .read
		.uav_write              (sgdma_from_fft_descriptor_slave_agent_m0_write),                                                                                        //                         .write
		.uav_waitrequest        (sgdma_from_fft_descriptor_slave_agent_m0_waitrequest),                                                                                  //                         .waitrequest
		.uav_readdatavalid      (sgdma_from_fft_descriptor_slave_agent_m0_readdatavalid),                                                                                //                         .readdatavalid
		.uav_byteenable         (sgdma_from_fft_descriptor_slave_agent_m0_byteenable),                                                                                   //                         .byteenable
		.uav_readdata           (sgdma_from_fft_descriptor_slave_agent_m0_readdata),                                                                                     //                         .readdata
		.uav_writedata          (sgdma_from_fft_descriptor_slave_agent_m0_writedata),                                                                                    //                         .writedata
		.uav_lock               (sgdma_from_fft_descriptor_slave_agent_m0_lock),                                                                                         //                         .lock
		.uav_debugaccess        (sgdma_from_fft_descriptor_slave_agent_m0_debugaccess),                                                                                  //                         .debugaccess
		.av_write               (sgdma_from_fft_descriptor_slave_write),                                                                                                 //      avalon_anti_slave_0.write
		.av_writedata           (sgdma_from_fft_descriptor_slave_writedata),                                                                                             //                         .writedata
		.av_byteenable          (sgdma_from_fft_descriptor_slave_byteenable),                                                                                            //                         .byteenable
		.av_waitrequest         (sgdma_from_fft_descriptor_slave_waitrequest),                                                                                           //                         .waitrequest
		.av_address             (),                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                      //              (terminated)
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (31),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sgdma_to_fft_descriptor_slave_translator (
		.clk                    (clk_0_clk_clk),                                                                                                                         //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                                                                         //                    reset.reset
		.uav_address            (sgdma_to_fft_descriptor_slave_agent_m0_address),                                                                                        // avalon_universal_slave_0.address
		.uav_burstcount         (sgdma_to_fft_descriptor_slave_agent_m0_burstcount),                                                                                     //                         .burstcount
		.uav_read               (sgdma_to_fft_descriptor_slave_agent_m0_read),                                                                                           //                         .read
		.uav_write              (sgdma_to_fft_descriptor_slave_agent_m0_write),                                                                                          //                         .write
		.uav_waitrequest        (sgdma_to_fft_descriptor_slave_agent_m0_waitrequest),                                                                                    //                         .waitrequest
		.uav_readdatavalid      (sgdma_to_fft_descriptor_slave_agent_m0_readdatavalid),                                                                                  //                         .readdatavalid
		.uav_byteenable         (sgdma_to_fft_descriptor_slave_agent_m0_byteenable),                                                                                     //                         .byteenable
		.uav_readdata           (sgdma_to_fft_descriptor_slave_agent_m0_readdata),                                                                                       //                         .readdata
		.uav_writedata          (sgdma_to_fft_descriptor_slave_agent_m0_writedata),                                                                                      //                         .writedata
		.uav_lock               (sgdma_to_fft_descriptor_slave_agent_m0_lock),                                                                                           //                         .lock
		.uav_debugaccess        (sgdma_to_fft_descriptor_slave_agent_m0_debugaccess),                                                                                    //                         .debugaccess
		.av_write               (sgdma_to_fft_descriptor_slave_write),                                                                                                   //      avalon_anti_slave_0.write
		.av_writedata           (sgdma_to_fft_descriptor_slave_writedata),                                                                                               //                         .writedata
		.av_byteenable          (sgdma_to_fft_descriptor_slave_byteenable),                                                                                              //                         .byteenable
		.av_waitrequest         (sgdma_to_fft_descriptor_slave_waitrequest),                                                                                             //                         .waitrequest
		.av_address             (),                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                      //              (terminated)
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (31),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sgdma_from_ram_descriptor_slave_translator (
		.clk                    (clk_0_clk_clk),                                                                                                                         //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                                                                         //                    reset.reset
		.uav_address            (sgdma_from_ram_descriptor_slave_agent_m0_address),                                                                                      // avalon_universal_slave_0.address
		.uav_burstcount         (sgdma_from_ram_descriptor_slave_agent_m0_burstcount),                                                                                   //                         .burstcount
		.uav_read               (sgdma_from_ram_descriptor_slave_agent_m0_read),                                                                                         //                         .read
		.uav_write              (sgdma_from_ram_descriptor_slave_agent_m0_write),                                                                                        //                         .write
		.uav_waitrequest        (sgdma_from_ram_descriptor_slave_agent_m0_waitrequest),                                                                                  //                         .waitrequest
		.uav_readdatavalid      (sgdma_from_ram_descriptor_slave_agent_m0_readdatavalid),                                                                                //                         .readdatavalid
		.uav_byteenable         (sgdma_from_ram_descriptor_slave_agent_m0_byteenable),                                                                                   //                         .byteenable
		.uav_readdata           (sgdma_from_ram_descriptor_slave_agent_m0_readdata),                                                                                     //                         .readdata
		.uav_writedata          (sgdma_from_ram_descriptor_slave_agent_m0_writedata),                                                                                    //                         .writedata
		.uav_lock               (sgdma_from_ram_descriptor_slave_agent_m0_lock),                                                                                         //                         .lock
		.uav_debugaccess        (sgdma_from_ram_descriptor_slave_agent_m0_debugaccess),                                                                                  //                         .debugaccess
		.av_write               (sgdma_from_ram_descriptor_slave_write),                                                                                                 //      avalon_anti_slave_0.write
		.av_writedata           (sgdma_from_ram_descriptor_slave_writedata),                                                                                             //                         .writedata
		.av_byteenable          (sgdma_from_ram_descriptor_slave_byteenable),                                                                                            //                         .byteenable
		.av_waitrequest         (sgdma_from_ram_descriptor_slave_waitrequest),                                                                                           //                         .waitrequest
		.av_address             (),                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                      //              (terminated)
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (31),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fft_stadapter_0_s0_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (fft_stadapter_0_s0_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (fft_stadapter_0_s0_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (fft_stadapter_0_s0_agent_m0_read),              //                         .read
		.uav_write              (fft_stadapter_0_s0_agent_m0_write),             //                         .write
		.uav_waitrequest        (fft_stadapter_0_s0_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (fft_stadapter_0_s0_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (fft_stadapter_0_s0_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (fft_stadapter_0_s0_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (fft_stadapter_0_s0_agent_m0_writedata),         //                         .writedata
		.uav_lock               (fft_stadapter_0_s0_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (fft_stadapter_0_s0_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (FFT_STadapter_0_s0_address),                    //      avalon_anti_slave_0.address
		.av_write               (FFT_STadapter_0_s0_write),                      //                         .write
		.av_read                (FFT_STadapter_0_s0_read),                       //                         .read
		.av_readdata            (FFT_STadapter_0_s0_readdata),                   //                         .readdata
		.av_writedata           (FFT_STadapter_0_s0_writedata),                  //                         .writedata
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (31),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) data_s1_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (data_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (data_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (data_s1_agent_m0_read),                         //                         .read
		.uav_write              (data_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (data_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (data_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (data_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (data_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (data_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (data_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (data_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (data_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (data_s1_write),                                 //                         .write
		.av_readdata            (data_s1_readdata),                              //                         .readdata
		.av_writedata           (data_s1_writedata),                             //                         .writedata
		.av_byteenable          (data_s1_byteenable),                            //                         .byteenable
		.av_chipselect          (data_s1_chipselect),                            //                         .chipselect
		.av_clken               (data_s1_clken),                                 //                         .clken
		.av_read                (),                                              //              (terminated)
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (30),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (6),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (31),
		.UAV_BURSTCOUNT_W               (9),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ddr_s0_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ddr_s0_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (ddr_s0_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (ddr_s0_agent_m0_read),                          //                         .read
		.uav_write              (ddr_s0_agent_m0_write),                         //                         .write
		.uav_waitrequest        (ddr_s0_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (ddr_s0_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (ddr_s0_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (ddr_s0_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (ddr_s0_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (ddr_s0_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (ddr_s0_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (DDR_s0_address),                                //      avalon_anti_slave_0.address
		.av_write               (DDR_s0_write),                                  //                         .write
		.av_read                (DDR_s0_read),                                   //                         .read
		.av_readdata            (DDR_s0_readdata),                               //                         .readdata
		.av_writedata           (DDR_s0_writedata),                              //                         .writedata
		.av_burstcount          (DDR_s0_burstcount),                             //                         .burstcount
		.av_byteenable          (DDR_s0_byteenable),                             //                         .byteenable
		.av_readdatavalid       (DDR_s0_readdatavalid),                          //                         .readdatavalid
		.av_waitrequest         (DDR_s0_waitrequest),                            //                         .waitrequest
		.av_debugaccess         (DDR_s0_debugaccess),                            //                         .debugaccess
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_QOS_H                 (91),
		.PKT_QOS_L                 (91),
		.PKT_DATA_SIDEBAND_H       (89),
		.PKT_DATA_SIDEBAND_L       (89),
		.PKT_ADDR_SIDEBAND_H       (88),
		.PKT_ADDR_SIDEBAND_L       (88),
		.PKT_BURST_TYPE_H          (87),
		.PKT_BURST_TYPE_L          (86),
		.PKT_CACHE_H               (107),
		.PKT_CACHE_L               (104),
		.PKT_THREAD_ID_H           (100),
		.PKT_THREAD_ID_L           (100),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_EXCLUSIVE       (72),
		.PKT_TRANS_LOCK            (71),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (73),
		.PKT_ADDR_H                (66),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (67),
		.PKT_TRANS_POSTED          (68),
		.PKT_TRANS_WRITE           (69),
		.PKT_TRANS_READ            (70),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (96),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (9),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_0_m0_agent (
		.clk                   (clk_0_clk_clk),                                                     //       clk.clk
		.reset                 (mm_bridge_0_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.av_address            (mm_bridge_0_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (mm_bridge_0_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (mm_bridge_0_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (mm_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (mm_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (mm_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (mm_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (mm_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (mm_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (mm_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (mm_bridge_0_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (mm_bridge_0_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (mm_bridge_0_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (mm_bridge_0_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (mm_bridge_0_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (mm_bridge_0_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (mm_bridge_0_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (mm_bridge_0_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (mm_bridge_0_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (mm_bridge_0_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (mm_bridge_0_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (mm_bridge_0_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                  // (terminated)
		.av_writeresponsevalid ()                                                                   // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_QOS_H                 (91),
		.PKT_QOS_L                 (91),
		.PKT_DATA_SIDEBAND_H       (89),
		.PKT_DATA_SIDEBAND_L       (89),
		.PKT_ADDR_SIDEBAND_H       (88),
		.PKT_ADDR_SIDEBAND_L       (88),
		.PKT_BURST_TYPE_H          (87),
		.PKT_BURST_TYPE_L          (86),
		.PKT_CACHE_H               (107),
		.PKT_CACHE_L               (104),
		.PKT_THREAD_ID_H           (100),
		.PKT_THREAD_ID_L           (100),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_EXCLUSIVE       (72),
		.PKT_TRANS_LOCK            (71),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (73),
		.PKT_ADDR_H                (66),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (67),
		.PKT_TRANS_POSTED          (68),
		.PKT_TRANS_WRITE           (69),
		.PKT_TRANS_READ            (70),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (96),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (9),
		.AV_BURSTCOUNT_W           (9),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (4),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_to_fft_mm_read_agent (
		.clk                   (clk_0_clk_clk),                                                           //       clk.clk
		.reset                 (mm_bridge_0_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.av_address            (sgdma_to_fft_mm_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (sgdma_to_fft_mm_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (sgdma_to_fft_mm_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (sgdma_to_fft_mm_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (sgdma_to_fft_mm_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (sgdma_to_fft_mm_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (sgdma_to_fft_mm_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (sgdma_to_fft_mm_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (sgdma_to_fft_mm_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (sgdma_to_fft_mm_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (sgdma_to_fft_mm_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (sgdma_to_fft_mm_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (sgdma_to_fft_mm_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (sgdma_to_fft_mm_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (sgdma_to_fft_mm_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (sgdma_to_fft_mm_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (sgdma_to_fft_mm_read_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (sgdma_to_fft_mm_read_limiter_rsp_src_data),                               //          .data
		.rp_channel            (sgdma_to_fft_mm_read_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (sgdma_to_fft_mm_read_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (sgdma_to_fft_mm_read_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (sgdma_to_fft_mm_read_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                        // (terminated)
		.av_writeresponsevalid ()                                                                         // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (148),
		.PKT_ORI_BURST_SIZE_L      (146),
		.PKT_RESPONSE_STATUS_H     (145),
		.PKT_RESPONSE_STATUS_L     (144),
		.PKT_QOS_H                 (127),
		.PKT_QOS_L                 (127),
		.PKT_DATA_SIDEBAND_H       (125),
		.PKT_DATA_SIDEBAND_L       (125),
		.PKT_ADDR_SIDEBAND_H       (124),
		.PKT_ADDR_SIDEBAND_L       (124),
		.PKT_BURST_TYPE_H          (123),
		.PKT_BURST_TYPE_L          (122),
		.PKT_CACHE_H               (143),
		.PKT_CACHE_L               (140),
		.PKT_THREAD_ID_H           (136),
		.PKT_THREAD_ID_L           (136),
		.PKT_BURST_SIZE_H          (121),
		.PKT_BURST_SIZE_L          (119),
		.PKT_TRANS_EXCLUSIVE       (108),
		.PKT_TRANS_LOCK            (107),
		.PKT_BEGIN_BURST           (126),
		.PKT_PROTECTION_H          (139),
		.PKT_PROTECTION_L          (137),
		.PKT_BURSTWRAP_H           (118),
		.PKT_BURSTWRAP_L           (118),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (109),
		.PKT_ADDR_H                (102),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (103),
		.PKT_TRANS_POSTED          (104),
		.PKT_TRANS_WRITE           (105),
		.PKT_TRANS_READ            (106),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (131),
		.PKT_SRC_ID_L              (128),
		.PKT_DEST_ID_H             (135),
		.PKT_DEST_ID_L             (132),
		.ST_DATA_W                 (149),
		.ST_CHANNEL_W              (9),
		.AV_BURSTCOUNT_W           (9),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (2),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_from_ram_mm_read_agent (
		.clk                   (clk_0_clk_clk),                                                             //       clk.clk
		.reset                 (mm_bridge_0_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.av_address            (sgdma_from_ram_mm_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (sgdma_from_ram_mm_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (sgdma_from_ram_mm_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (sgdma_from_ram_mm_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (sgdma_from_ram_mm_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (sgdma_from_ram_mm_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (sgdma_from_ram_mm_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (sgdma_from_ram_mm_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (sgdma_from_ram_mm_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (sgdma_from_ram_mm_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (sgdma_from_ram_mm_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (sgdma_from_ram_mm_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (sgdma_from_ram_mm_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (sgdma_from_ram_mm_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (sgdma_from_ram_mm_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (sgdma_from_ram_mm_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                                     //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                                      //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                                   //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                             //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                               //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                                     //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (148),
		.PKT_ORI_BURST_SIZE_L      (146),
		.PKT_RESPONSE_STATUS_H     (145),
		.PKT_RESPONSE_STATUS_L     (144),
		.PKT_QOS_H                 (127),
		.PKT_QOS_L                 (127),
		.PKT_DATA_SIDEBAND_H       (125),
		.PKT_DATA_SIDEBAND_L       (125),
		.PKT_ADDR_SIDEBAND_H       (124),
		.PKT_ADDR_SIDEBAND_L       (124),
		.PKT_BURST_TYPE_H          (123),
		.PKT_BURST_TYPE_L          (122),
		.PKT_CACHE_H               (143),
		.PKT_CACHE_L               (140),
		.PKT_THREAD_ID_H           (136),
		.PKT_THREAD_ID_L           (136),
		.PKT_BURST_SIZE_H          (121),
		.PKT_BURST_SIZE_L          (119),
		.PKT_TRANS_EXCLUSIVE       (108),
		.PKT_TRANS_LOCK            (107),
		.PKT_BEGIN_BURST           (126),
		.PKT_PROTECTION_H          (139),
		.PKT_PROTECTION_L          (137),
		.PKT_BURSTWRAP_H           (118),
		.PKT_BURSTWRAP_L           (118),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (109),
		.PKT_ADDR_H                (102),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (103),
		.PKT_TRANS_POSTED          (104),
		.PKT_TRANS_WRITE           (105),
		.PKT_TRANS_READ            (106),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (131),
		.PKT_SRC_ID_L              (128),
		.PKT_DEST_ID_H             (135),
		.PKT_DEST_ID_L             (132),
		.ST_DATA_W                 (149),
		.ST_CHANNEL_W              (9),
		.AV_BURSTCOUNT_W           (9),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_from_fft_mm_write_agent (
		.clk                   (clk_0_clk_clk),                                                              //       clk.clk
		.reset                 (mm_bridge_0_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (sgdma_from_fft_mm_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (sgdma_from_fft_mm_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (sgdma_from_fft_mm_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (sgdma_from_fft_mm_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (sgdma_from_fft_mm_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (sgdma_from_fft_mm_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (sgdma_from_fft_mm_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (sgdma_from_fft_mm_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (sgdma_from_fft_mm_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (sgdma_from_fft_mm_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (sgdma_from_fft_mm_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (sgdma_from_fft_mm_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (sgdma_from_fft_mm_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (sgdma_from_fft_mm_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (sgdma_from_fft_mm_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (sgdma_from_fft_mm_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_003_src_valid),                                                      //        rp.valid
		.rp_data               (rsp_mux_003_src_data),                                                       //          .data
		.rp_channel            (rsp_mux_003_src_channel),                                                    //          .channel
		.rp_startofpacket      (rsp_mux_003_src_startofpacket),                                              //          .startofpacket
		.rp_endofpacket        (rsp_mux_003_src_endofpacket),                                                //          .endofpacket
		.rp_ready              (rsp_mux_003_src_ready),                                                      //          .ready
		.av_response           (),                                                                           // (terminated)
		.av_writeresponsevalid ()                                                                            // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (148),
		.PKT_ORI_BURST_SIZE_L      (146),
		.PKT_RESPONSE_STATUS_H     (145),
		.PKT_RESPONSE_STATUS_L     (144),
		.PKT_QOS_H                 (127),
		.PKT_QOS_L                 (127),
		.PKT_DATA_SIDEBAND_H       (125),
		.PKT_DATA_SIDEBAND_L       (125),
		.PKT_ADDR_SIDEBAND_H       (124),
		.PKT_ADDR_SIDEBAND_L       (124),
		.PKT_BURST_TYPE_H          (123),
		.PKT_BURST_TYPE_L          (122),
		.PKT_CACHE_H               (143),
		.PKT_CACHE_L               (140),
		.PKT_THREAD_ID_H           (136),
		.PKT_THREAD_ID_L           (136),
		.PKT_BURST_SIZE_H          (121),
		.PKT_BURST_SIZE_L          (119),
		.PKT_TRANS_EXCLUSIVE       (108),
		.PKT_TRANS_LOCK            (107),
		.PKT_BEGIN_BURST           (126),
		.PKT_PROTECTION_H          (139),
		.PKT_PROTECTION_L          (137),
		.PKT_BURSTWRAP_H           (118),
		.PKT_BURSTWRAP_L           (118),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (109),
		.PKT_ADDR_H                (102),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (103),
		.PKT_TRANS_POSTED          (104),
		.PKT_TRANS_WRITE           (105),
		.PKT_TRANS_READ            (106),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (131),
		.PKT_SRC_ID_L              (128),
		.PKT_DEST_ID_H             (135),
		.PKT_DEST_ID_L             (132),
		.ST_DATA_W                 (149),
		.ST_CHANNEL_W              (9),
		.AV_BURSTCOUNT_W           (9),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (3),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_from_ram_mm_write_agent (
		.clk                   (clk_0_clk_clk),                                                              //       clk.clk
		.reset                 (mm_bridge_0_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (sgdma_from_ram_mm_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (sgdma_from_ram_mm_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (sgdma_from_ram_mm_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (sgdma_from_ram_mm_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (sgdma_from_ram_mm_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (sgdma_from_ram_mm_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (sgdma_from_ram_mm_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (sgdma_from_ram_mm_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (sgdma_from_ram_mm_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (sgdma_from_ram_mm_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (sgdma_from_ram_mm_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (sgdma_from_ram_mm_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (sgdma_from_ram_mm_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (sgdma_from_ram_mm_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (sgdma_from_ram_mm_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (sgdma_from_ram_mm_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_004_src_valid),                                                      //        rp.valid
		.rp_data               (rsp_mux_004_src_data),                                                       //          .data
		.rp_channel            (rsp_mux_004_src_channel),                                                    //          .channel
		.rp_startofpacket      (rsp_mux_004_src_startofpacket),                                              //          .startofpacket
		.rp_endofpacket        (rsp_mux_004_src_endofpacket),                                                //          .endofpacket
		.rp_ready              (rsp_mux_004_src_ready),                                                      //          .ready
		.av_response           (),                                                                           // (terminated)
		.av_writeresponsevalid ()                                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_LOCK            (71),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (73),
		.PKT_ADDR_H                (66),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (67),
		.PKT_TRANS_POSTED          (68),
		.PKT_TRANS_WRITE           (69),
		.PKT_TRANS_READ            (70),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (113),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sgdma_from_fft_csr_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (sgdma_from_fft_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sgdma_from_fft_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sgdma_from_fft_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sgdma_from_fft_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sgdma_from_fft_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (sgdma_from_fft_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sgdma_from_fft_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sgdma_from_fft_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (sgdma_from_fft_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sgdma_from_fft_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (sgdma_from_fft_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (sgdma_from_fft_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sgdma_from_fft_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (sgdma_from_fft_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (sgdma_from_fft_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (sgdma_from_fft_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                 //                .channel
		.rf_sink_ready           (sgdma_from_fft_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sgdma_from_fft_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sgdma_from_fft_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sgdma_from_fft_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sgdma_from_fft_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sgdma_from_fft_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sgdma_from_fft_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sgdma_from_fft_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sgdma_from_fft_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sgdma_from_fft_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (sgdma_from_fft_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sgdma_from_fft_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sgdma_from_fft_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (114),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sgdma_from_fft_csr_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (sgdma_from_fft_csr_agent_rf_source_data),             //        in.data
		.in_valid          (sgdma_from_fft_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (sgdma_from_fft_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sgdma_from_fft_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sgdma_from_fft_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sgdma_from_fft_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sgdma_from_fft_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sgdma_from_fft_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sgdma_from_fft_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sgdma_from_fft_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_LOCK            (71),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (73),
		.PKT_ADDR_H                (66),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (67),
		.PKT_TRANS_POSTED          (68),
		.PKT_TRANS_WRITE           (69),
		.PKT_TRANS_READ            (70),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (113),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sgdma_to_fft_csr_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (sgdma_to_fft_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sgdma_to_fft_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sgdma_to_fft_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sgdma_to_fft_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sgdma_to_fft_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (sgdma_to_fft_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sgdma_to_fft_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sgdma_to_fft_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (sgdma_to_fft_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sgdma_to_fft_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (sgdma_to_fft_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (sgdma_to_fft_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sgdma_to_fft_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (sgdma_to_fft_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (sgdma_to_fft_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (sgdma_to_fft_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_001_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                           //                .channel
		.rf_sink_ready           (sgdma_to_fft_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sgdma_to_fft_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sgdma_to_fft_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sgdma_to_fft_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sgdma_to_fft_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sgdma_to_fft_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sgdma_to_fft_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sgdma_to_fft_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sgdma_to_fft_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sgdma_to_fft_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (sgdma_to_fft_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sgdma_to_fft_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sgdma_to_fft_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (114),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sgdma_to_fft_csr_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (sgdma_to_fft_csr_agent_rf_source_data),             //        in.data
		.in_valid          (sgdma_to_fft_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (sgdma_to_fft_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sgdma_to_fft_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sgdma_to_fft_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sgdma_to_fft_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sgdma_to_fft_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sgdma_to_fft_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sgdma_to_fft_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sgdma_to_fft_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_LOCK            (71),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (73),
		.PKT_ADDR_H                (66),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (67),
		.PKT_TRANS_POSTED          (68),
		.PKT_TRANS_WRITE           (69),
		.PKT_TRANS_READ            (70),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (113),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sgdma_from_ram_csr_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (sgdma_from_ram_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sgdma_from_ram_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sgdma_from_ram_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sgdma_from_ram_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sgdma_from_ram_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (sgdma_from_ram_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sgdma_from_ram_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sgdma_from_ram_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (sgdma_from_ram_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sgdma_from_ram_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (sgdma_from_ram_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (sgdma_from_ram_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sgdma_from_ram_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (sgdma_from_ram_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (sgdma_from_ram_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (sgdma_from_ram_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                             //                .channel
		.rf_sink_ready           (sgdma_from_ram_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sgdma_from_ram_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sgdma_from_ram_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sgdma_from_ram_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sgdma_from_ram_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sgdma_from_ram_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sgdma_from_ram_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sgdma_from_ram_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sgdma_from_ram_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sgdma_from_ram_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (sgdma_from_ram_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sgdma_from_ram_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sgdma_from_ram_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (114),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sgdma_from_ram_csr_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (sgdma_from_ram_csr_agent_rf_source_data),             //        in.data
		.in_valid          (sgdma_from_ram_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (sgdma_from_ram_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sgdma_from_ram_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sgdma_from_ram_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sgdma_from_ram_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sgdma_from_ram_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sgdma_from_ram_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sgdma_from_ram_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sgdma_from_ram_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (220),
		.PKT_ORI_BURST_SIZE_L      (218),
		.PKT_RESPONSE_STATUS_H     (217),
		.PKT_RESPONSE_STATUS_L     (216),
		.PKT_BURST_SIZE_H          (193),
		.PKT_BURST_SIZE_L          (191),
		.PKT_TRANS_LOCK            (179),
		.PKT_BEGIN_BURST           (198),
		.PKT_PROTECTION_H          (211),
		.PKT_PROTECTION_L          (209),
		.PKT_BURSTWRAP_H           (190),
		.PKT_BURSTWRAP_L           (190),
		.PKT_BYTE_CNT_H            (189),
		.PKT_BYTE_CNT_L            (181),
		.PKT_ADDR_H                (174),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (175),
		.PKT_TRANS_POSTED          (176),
		.PKT_TRANS_WRITE           (177),
		.PKT_TRANS_READ            (178),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (203),
		.PKT_SRC_ID_L              (200),
		.PKT_DEST_ID_H             (207),
		.PKT_DEST_ID_L             (204),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (221),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sgdma_from_fft_descriptor_slave_agent (
		.clk                     (clk_0_clk_clk),                                                    //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (sgdma_from_fft_descriptor_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sgdma_from_fft_descriptor_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sgdma_from_fft_descriptor_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sgdma_from_fft_descriptor_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sgdma_from_fft_descriptor_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sgdma_from_fft_descriptor_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sgdma_from_fft_descriptor_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sgdma_from_fft_descriptor_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sgdma_from_fft_descriptor_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sgdma_from_fft_descriptor_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sgdma_from_fft_descriptor_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sgdma_from_fft_descriptor_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sgdma_from_fft_descriptor_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sgdma_from_fft_descriptor_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sgdma_from_fft_descriptor_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sgdma_from_fft_descriptor_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                          //                .channel
		.rf_sink_ready           (sgdma_from_fft_descriptor_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sgdma_from_fft_descriptor_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sgdma_from_fft_descriptor_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sgdma_from_fft_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sgdma_from_fft_descriptor_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sgdma_from_fft_descriptor_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sgdma_from_fft_descriptor_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sgdma_from_fft_descriptor_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sgdma_from_fft_descriptor_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sgdma_from_fft_descriptor_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (sgdma_from_fft_descriptor_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sgdma_from_fft_descriptor_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sgdma_from_fft_descriptor_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (222),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sgdma_from_fft_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                    //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (sgdma_from_fft_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sgdma_from_fft_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sgdma_from_fft_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sgdma_from_fft_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sgdma_from_fft_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sgdma_from_fft_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sgdma_from_fft_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sgdma_from_fft_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sgdma_from_fft_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sgdma_from_fft_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sgdma_from_fft_descriptor_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (sgdma_from_fft_descriptor_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sgdma_from_fft_descriptor_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sgdma_from_fft_descriptor_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sgdma_from_fft_descriptor_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sgdma_from_fft_descriptor_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sgdma_from_fft_descriptor_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                       // (terminated)
		.out_startofpacket (),                                                           // (terminated)
		.out_endofpacket   (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (220),
		.PKT_ORI_BURST_SIZE_L      (218),
		.PKT_RESPONSE_STATUS_H     (217),
		.PKT_RESPONSE_STATUS_L     (216),
		.PKT_BURST_SIZE_H          (193),
		.PKT_BURST_SIZE_L          (191),
		.PKT_TRANS_LOCK            (179),
		.PKT_BEGIN_BURST           (198),
		.PKT_PROTECTION_H          (211),
		.PKT_PROTECTION_L          (209),
		.PKT_BURSTWRAP_H           (190),
		.PKT_BURSTWRAP_L           (190),
		.PKT_BYTE_CNT_H            (189),
		.PKT_BYTE_CNT_L            (181),
		.PKT_ADDR_H                (174),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (175),
		.PKT_TRANS_POSTED          (176),
		.PKT_TRANS_WRITE           (177),
		.PKT_TRANS_READ            (178),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (203),
		.PKT_SRC_ID_L              (200),
		.PKT_DEST_ID_H             (207),
		.PKT_DEST_ID_L             (204),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (221),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sgdma_to_fft_descriptor_slave_agent (
		.clk                     (clk_0_clk_clk),                                                  //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (sgdma_to_fft_descriptor_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sgdma_to_fft_descriptor_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sgdma_to_fft_descriptor_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sgdma_to_fft_descriptor_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sgdma_to_fft_descriptor_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sgdma_to_fft_descriptor_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sgdma_to_fft_descriptor_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sgdma_to_fft_descriptor_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sgdma_to_fft_descriptor_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sgdma_to_fft_descriptor_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sgdma_to_fft_descriptor_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sgdma_to_fft_descriptor_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sgdma_to_fft_descriptor_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sgdma_to_fft_descriptor_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sgdma_to_fft_descriptor_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sgdma_to_fft_descriptor_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                          //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                          //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                           //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                    //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                        //                .channel
		.rf_sink_ready           (sgdma_to_fft_descriptor_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sgdma_to_fft_descriptor_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sgdma_to_fft_descriptor_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sgdma_to_fft_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sgdma_to_fft_descriptor_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sgdma_to_fft_descriptor_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sgdma_to_fft_descriptor_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sgdma_to_fft_descriptor_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sgdma_to_fft_descriptor_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sgdma_to_fft_descriptor_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (sgdma_to_fft_descriptor_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sgdma_to_fft_descriptor_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sgdma_to_fft_descriptor_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (222),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sgdma_to_fft_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                  //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (sgdma_to_fft_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sgdma_to_fft_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sgdma_to_fft_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sgdma_to_fft_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sgdma_to_fft_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sgdma_to_fft_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sgdma_to_fft_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sgdma_to_fft_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sgdma_to_fft_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sgdma_to_fft_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sgdma_to_fft_descriptor_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (sgdma_to_fft_descriptor_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sgdma_to_fft_descriptor_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sgdma_to_fft_descriptor_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sgdma_to_fft_descriptor_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sgdma_to_fft_descriptor_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sgdma_to_fft_descriptor_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (220),
		.PKT_ORI_BURST_SIZE_L      (218),
		.PKT_RESPONSE_STATUS_H     (217),
		.PKT_RESPONSE_STATUS_L     (216),
		.PKT_BURST_SIZE_H          (193),
		.PKT_BURST_SIZE_L          (191),
		.PKT_TRANS_LOCK            (179),
		.PKT_BEGIN_BURST           (198),
		.PKT_PROTECTION_H          (211),
		.PKT_PROTECTION_L          (209),
		.PKT_BURSTWRAP_H           (190),
		.PKT_BURSTWRAP_L           (190),
		.PKT_BYTE_CNT_H            (189),
		.PKT_BYTE_CNT_L            (181),
		.PKT_ADDR_H                (174),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (175),
		.PKT_TRANS_POSTED          (176),
		.PKT_TRANS_WRITE           (177),
		.PKT_TRANS_READ            (178),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (203),
		.PKT_SRC_ID_L              (200),
		.PKT_DEST_ID_H             (207),
		.PKT_DEST_ID_L             (204),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (221),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sgdma_from_ram_descriptor_slave_agent (
		.clk                     (clk_0_clk_clk),                                                    //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (sgdma_from_ram_descriptor_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sgdma_from_ram_descriptor_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sgdma_from_ram_descriptor_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sgdma_from_ram_descriptor_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sgdma_from_ram_descriptor_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sgdma_from_ram_descriptor_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sgdma_from_ram_descriptor_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sgdma_from_ram_descriptor_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sgdma_from_ram_descriptor_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sgdma_from_ram_descriptor_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sgdma_from_ram_descriptor_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sgdma_from_ram_descriptor_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sgdma_from_ram_descriptor_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sgdma_from_ram_descriptor_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sgdma_from_ram_descriptor_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sgdma_from_ram_descriptor_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                          //                .channel
		.rf_sink_ready           (sgdma_from_ram_descriptor_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sgdma_from_ram_descriptor_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sgdma_from_ram_descriptor_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sgdma_from_ram_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sgdma_from_ram_descriptor_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sgdma_from_ram_descriptor_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sgdma_from_ram_descriptor_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sgdma_from_ram_descriptor_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sgdma_from_ram_descriptor_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sgdma_from_ram_descriptor_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (sgdma_from_ram_descriptor_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sgdma_from_ram_descriptor_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sgdma_from_ram_descriptor_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (222),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sgdma_from_ram_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                    //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (sgdma_from_ram_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sgdma_from_ram_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sgdma_from_ram_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sgdma_from_ram_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sgdma_from_ram_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sgdma_from_ram_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sgdma_from_ram_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sgdma_from_ram_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sgdma_from_ram_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sgdma_from_ram_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sgdma_from_ram_descriptor_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (sgdma_from_ram_descriptor_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sgdma_from_ram_descriptor_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sgdma_from_ram_descriptor_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sgdma_from_ram_descriptor_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sgdma_from_ram_descriptor_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sgdma_from_ram_descriptor_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                       // (terminated)
		.out_startofpacket (),                                                           // (terminated)
		.out_endofpacket   (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (85),
		.PKT_BURST_SIZE_L          (83),
		.PKT_TRANS_LOCK            (71),
		.PKT_BEGIN_BURST           (90),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (82),
		.PKT_BURSTWRAP_L           (82),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (73),
		.PKT_ADDR_H                (66),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (67),
		.PKT_TRANS_POSTED          (68),
		.PKT_TRANS_WRITE           (69),
		.PKT_TRANS_READ            (70),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (92),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (96),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (113),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fft_stadapter_0_s0_agent (
		.clk                     (clk_0_clk_clk),                                       //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (fft_stadapter_0_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (fft_stadapter_0_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (fft_stadapter_0_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (fft_stadapter_0_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (fft_stadapter_0_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (fft_stadapter_0_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (fft_stadapter_0_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (fft_stadapter_0_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (fft_stadapter_0_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (fft_stadapter_0_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (fft_stadapter_0_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (fft_stadapter_0_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (fft_stadapter_0_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (fft_stadapter_0_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (fft_stadapter_0_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (fft_stadapter_0_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                             //                .channel
		.rf_sink_ready           (fft_stadapter_0_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (fft_stadapter_0_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (fft_stadapter_0_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (fft_stadapter_0_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (fft_stadapter_0_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (fft_stadapter_0_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (fft_stadapter_0_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (fft_stadapter_0_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (fft_stadapter_0_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (fft_stadapter_0_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (fft_stadapter_0_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fft_stadapter_0_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (fft_stadapter_0_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (114),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fft_stadapter_0_s0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (fft_stadapter_0_s0_agent_rf_source_data),             //        in.data
		.in_valid          (fft_stadapter_0_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (fft_stadapter_0_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fft_stadapter_0_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fft_stadapter_0_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fft_stadapter_0_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fft_stadapter_0_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fft_stadapter_0_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fft_stadapter_0_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fft_stadapter_0_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (148),
		.PKT_ORI_BURST_SIZE_L      (146),
		.PKT_RESPONSE_STATUS_H     (145),
		.PKT_RESPONSE_STATUS_L     (144),
		.PKT_BURST_SIZE_H          (121),
		.PKT_BURST_SIZE_L          (119),
		.PKT_TRANS_LOCK            (107),
		.PKT_BEGIN_BURST           (126),
		.PKT_PROTECTION_H          (139),
		.PKT_PROTECTION_L          (137),
		.PKT_BURSTWRAP_H           (118),
		.PKT_BURSTWRAP_L           (118),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (109),
		.PKT_ADDR_H                (102),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (103),
		.PKT_TRANS_POSTED          (104),
		.PKT_TRANS_WRITE           (105),
		.PKT_TRANS_READ            (106),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (131),
		.PKT_SRC_ID_L              (128),
		.PKT_DEST_ID_H             (135),
		.PKT_DEST_ID_L             (132),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (149),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) data_s1_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (data_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (data_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (data_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (data_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (data_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (data_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (data_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (data_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (data_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (data_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (data_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (data_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (data_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (data_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (data_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (data_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (data_s1_burst_adapter_source0_ready),           //              cp.ready
		.cp_valid                (data_s1_burst_adapter_source0_valid),           //                .valid
		.cp_data                 (data_s1_burst_adapter_source0_data),            //                .data
		.cp_startofpacket        (data_s1_burst_adapter_source0_startofpacket),   //                .startofpacket
		.cp_endofpacket          (data_s1_burst_adapter_source0_endofpacket),     //                .endofpacket
		.cp_channel              (data_s1_burst_adapter_source0_channel),         //                .channel
		.rf_sink_ready           (data_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (data_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (data_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (data_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (data_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (data_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (data_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (data_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (data_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (data_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),             //                .error
		.rdata_fifo_src_ready    (data_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (data_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (data_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (150),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) data_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (data_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (data_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (data_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (data_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (data_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (data_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (data_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (data_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (data_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (data_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (66),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) data_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (data_s1_agent_rdata_fifo_src_data),             //        in.data
		.in_valid          (data_s1_agent_rdata_fifo_src_valid),            //          .valid
		.in_ready          (data_s1_agent_rdata_fifo_src_ready),            //          .ready
		.out_data          (data_s1_agent_rdata_fifo_out_data),             //       out.data
		.out_valid         (data_s1_agent_rdata_fifo_out_valid),            //          .valid
		.out_ready         (data_s1_agent_rdata_fifo_out_ready),            //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (148),
		.PKT_ORI_BURST_SIZE_L      (146),
		.PKT_RESPONSE_STATUS_H     (145),
		.PKT_RESPONSE_STATUS_L     (144),
		.PKT_BURST_SIZE_H          (121),
		.PKT_BURST_SIZE_L          (119),
		.PKT_TRANS_LOCK            (107),
		.PKT_BEGIN_BURST           (126),
		.PKT_PROTECTION_H          (139),
		.PKT_PROTECTION_L          (137),
		.PKT_BURSTWRAP_H           (118),
		.PKT_BURSTWRAP_L           (118),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (109),
		.PKT_ADDR_H                (102),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (103),
		.PKT_TRANS_POSTED          (104),
		.PKT_TRANS_WRITE           (105),
		.PKT_TRANS_READ            (106),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (131),
		.PKT_SRC_ID_L              (128),
		.PKT_DEST_ID_H             (135),
		.PKT_DEST_ID_L             (132),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (149),
		.AVS_BURSTCOUNT_W          (9),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ddr_s0_agent (
		.clk                     (clk_0_clk_clk),                                 //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ddr_s0_agent_m0_address),                       //              m0.address
		.m0_burstcount           (ddr_s0_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (ddr_s0_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (ddr_s0_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (ddr_s0_agent_m0_lock),                          //                .lock
		.m0_readdata             (ddr_s0_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (ddr_s0_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (ddr_s0_agent_m0_read),                          //                .read
		.m0_waitrequest          (ddr_s0_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (ddr_s0_agent_m0_writedata),                     //                .writedata
		.m0_write                (ddr_s0_agent_m0_write),                         //                .write
		.rp_endofpacket          (ddr_s0_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (ddr_s0_agent_rp_ready),                         //                .ready
		.rp_valid                (ddr_s0_agent_rp_valid),                         //                .valid
		.rp_data                 (ddr_s0_agent_rp_data),                          //                .data
		.rp_startofpacket        (ddr_s0_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (ddr_s0_burst_adapter_source0_ready),            //              cp.ready
		.cp_valid                (ddr_s0_burst_adapter_source0_valid),            //                .valid
		.cp_data                 (ddr_s0_burst_adapter_source0_data),             //                .data
		.cp_startofpacket        (ddr_s0_burst_adapter_source0_startofpacket),    //                .startofpacket
		.cp_endofpacket          (ddr_s0_burst_adapter_source0_endofpacket),      //                .endofpacket
		.cp_channel              (ddr_s0_burst_adapter_source0_channel),          //                .channel
		.rf_sink_ready           (ddr_s0_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (ddr_s0_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (ddr_s0_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (ddr_s0_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (ddr_s0_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (ddr_s0_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (ddr_s0_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (ddr_s0_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (ddr_s0_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (ddr_s0_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),             //                .error
		.rdata_fifo_src_ready    (ddr_s0_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ddr_s0_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (ddr_s0_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (150),
		.FIFO_DEPTH          (9),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ddr_s0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ddr_s0_agent_rf_source_data),                   //        in.data
		.in_valid          (ddr_s0_agent_rf_source_valid),                  //          .valid
		.in_ready          (ddr_s0_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (ddr_s0_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (ddr_s0_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (ddr_s0_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (ddr_s0_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (ddr_s0_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (ddr_s0_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (ddr_s0_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (66),
		.FIFO_DEPTH          (512),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ddr_s0_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                 //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ddr_s0_agent_rdata_fifo_src_data),              //        in.data
		.in_valid          (ddr_s0_agent_rdata_fifo_src_valid),             //          .valid
		.in_ready          (ddr_s0_agent_rdata_fifo_src_ready),             //          .ready
		.out_data          (ddr_s0_agent_rdata_fifo_out_data),              //       out.data
		.out_valid         (ddr_s0_agent_rdata_fifo_out_valid),             //          .valid
		.out_ready         (ddr_s0_agent_rdata_fifo_out_ready),             //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	soc_system_fft_sub_mm_interconnect_0_router router (
		.sink_ready         (mm_bridge_0_m0_agent_cp_ready),                 //      sink.ready
		.sink_valid         (mm_bridge_0_m0_agent_cp_valid),                 //          .valid
		.sink_data          (mm_bridge_0_m0_agent_cp_data),                  //          .data
		.sink_startofpacket (mm_bridge_0_m0_agent_cp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (mm_bridge_0_m0_agent_cp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                              //       src.ready
		.src_valid          (router_src_valid),                              //          .valid
		.src_data           (router_src_data),                               //          .data
		.src_channel        (router_src_channel),                            //          .channel
		.src_startofpacket  (router_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                         //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (sgdma_to_fft_mm_read_agent_cp_ready),           //      sink.ready
		.sink_valid         (sgdma_to_fft_mm_read_agent_cp_valid),           //          .valid
		.sink_data          (sgdma_to_fft_mm_read_agent_cp_data),            //          .data
		.sink_startofpacket (sgdma_to_fft_mm_read_agent_cp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (sgdma_to_fft_mm_read_agent_cp_endofpacket),     //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                          //       src.ready
		.src_valid          (router_001_src_valid),                          //          .valid
		.src_data           (router_001_src_data),                           //          .data
		.src_channel        (router_001_src_channel),                        //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                     //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (sgdma_from_ram_mm_read_agent_cp_ready),         //      sink.ready
		.sink_valid         (sgdma_from_ram_mm_read_agent_cp_valid),         //          .valid
		.sink_data          (sgdma_from_ram_mm_read_agent_cp_data),          //          .data
		.sink_startofpacket (sgdma_from_ram_mm_read_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_from_ram_mm_read_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                          //       src.ready
		.src_valid          (router_002_src_valid),                          //          .valid
		.src_data           (router_002_src_data),                           //          .data
		.src_channel        (router_002_src_channel),                        //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                     //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (sgdma_from_fft_mm_write_agent_cp_ready),         //      sink.ready
		.sink_valid         (sgdma_from_fft_mm_write_agent_cp_valid),         //          .valid
		.sink_data          (sgdma_from_fft_mm_write_agent_cp_data),          //          .data
		.sink_startofpacket (sgdma_from_fft_mm_write_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_from_fft_mm_write_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_003_src_ready),                           //       src.ready
		.src_valid          (router_003_src_valid),                           //          .valid
		.src_data           (router_003_src_data),                            //          .data
		.src_channel        (router_003_src_channel),                         //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                      //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (sgdma_from_ram_mm_write_agent_cp_ready),         //      sink.ready
		.sink_valid         (sgdma_from_ram_mm_write_agent_cp_valid),         //          .valid
		.sink_data          (sgdma_from_ram_mm_write_agent_cp_data),          //          .data
		.sink_startofpacket (sgdma_from_ram_mm_write_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_from_ram_mm_write_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_004_src_ready),                           //       src.ready
		.src_valid          (router_004_src_valid),                           //          .valid
		.src_data           (router_004_src_data),                            //          .data
		.src_channel        (router_004_src_channel),                         //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                      //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (sgdma_from_fft_csr_agent_rp_ready),             //      sink.ready
		.sink_valid         (sgdma_from_fft_csr_agent_rp_valid),             //          .valid
		.sink_data          (sgdma_from_fft_csr_agent_rp_data),              //          .data
		.sink_startofpacket (sgdma_from_fft_csr_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (sgdma_from_fft_csr_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                          //       src.ready
		.src_valid          (router_005_src_valid),                          //          .valid
		.src_data           (router_005_src_data),                           //          .data
		.src_channel        (router_005_src_channel),                        //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                     //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_router_005 router_006 (
		.sink_ready         (sgdma_to_fft_csr_agent_rp_ready),               //      sink.ready
		.sink_valid         (sgdma_to_fft_csr_agent_rp_valid),               //          .valid
		.sink_data          (sgdma_to_fft_csr_agent_rp_data),                //          .data
		.sink_startofpacket (sgdma_to_fft_csr_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (sgdma_to_fft_csr_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                          //       src.ready
		.src_valid          (router_006_src_valid),                          //          .valid
		.src_data           (router_006_src_data),                           //          .data
		.src_channel        (router_006_src_channel),                        //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                     //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_router_005 router_007 (
		.sink_ready         (sgdma_from_ram_csr_agent_rp_ready),             //      sink.ready
		.sink_valid         (sgdma_from_ram_csr_agent_rp_valid),             //          .valid
		.sink_data          (sgdma_from_ram_csr_agent_rp_data),              //          .data
		.sink_startofpacket (sgdma_from_ram_csr_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (sgdma_from_ram_csr_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                          //       src.ready
		.src_valid          (router_007_src_valid),                          //          .valid
		.src_data           (router_007_src_data),                           //          .data
		.src_channel        (router_007_src_channel),                        //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                     //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_router_008 router_008 (
		.sink_ready         (sgdma_from_fft_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sgdma_from_fft_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (sgdma_from_fft_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sgdma_from_fft_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_from_fft_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                          //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready          (router_008_src_ready),                                   //       src.ready
		.src_valid          (router_008_src_valid),                                   //          .valid
		.src_data           (router_008_src_data),                                    //          .data
		.src_channel        (router_008_src_channel),                                 //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                              //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_router_008 router_009 (
		.sink_ready         (sgdma_to_fft_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sgdma_to_fft_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (sgdma_to_fft_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sgdma_to_fft_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_to_fft_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_009_src_ready),                                 //       src.ready
		.src_valid          (router_009_src_valid),                                 //          .valid
		.src_data           (router_009_src_data),                                  //          .data
		.src_channel        (router_009_src_channel),                               //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                            //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_router_008 router_010 (
		.sink_ready         (sgdma_from_ram_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sgdma_from_ram_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (sgdma_from_ram_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sgdma_from_ram_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_from_ram_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                          //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready          (router_010_src_ready),                                   //       src.ready
		.src_valid          (router_010_src_valid),                                   //          .valid
		.src_data           (router_010_src_data),                                    //          .data
		.src_channel        (router_010_src_channel),                                 //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                              //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_router_005 router_011 (
		.sink_ready         (fft_stadapter_0_s0_agent_rp_ready),             //      sink.ready
		.sink_valid         (fft_stadapter_0_s0_agent_rp_valid),             //          .valid
		.sink_data          (fft_stadapter_0_s0_agent_rp_data),              //          .data
		.sink_startofpacket (fft_stadapter_0_s0_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (fft_stadapter_0_s0_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                          //       src.ready
		.src_valid          (router_011_src_valid),                          //          .valid
		.src_data           (router_011_src_data),                           //          .data
		.src_channel        (router_011_src_channel),                        //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                     //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_router_012 router_012 (
		.sink_ready         (data_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (data_s1_agent_rp_valid),                        //          .valid
		.sink_data          (data_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (data_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (data_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                          //       src.ready
		.src_valid          (router_012_src_valid),                          //          .valid
		.src_data           (router_012_src_data),                           //          .data
		.src_channel        (router_012_src_channel),                        //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                     //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_router_013 router_013 (
		.sink_ready         (ddr_s0_agent_rp_ready),                         //      sink.ready
		.sink_valid         (ddr_s0_agent_rp_valid),                         //          .valid
		.sink_data          (ddr_s0_agent_rp_data),                          //          .data
		.sink_startofpacket (ddr_s0_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (ddr_s0_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                          //       src.ready
		.src_valid          (router_013_src_valid),                          //          .valid
		.src_data           (router_013_src_data),                           //          .data
		.src_channel        (router_013_src_channel),                        //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                     //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (96),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (92),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (73),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (68),
		.PKT_TRANS_WRITE           (69),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (9),
		.VALID_WIDTH               (9),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) mm_bridge_0_m0_limiter (
		.clk                    (clk_0_clk_clk),                                 //       clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                              //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                              //          .valid
		.cmd_sink_data          (router_src_data),                               //          .data
		.cmd_sink_channel       (router_src_channel),                            //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                      //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                        //          .endofpacket
		.cmd_src_ready          (mm_bridge_0_m0_limiter_cmd_src_ready),          //   cmd_src.ready
		.cmd_src_data           (mm_bridge_0_m0_limiter_cmd_src_data),           //          .data
		.cmd_src_channel        (mm_bridge_0_m0_limiter_cmd_src_channel),        //          .channel
		.cmd_src_startofpacket  (mm_bridge_0_m0_limiter_cmd_src_startofpacket),  //          .startofpacket
		.cmd_src_endofpacket    (mm_bridge_0_m0_limiter_cmd_src_endofpacket),    //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                             //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                             //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                           //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                              //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                     //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                       //          .endofpacket
		.rsp_src_ready          (mm_bridge_0_m0_limiter_rsp_src_ready),          //   rsp_src.ready
		.rsp_src_valid          (mm_bridge_0_m0_limiter_rsp_src_valid),          //          .valid
		.rsp_src_data           (mm_bridge_0_m0_limiter_rsp_src_data),           //          .data
		.rsp_src_channel        (mm_bridge_0_m0_limiter_rsp_src_channel),        //          .channel
		.rsp_src_startofpacket  (mm_bridge_0_m0_limiter_rsp_src_startofpacket),  //          .startofpacket
		.rsp_src_endofpacket    (mm_bridge_0_m0_limiter_rsp_src_endofpacket),    //          .endofpacket
		.cmd_src_valid          (mm_bridge_0_m0_limiter_cmd_valid_data)          // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (96),
		.PKT_SRC_ID_H              (95),
		.PKT_SRC_ID_L              (92),
		.PKT_BYTE_CNT_H            (81),
		.PKT_BYTE_CNT_L            (73),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (68),
		.PKT_TRANS_WRITE           (69),
		.MAX_OUTSTANDING_RESPONSES (12),
		.PIPELINED                 (0),
		.ST_DATA_W                 (113),
		.ST_CHANNEL_W              (9),
		.VALID_WIDTH               (9),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) sgdma_to_fft_mm_read_limiter (
		.clk                    (clk_0_clk_clk),                                      //       clk.clk
		.reset                  (mm_bridge_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                               //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                               //          .valid
		.cmd_sink_data          (router_001_src_data),                                //          .data
		.cmd_sink_channel       (router_001_src_channel),                             //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                       //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                         //          .endofpacket
		.cmd_src_ready          (sgdma_to_fft_mm_read_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (sgdma_to_fft_mm_read_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (sgdma_to_fft_mm_read_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (sgdma_to_fft_mm_read_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (sgdma_to_fft_mm_read_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                              //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                              //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                            //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                               //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                      //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                        //          .endofpacket
		.rsp_src_ready          (sgdma_to_fft_mm_read_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (sgdma_to_fft_mm_read_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (sgdma_to_fft_mm_read_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (sgdma_to_fft_mm_read_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (sgdma_to_fft_mm_read_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (sgdma_to_fft_mm_read_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (sgdma_to_fft_mm_read_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (102),
		.PKT_ADDR_L                (72),
		.PKT_BEGIN_BURST           (126),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (109),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_BURST_SIZE_H          (121),
		.PKT_BURST_SIZE_L          (119),
		.PKT_BURST_TYPE_H          (123),
		.PKT_BURST_TYPE_L          (122),
		.PKT_BURSTWRAP_H           (118),
		.PKT_BURSTWRAP_L           (118),
		.PKT_TRANS_COMPRESSED_READ (103),
		.PKT_TRANS_WRITE           (105),
		.PKT_TRANS_READ            (106),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (149),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (112),
		.OUT_BURSTWRAP_H           (118),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) data_s1_burst_adapter (
		.clk                   (clk_0_clk_clk),                                 //       cr0.clk
		.reset                 (mm_bridge_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_007_src_valid),                         //     sink0.valid
		.sink0_data            (cmd_mux_007_src_data),                          //          .data
		.sink0_channel         (cmd_mux_007_src_channel),                       //          .channel
		.sink0_startofpacket   (cmd_mux_007_src_startofpacket),                 //          .startofpacket
		.sink0_endofpacket     (cmd_mux_007_src_endofpacket),                   //          .endofpacket
		.sink0_ready           (cmd_mux_007_src_ready),                         //          .ready
		.source0_valid         (data_s1_burst_adapter_source0_valid),           //   source0.valid
		.source0_data          (data_s1_burst_adapter_source0_data),            //          .data
		.source0_channel       (data_s1_burst_adapter_source0_channel),         //          .channel
		.source0_startofpacket (data_s1_burst_adapter_source0_startofpacket),   //          .startofpacket
		.source0_endofpacket   (data_s1_burst_adapter_source0_endofpacket),     //          .endofpacket
		.source0_ready         (data_s1_burst_adapter_source0_ready)            //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (102),
		.PKT_ADDR_L                (72),
		.PKT_BEGIN_BURST           (126),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (109),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_BURST_SIZE_H          (121),
		.PKT_BURST_SIZE_L          (119),
		.PKT_BURST_TYPE_H          (123),
		.PKT_BURST_TYPE_L          (122),
		.PKT_BURSTWRAP_H           (118),
		.PKT_BURSTWRAP_L           (118),
		.PKT_TRANS_COMPRESSED_READ (103),
		.PKT_TRANS_WRITE           (105),
		.PKT_TRANS_READ            (106),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (149),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (117),
		.OUT_BURSTWRAP_H           (118),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) ddr_s0_burst_adapter (
		.clk                   (clk_0_clk_clk),                                 //       cr0.clk
		.reset                 (mm_bridge_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (pipeline_stage_source0_valid),                  //     sink0.valid
		.sink0_data            (pipeline_stage_source0_data),                   //          .data
		.sink0_channel         (pipeline_stage_source0_channel),                //          .channel
		.sink0_startofpacket   (pipeline_stage_source0_startofpacket),          //          .startofpacket
		.sink0_endofpacket     (pipeline_stage_source0_endofpacket),            //          .endofpacket
		.sink0_ready           (pipeline_stage_source0_ready),                  //          .ready
		.source0_valid         (ddr_s0_burst_adapter_source0_valid),            //   source0.valid
		.source0_data          (ddr_s0_burst_adapter_source0_data),             //          .data
		.source0_channel       (ddr_s0_burst_adapter_source0_channel),          //          .channel
		.source0_startofpacket (ddr_s0_burst_adapter_source0_startofpacket),    //          .startofpacket
		.source0_endofpacket   (ddr_s0_burst_adapter_source0_endofpacket),      //          .endofpacket
		.source0_ready         (ddr_s0_burst_adapter_source0_ready)             //          .ready
	);

	soc_system_fft_sub_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                 //        clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (mm_bridge_0_m0_limiter_cmd_src_ready),          //       sink.ready
		.sink_channel       (mm_bridge_0_m0_limiter_cmd_src_channel),        //           .channel
		.sink_data          (mm_bridge_0_m0_limiter_cmd_src_data),           //           .data
		.sink_startofpacket (mm_bridge_0_m0_limiter_cmd_src_startofpacket),  //           .startofpacket
		.sink_endofpacket   (mm_bridge_0_m0_limiter_cmd_src_endofpacket),    //           .endofpacket
		.sink_valid         (mm_bridge_0_m0_limiter_cmd_valid_data),         // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                          //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                          //           .valid
		.src0_data          (cmd_demux_src0_data),                           //           .data
		.src0_channel       (cmd_demux_src0_channel),                        //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                  //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                    //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                          //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                          //           .valid
		.src1_data          (cmd_demux_src1_data),                           //           .data
		.src1_channel       (cmd_demux_src1_channel),                        //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                  //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                    //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                          //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                          //           .valid
		.src2_data          (cmd_demux_src2_data),                           //           .data
		.src2_channel       (cmd_demux_src2_channel),                        //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                  //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                    //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                          //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                          //           .valid
		.src3_data          (cmd_demux_src3_data),                           //           .data
		.src3_channel       (cmd_demux_src3_channel),                        //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                  //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                    //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                          //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                          //           .valid
		.src4_data          (cmd_demux_src4_data),                           //           .data
		.src4_channel       (cmd_demux_src4_channel),                        //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                  //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                    //           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                          //       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                          //           .valid
		.src5_data          (cmd_demux_src5_data),                           //           .data
		.src5_channel       (cmd_demux_src5_channel),                        //           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                  //           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                    //           .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                          //       src6.ready
		.src6_valid         (cmd_demux_src6_valid),                          //           .valid
		.src6_data          (cmd_demux_src6_data),                           //           .data
		.src6_channel       (cmd_demux_src6_channel),                        //           .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                  //           .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket),                    //           .endofpacket
		.src7_ready         (cmd_demux_src7_ready),                          //       src7.ready
		.src7_valid         (cmd_demux_src7_valid),                          //           .valid
		.src7_data          (cmd_demux_src7_data),                           //           .data
		.src7_channel       (cmd_demux_src7_channel),                        //           .channel
		.src7_startofpacket (cmd_demux_src7_startofpacket),                  //           .startofpacket
		.src7_endofpacket   (cmd_demux_src7_endofpacket)                     //           .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                      //        clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset),      //  clk_reset.reset
		.sink_ready         (sgdma_to_fft_mm_read_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (sgdma_to_fft_mm_read_limiter_cmd_src_channel),       //           .channel
		.sink_data          (sgdma_to_fft_mm_read_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (sgdma_to_fft_mm_read_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (sgdma_to_fft_mm_read_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (sgdma_to_fft_mm_read_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                           //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                           //           .valid
		.src0_data          (cmd_demux_001_src0_data),                            //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                         //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                   //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                     //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                           //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                           //           .valid
		.src1_data          (cmd_demux_001_src1_data),                            //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                         //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                   //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)                      //           .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                          //      sink.ready
		.sink_channel       (router_002_src_channel),                        //          .channel
		.sink_data          (router_002_src_data),                           //          .data
		.sink_startofpacket (router_002_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_002_src_valid),                          //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                      //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                      //          .valid
		.src0_data          (cmd_demux_002_src0_data),                       //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                    //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_cmd_demux_003 cmd_demux_003 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                          //      sink.ready
		.sink_channel       (router_003_src_channel),                        //          .channel
		.sink_data          (router_003_src_data),                           //          .data
		.sink_startofpacket (router_003_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_003_src_valid),                          //          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                      //      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                      //          .valid
		.src0_data          (cmd_demux_003_src0_data),                       //          .data
		.src0_channel       (cmd_demux_003_src0_channel),                    //          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket),                //          .endofpacket
		.src1_ready         (cmd_demux_003_src1_ready),                      //      src1.ready
		.src1_valid         (cmd_demux_003_src1_valid),                      //          .valid
		.src1_data          (cmd_demux_003_src1_data),                       //          .data
		.src1_channel       (cmd_demux_003_src1_channel),                    //          .channel
		.src1_startofpacket (cmd_demux_003_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (cmd_demux_003_src1_endofpacket)                 //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_cmd_demux_002 cmd_demux_004 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                          //      sink.ready
		.sink_channel       (router_004_src_channel),                        //          .channel
		.sink_data          (router_004_src_data),                           //          .data
		.sink_startofpacket (router_004_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_004_src_valid),                          //          .valid
		.src0_ready         (cmd_demux_004_src0_ready),                      //      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                      //          .valid
		.src0_data          (cmd_demux_004_src0_data),                       //          .data
		.src0_channel       (cmd_demux_004_src0_channel),                    //          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_src_valid),                             //          .valid
		.src_data            (cmd_mux_src_data),                              //          .data
		.src_channel         (cmd_mux_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                        //          .channel
		.sink0_data          (cmd_demux_src0_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                     //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                         //          .valid
		.src_data            (cmd_mux_001_src_data),                          //          .data
		.src_channel         (cmd_mux_001_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                        //          .channel
		.sink0_data          (cmd_demux_src1_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                     //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                         //          .valid
		.src_data            (cmd_mux_002_src_data),                          //          .data
		.src_channel         (cmd_mux_002_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                        //          .channel
		.sink0_data          (cmd_demux_src2_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                     //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_cmd_mux_003 cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                                                         //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                                                 //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                                                 //          .valid
		.src_data            (cmd_mux_003_src_data),                                                                  //          .data
		.src_channel         (cmd_mux_003_src_channel),                                                               //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                                           //          .endofpacket
		.sink0_ready         (mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_cmd_mux_003 cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                                                       //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                                               //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                                               //          .valid
		.src_data            (cmd_mux_004_src_data),                                                                //          .data
		.src_channel         (cmd_mux_004_src_channel),                                                             //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                                                       //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                                                         //          .endofpacket
		.sink0_ready         (mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_cmd_mux_003 cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                                                         //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                                                 //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                                                 //          .valid
		.src_data            (cmd_mux_005_src_data),                                                                  //          .data
		.src_channel         (cmd_mux_005_src_channel),                                                               //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                                                           //          .endofpacket
		.sink0_ready         (mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                         //          .valid
		.src_data            (cmd_mux_006_src_data),                          //          .data
		.src_channel         (cmd_mux_006_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                        //          .channel
		.sink0_data          (cmd_demux_src6_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                     //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_cmd_mux_007 cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                                                       //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                               //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                               //          .valid
		.src_data            (cmd_mux_007_src_data),                                                //          .data
		.src_channel         (cmd_mux_007_src_channel),                                             //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (mm_bridge_0_m0_to_data_s1_cmd_width_adapter_src_ready),               //     sink0.ready
		.sink0_valid         (mm_bridge_0_m0_to_data_s1_cmd_width_adapter_src_valid),               //          .valid
		.sink0_channel       (mm_bridge_0_m0_to_data_s1_cmd_width_adapter_src_channel),             //          .channel
		.sink0_data          (mm_bridge_0_m0_to_data_s1_cmd_width_adapter_src_data),                //          .data
		.sink0_startofpacket (mm_bridge_0_m0_to_data_s1_cmd_width_adapter_src_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (mm_bridge_0_m0_to_data_s1_cmd_width_adapter_src_endofpacket),         //          .endofpacket
		.sink1_ready         (sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink1_channel       (sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink1_data          (sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter_src_data),          //          .data
		.sink1_startofpacket (sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                                            //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                                            //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                                          //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                                             //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),                                    //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket),                                      //          .endofpacket
		.sink3_ready         (cmd_demux_003_src0_ready),                                            //     sink3.ready
		.sink3_valid         (cmd_demux_003_src0_valid),                                            //          .valid
		.sink3_channel       (cmd_demux_003_src0_channel),                                          //          .channel
		.sink3_data          (cmd_demux_003_src0_data),                                             //          .data
		.sink3_startofpacket (cmd_demux_003_src0_startofpacket),                                    //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src0_endofpacket)                                       //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_cmd_mux_008 cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                                                      //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                              //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                              //          .valid
		.src_data            (cmd_mux_008_src_data),                                               //          .data
		.src_channel         (cmd_mux_008_src_channel),                                            //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                                        //          .endofpacket
		.sink0_ready         (sgdma_to_fft_mm_read_to_ddr_s0_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (sgdma_to_fft_mm_read_to_ddr_s0_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (sgdma_to_fft_mm_read_to_ddr_s0_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (sgdma_to_fft_mm_read_to_ddr_s0_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (sgdma_to_fft_mm_read_to_ddr_s0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (sgdma_to_fft_mm_read_to_ddr_s0_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (cmd_demux_003_src1_ready),                                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src1_valid),                                           //          .valid
		.sink1_channel       (cmd_demux_003_src1_channel),                                         //          .channel
		.sink1_data          (cmd_demux_003_src1_data),                                            //          .data
		.sink1_startofpacket (cmd_demux_003_src1_startofpacket),                                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src1_endofpacket),                                     //          .endofpacket
		.sink2_ready         (cmd_demux_004_src0_ready),                                           //     sink2.ready
		.sink2_valid         (cmd_demux_004_src0_valid),                                           //          .valid
		.sink2_channel       (cmd_demux_004_src0_channel),                                         //          .channel
		.sink2_data          (cmd_demux_004_src0_data),                                            //          .data
		.sink2_startofpacket (cmd_demux_004_src0_startofpacket),                                   //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src0_endofpacket)                                      //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                          //      sink.ready
		.sink_channel       (router_005_src_channel),                        //          .channel
		.sink_data          (router_005_src_data),                           //          .data
		.sink_startofpacket (router_005_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_005_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_src0_data),                           //          .data
		.src0_channel       (rsp_demux_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                     //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                          //      sink.ready
		.sink_channel       (router_006_src_channel),                        //          .channel
		.sink_data          (router_006_src_data),                           //          .data
		.sink_startofpacket (router_006_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_006_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_001_src0_data),                       //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                          //      sink.ready
		.sink_channel       (router_007_src_channel),                        //          .channel
		.sink_data          (router_007_src_data),                           //          .data
		.sink_startofpacket (router_007_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_007_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_002_src0_data),                       //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_rsp_demux_003 rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                          //      sink.ready
		.sink_channel       (router_008_src_channel),                        //          .channel
		.sink_data          (router_008_src_data),                           //          .data
		.sink_startofpacket (router_008_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_008_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_003_src0_data),                       //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_rsp_demux_003 rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                          //      sink.ready
		.sink_channel       (router_009_src_channel),                        //          .channel
		.sink_data          (router_009_src_data),                           //          .data
		.sink_startofpacket (router_009_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_009_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_004_src0_data),                       //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_rsp_demux_003 rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                          //      sink.ready
		.sink_channel       (router_010_src_channel),                        //          .channel
		.sink_data          (router_010_src_data),                           //          .data
		.sink_startofpacket (router_010_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_010_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_005_src0_data),                       //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                          //      sink.ready
		.sink_channel       (router_011_src_channel),                        //          .channel
		.sink_data          (router_011_src_data),                           //          .data
		.sink_startofpacket (router_011_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_011_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_006_src0_data),                       //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                 //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_rsp_demux_007 rsp_demux_007 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                          //      sink.ready
		.sink_channel       (router_012_src_channel),                        //          .channel
		.sink_data          (router_012_src_data),                           //          .data
		.sink_startofpacket (router_012_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_012_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_007_src0_data),                       //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_007_src1_data),                       //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket),                //          .endofpacket
		.src2_ready         (rsp_demux_007_src2_ready),                      //      src2.ready
		.src2_valid         (rsp_demux_007_src2_valid),                      //          .valid
		.src2_data          (rsp_demux_007_src2_data),                       //          .data
		.src2_channel       (rsp_demux_007_src2_channel),                    //          .channel
		.src2_startofpacket (rsp_demux_007_src2_startofpacket),              //          .startofpacket
		.src2_endofpacket   (rsp_demux_007_src2_endofpacket),                //          .endofpacket
		.src3_ready         (rsp_demux_007_src3_ready),                      //      src3.ready
		.src3_valid         (rsp_demux_007_src3_valid),                      //          .valid
		.src3_data          (rsp_demux_007_src3_data),                       //          .data
		.src3_channel       (rsp_demux_007_src3_channel),                    //          .channel
		.src3_startofpacket (rsp_demux_007_src3_startofpacket),              //          .startofpacket
		.src3_endofpacket   (rsp_demux_007_src3_endofpacket)                 //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_rsp_demux_008 rsp_demux_008 (
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                          //      sink.ready
		.sink_channel       (router_013_src_channel),                        //          .channel
		.sink_data          (router_013_src_data),                           //          .data
		.sink_startofpacket (router_013_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_013_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_008_src0_data),                       //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                      //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                      //          .valid
		.src1_data          (rsp_demux_008_src1_data),                       //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                    //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),              //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket),                //          .endofpacket
		.src2_ready         (rsp_demux_008_src2_ready),                      //      src2.ready
		.src2_valid         (rsp_demux_008_src2_valid),                      //          .valid
		.src2_data          (rsp_demux_008_src2_data),                       //          .data
		.src2_channel       (rsp_demux_008_src2_channel),                    //          .channel
		.src2_startofpacket (rsp_demux_008_src2_startofpacket),              //          .startofpacket
		.src2_endofpacket   (rsp_demux_008_src2_endofpacket)                 //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                                                         //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                                     //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                                     //          .valid
		.src_data            (rsp_mux_src_data),                                                                      //          .data
		.src_channel         (rsp_mux_src_channel),                                                                   //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                                             //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                               //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                                                  //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                                                  //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                                                //          .channel
		.sink0_data          (rsp_demux_src0_data),                                                                   //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                                          //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                                            //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                                              //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                                              //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                                            //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                                               //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                                                      //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                                                        //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                                              //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                                              //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                                            //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                                               //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                                                      //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                                                        //          .endofpacket
		.sink3_ready         (sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_ready),         //     sink3.ready
		.sink3_valid         (sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_valid),         //          .valid
		.sink3_channel       (sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_channel),       //          .channel
		.sink3_data          (sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_data),          //          .data
		.sink3_startofpacket (sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink3_endofpacket   (sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink4_ready         (sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_ready),           //     sink4.ready
		.sink4_valid         (sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_valid),           //          .valid
		.sink4_channel       (sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_channel),         //          .channel
		.sink4_data          (sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_data),            //          .data
		.sink4_startofpacket (sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket),   //          .startofpacket
		.sink4_endofpacket   (sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket),     //          .endofpacket
		.sink5_ready         (sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_ready),         //     sink5.ready
		.sink5_valid         (sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_valid),         //          .valid
		.sink5_channel       (sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_channel),       //          .channel
		.sink5_data          (sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_data),          //          .data
		.sink5_startofpacket (sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink5_endofpacket   (sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink6_ready         (rsp_demux_006_src0_ready),                                                              //     sink6.ready
		.sink6_valid         (rsp_demux_006_src0_valid),                                                              //          .valid
		.sink6_channel       (rsp_demux_006_src0_channel),                                                            //          .channel
		.sink6_data          (rsp_demux_006_src0_data),                                                               //          .data
		.sink6_startofpacket (rsp_demux_006_src0_startofpacket),                                                      //          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src0_endofpacket),                                                        //          .endofpacket
		.sink7_ready         (data_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_ready),                                 //     sink7.ready
		.sink7_valid         (data_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_valid),                                 //          .valid
		.sink7_channel       (data_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_channel),                               //          .channel
		.sink7_data          (data_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_data),                                  //          .data
		.sink7_startofpacket (data_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket),                         //          .startofpacket
		.sink7_endofpacket   (data_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket)                            //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                                       //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                               //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                               //          .valid
		.src_data            (rsp_mux_001_src_data),                                                //          .data
		.src_channel         (rsp_mux_001_src_channel),                                             //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (ddr_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_ready),          //     sink1.ready
		.sink1_valid         (ddr_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_valid),          //          .valid
		.sink1_channel       (ddr_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_channel),        //          .channel
		.sink1_data          (ddr_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_data),           //          .data
		.sink1_startofpacket (ddr_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (ddr_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_endofpacket)     //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                         //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                         //          .valid
		.src_data            (rsp_mux_002_src_data),                          //          .data
		.src_channel         (rsp_mux_002_src_channel),                       //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (rsp_demux_007_src2_ready),                      //     sink0.ready
		.sink0_valid         (rsp_demux_007_src2_valid),                      //          .valid
		.sink0_channel       (rsp_demux_007_src2_channel),                    //          .channel
		.sink0_data          (rsp_demux_007_src2_data),                       //          .data
		.sink0_startofpacket (rsp_demux_007_src2_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_demux_007_src2_endofpacket)                 //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_rsp_mux_003 rsp_mux_003 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                         //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                         //          .valid
		.src_data            (rsp_mux_003_src_data),                          //          .data
		.src_channel         (rsp_mux_003_src_channel),                       //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (rsp_demux_007_src3_ready),                      //     sink0.ready
		.sink0_valid         (rsp_demux_007_src3_valid),                      //          .valid
		.sink0_channel       (rsp_demux_007_src3_channel),                    //          .channel
		.sink0_data          (rsp_demux_007_src3_data),                       //          .data
		.sink0_startofpacket (rsp_demux_007_src3_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_demux_007_src3_endofpacket),                //          .endofpacket
		.sink1_ready         (rsp_demux_008_src1_ready),                      //     sink1.ready
		.sink1_valid         (rsp_demux_008_src1_valid),                      //          .valid
		.sink1_channel       (rsp_demux_008_src1_channel),                    //          .channel
		.sink1_data          (rsp_demux_008_src1_data),                       //          .data
		.sink1_startofpacket (rsp_demux_008_src1_startofpacket),              //          .startofpacket
		.sink1_endofpacket   (rsp_demux_008_src1_endofpacket)                 //          .endofpacket
	);

	soc_system_fft_sub_mm_interconnect_0_rsp_mux_002 rsp_mux_004 (
		.clk                 (clk_0_clk_clk),                                 //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                         //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                         //          .valid
		.src_data            (rsp_mux_004_src_data),                          //          .data
		.src_channel         (rsp_mux_004_src_channel),                       //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (rsp_demux_008_src2_ready),                      //     sink0.ready
		.sink0_valid         (rsp_demux_008_src2_valid),                      //          .valid
		.sink0_channel       (rsp_demux_008_src2_channel),                    //          .channel
		.sink0_data          (rsp_demux_008_src2_data),                       //          .data
		.sink0_startofpacket (rsp_demux_008_src2_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (rsp_demux_008_src2_endofpacket)                 //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (66),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (81),
		.IN_PKT_BYTE_CNT_L             (73),
		.IN_PKT_TRANS_COMPRESSED_READ  (67),
		.IN_PKT_TRANS_WRITE            (69),
		.IN_PKT_BURSTWRAP_H            (82),
		.IN_PKT_BURSTWRAP_L            (82),
		.IN_PKT_BURST_SIZE_H           (85),
		.IN_PKT_BURST_SIZE_L           (83),
		.IN_PKT_RESPONSE_STATUS_H      (109),
		.IN_PKT_RESPONSE_STATUS_L      (108),
		.IN_PKT_TRANS_EXCLUSIVE        (72),
		.IN_PKT_BURST_TYPE_H           (87),
		.IN_PKT_BURST_TYPE_L           (86),
		.IN_PKT_ORI_BURST_SIZE_L       (110),
		.IN_PKT_ORI_BURST_SIZE_H       (112),
		.IN_ST_DATA_W                  (113),
		.OUT_PKT_ADDR_H                (174),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (189),
		.OUT_PKT_BYTE_CNT_L            (181),
		.OUT_PKT_TRANS_COMPRESSED_READ (175),
		.OUT_PKT_BURST_SIZE_H          (193),
		.OUT_PKT_BURST_SIZE_L          (191),
		.OUT_PKT_RESPONSE_STATUS_H     (217),
		.OUT_PKT_RESPONSE_STATUS_L     (216),
		.OUT_PKT_TRANS_EXCLUSIVE       (180),
		.OUT_PKT_BURST_TYPE_H          (195),
		.OUT_PKT_BURST_TYPE_L          (194),
		.OUT_PKT_ORI_BURST_SIZE_L      (218),
		.OUT_PKT_ORI_BURST_SIZE_H      (220),
		.OUT_ST_DATA_W                 (221),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                         //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.in_valid             (cmd_demux_src3_valid),                                                                  //      sink.valid
		.in_channel           (cmd_demux_src3_channel),                                                                //          .channel
		.in_startofpacket     (cmd_demux_src3_startofpacket),                                                          //          .startofpacket
		.in_endofpacket       (cmd_demux_src3_endofpacket),                                                            //          .endofpacket
		.in_ready             (cmd_demux_src3_ready),                                                                  //          .ready
		.in_data              (cmd_demux_src3_data),                                                                   //          .data
		.out_endofpacket      (mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (mm_bridge_0_m0_to_sgdma_from_fft_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (66),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (81),
		.IN_PKT_BYTE_CNT_L             (73),
		.IN_PKT_TRANS_COMPRESSED_READ  (67),
		.IN_PKT_TRANS_WRITE            (69),
		.IN_PKT_BURSTWRAP_H            (82),
		.IN_PKT_BURSTWRAP_L            (82),
		.IN_PKT_BURST_SIZE_H           (85),
		.IN_PKT_BURST_SIZE_L           (83),
		.IN_PKT_RESPONSE_STATUS_H      (109),
		.IN_PKT_RESPONSE_STATUS_L      (108),
		.IN_PKT_TRANS_EXCLUSIVE        (72),
		.IN_PKT_BURST_TYPE_H           (87),
		.IN_PKT_BURST_TYPE_L           (86),
		.IN_PKT_ORI_BURST_SIZE_L       (110),
		.IN_PKT_ORI_BURST_SIZE_H       (112),
		.IN_ST_DATA_W                  (113),
		.OUT_PKT_ADDR_H                (174),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (189),
		.OUT_PKT_BYTE_CNT_L            (181),
		.OUT_PKT_TRANS_COMPRESSED_READ (175),
		.OUT_PKT_BURST_SIZE_H          (193),
		.OUT_PKT_BURST_SIZE_L          (191),
		.OUT_PKT_RESPONSE_STATUS_H     (217),
		.OUT_PKT_RESPONSE_STATUS_L     (216),
		.OUT_PKT_TRANS_EXCLUSIVE       (180),
		.OUT_PKT_BURST_TYPE_H          (195),
		.OUT_PKT_BURST_TYPE_L          (194),
		.OUT_PKT_ORI_BURST_SIZE_L      (218),
		.OUT_PKT_ORI_BURST_SIZE_H      (220),
		.OUT_ST_DATA_W                 (221),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                       //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.in_valid             (cmd_demux_src4_valid),                                                                //      sink.valid
		.in_channel           (cmd_demux_src4_channel),                                                              //          .channel
		.in_startofpacket     (cmd_demux_src4_startofpacket),                                                        //          .startofpacket
		.in_endofpacket       (cmd_demux_src4_endofpacket),                                                          //          .endofpacket
		.in_ready             (cmd_demux_src4_ready),                                                                //          .ready
		.in_data              (cmd_demux_src4_data),                                                                 //          .data
		.out_endofpacket      (mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (mm_bridge_0_m0_to_sgdma_to_fft_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (66),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (81),
		.IN_PKT_BYTE_CNT_L             (73),
		.IN_PKT_TRANS_COMPRESSED_READ  (67),
		.IN_PKT_TRANS_WRITE            (69),
		.IN_PKT_BURSTWRAP_H            (82),
		.IN_PKT_BURSTWRAP_L            (82),
		.IN_PKT_BURST_SIZE_H           (85),
		.IN_PKT_BURST_SIZE_L           (83),
		.IN_PKT_RESPONSE_STATUS_H      (109),
		.IN_PKT_RESPONSE_STATUS_L      (108),
		.IN_PKT_TRANS_EXCLUSIVE        (72),
		.IN_PKT_BURST_TYPE_H           (87),
		.IN_PKT_BURST_TYPE_L           (86),
		.IN_PKT_ORI_BURST_SIZE_L       (110),
		.IN_PKT_ORI_BURST_SIZE_H       (112),
		.IN_ST_DATA_W                  (113),
		.OUT_PKT_ADDR_H                (174),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (189),
		.OUT_PKT_BYTE_CNT_L            (181),
		.OUT_PKT_TRANS_COMPRESSED_READ (175),
		.OUT_PKT_BURST_SIZE_H          (193),
		.OUT_PKT_BURST_SIZE_L          (191),
		.OUT_PKT_RESPONSE_STATUS_H     (217),
		.OUT_PKT_RESPONSE_STATUS_L     (216),
		.OUT_PKT_TRANS_EXCLUSIVE       (180),
		.OUT_PKT_BURST_TYPE_H          (195),
		.OUT_PKT_BURST_TYPE_L          (194),
		.OUT_PKT_ORI_BURST_SIZE_L      (218),
		.OUT_PKT_ORI_BURST_SIZE_H      (220),
		.OUT_ST_DATA_W                 (221),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                         //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.in_valid             (cmd_demux_src5_valid),                                                                  //      sink.valid
		.in_channel           (cmd_demux_src5_channel),                                                                //          .channel
		.in_startofpacket     (cmd_demux_src5_startofpacket),                                                          //          .startofpacket
		.in_endofpacket       (cmd_demux_src5_endofpacket),                                                            //          .endofpacket
		.in_ready             (cmd_demux_src5_ready),                                                                  //          .ready
		.in_data              (cmd_demux_src5_data),                                                                   //          .data
		.out_endofpacket      (mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (mm_bridge_0_m0_to_sgdma_from_ram_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (66),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (81),
		.IN_PKT_BYTE_CNT_L             (73),
		.IN_PKT_TRANS_COMPRESSED_READ  (67),
		.IN_PKT_TRANS_WRITE            (69),
		.IN_PKT_BURSTWRAP_H            (82),
		.IN_PKT_BURSTWRAP_L            (82),
		.IN_PKT_BURST_SIZE_H           (85),
		.IN_PKT_BURST_SIZE_L           (83),
		.IN_PKT_RESPONSE_STATUS_H      (109),
		.IN_PKT_RESPONSE_STATUS_L      (108),
		.IN_PKT_TRANS_EXCLUSIVE        (72),
		.IN_PKT_BURST_TYPE_H           (87),
		.IN_PKT_BURST_TYPE_L           (86),
		.IN_PKT_ORI_BURST_SIZE_L       (110),
		.IN_PKT_ORI_BURST_SIZE_H       (112),
		.IN_ST_DATA_W                  (113),
		.OUT_PKT_ADDR_H                (102),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (117),
		.OUT_PKT_BYTE_CNT_L            (109),
		.OUT_PKT_TRANS_COMPRESSED_READ (103),
		.OUT_PKT_BURST_SIZE_H          (121),
		.OUT_PKT_BURST_SIZE_L          (119),
		.OUT_PKT_RESPONSE_STATUS_H     (145),
		.OUT_PKT_RESPONSE_STATUS_L     (144),
		.OUT_PKT_TRANS_EXCLUSIVE       (108),
		.OUT_PKT_BURST_TYPE_H          (123),
		.OUT_PKT_BURST_TYPE_L          (122),
		.OUT_PKT_ORI_BURST_SIZE_L      (146),
		.OUT_PKT_ORI_BURST_SIZE_H      (148),
		.OUT_ST_DATA_W                 (149),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) mm_bridge_0_m0_to_data_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                 //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_valid             (cmd_demux_src7_valid),                                          //      sink.valid
		.in_channel           (cmd_demux_src7_channel),                                        //          .channel
		.in_startofpacket     (cmd_demux_src7_startofpacket),                                  //          .startofpacket
		.in_endofpacket       (cmd_demux_src7_endofpacket),                                    //          .endofpacket
		.in_ready             (cmd_demux_src7_ready),                                          //          .ready
		.in_data              (cmd_demux_src7_data),                                           //          .data
		.out_endofpacket      (mm_bridge_0_m0_to_data_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (mm_bridge_0_m0_to_data_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (mm_bridge_0_m0_to_data_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (mm_bridge_0_m0_to_data_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (mm_bridge_0_m0_to_data_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (mm_bridge_0_m0_to_data_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (66),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (81),
		.IN_PKT_BYTE_CNT_L             (73),
		.IN_PKT_TRANS_COMPRESSED_READ  (67),
		.IN_PKT_TRANS_WRITE            (69),
		.IN_PKT_BURSTWRAP_H            (82),
		.IN_PKT_BURSTWRAP_L            (82),
		.IN_PKT_BURST_SIZE_H           (85),
		.IN_PKT_BURST_SIZE_L           (83),
		.IN_PKT_RESPONSE_STATUS_H      (109),
		.IN_PKT_RESPONSE_STATUS_L      (108),
		.IN_PKT_TRANS_EXCLUSIVE        (72),
		.IN_PKT_BURST_TYPE_H           (87),
		.IN_PKT_BURST_TYPE_L           (86),
		.IN_PKT_ORI_BURST_SIZE_L       (110),
		.IN_PKT_ORI_BURST_SIZE_H       (112),
		.IN_ST_DATA_W                  (113),
		.OUT_PKT_ADDR_H                (102),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (117),
		.OUT_PKT_BYTE_CNT_L            (109),
		.OUT_PKT_TRANS_COMPRESSED_READ (103),
		.OUT_PKT_BURST_SIZE_H          (121),
		.OUT_PKT_BURST_SIZE_L          (119),
		.OUT_PKT_RESPONSE_STATUS_H     (145),
		.OUT_PKT_RESPONSE_STATUS_L     (144),
		.OUT_PKT_TRANS_EXCLUSIVE       (108),
		.OUT_PKT_BURST_TYPE_H          (123),
		.OUT_PKT_BURST_TYPE_L          (122),
		.OUT_PKT_ORI_BURST_SIZE_L      (146),
		.OUT_PKT_ORI_BURST_SIZE_H      (148),
		.OUT_ST_DATA_W                 (149),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                       //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_valid             (cmd_demux_001_src0_valid),                                            //      sink.valid
		.in_channel           (cmd_demux_001_src0_channel),                                          //          .channel
		.in_startofpacket     (cmd_demux_001_src0_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src0_endofpacket),                                      //          .endofpacket
		.in_ready             (cmd_demux_001_src0_ready),                                            //          .ready
		.in_data              (cmd_demux_001_src0_data),                                             //          .data
		.out_endofpacket      (sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_to_fft_mm_read_to_data_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (66),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (81),
		.IN_PKT_BYTE_CNT_L             (73),
		.IN_PKT_TRANS_COMPRESSED_READ  (67),
		.IN_PKT_TRANS_WRITE            (69),
		.IN_PKT_BURSTWRAP_H            (82),
		.IN_PKT_BURSTWRAP_L            (82),
		.IN_PKT_BURST_SIZE_H           (85),
		.IN_PKT_BURST_SIZE_L           (83),
		.IN_PKT_RESPONSE_STATUS_H      (109),
		.IN_PKT_RESPONSE_STATUS_L      (108),
		.IN_PKT_TRANS_EXCLUSIVE        (72),
		.IN_PKT_BURST_TYPE_H           (87),
		.IN_PKT_BURST_TYPE_L           (86),
		.IN_PKT_ORI_BURST_SIZE_L       (110),
		.IN_PKT_ORI_BURST_SIZE_H       (112),
		.IN_ST_DATA_W                  (113),
		.OUT_PKT_ADDR_H                (102),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (117),
		.OUT_PKT_BYTE_CNT_L            (109),
		.OUT_PKT_TRANS_COMPRESSED_READ (103),
		.OUT_PKT_BURST_SIZE_H          (121),
		.OUT_PKT_BURST_SIZE_L          (119),
		.OUT_PKT_RESPONSE_STATUS_H     (145),
		.OUT_PKT_RESPONSE_STATUS_L     (144),
		.OUT_PKT_TRANS_EXCLUSIVE       (108),
		.OUT_PKT_BURST_TYPE_H          (123),
		.OUT_PKT_BURST_TYPE_L          (122),
		.OUT_PKT_ORI_BURST_SIZE_L      (146),
		.OUT_PKT_ORI_BURST_SIZE_H      (148),
		.OUT_ST_DATA_W                 (149),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_to_fft_mm_read_to_ddr_s0_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                      //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_valid             (cmd_demux_001_src1_valid),                                           //      sink.valid
		.in_channel           (cmd_demux_001_src1_channel),                                         //          .channel
		.in_startofpacket     (cmd_demux_001_src1_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src1_endofpacket),                                     //          .endofpacket
		.in_ready             (cmd_demux_001_src1_ready),                                           //          .ready
		.in_data              (cmd_demux_001_src1_data),                                            //          .data
		.out_endofpacket      (sgdma_to_fft_mm_read_to_ddr_s0_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_to_fft_mm_read_to_ddr_s0_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_to_fft_mm_read_to_ddr_s0_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_to_fft_mm_read_to_ddr_s0_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_to_fft_mm_read_to_ddr_s0_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_to_fft_mm_read_to_ddr_s0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (174),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (189),
		.IN_PKT_BYTE_CNT_L             (181),
		.IN_PKT_TRANS_COMPRESSED_READ  (175),
		.IN_PKT_TRANS_WRITE            (177),
		.IN_PKT_BURSTWRAP_H            (190),
		.IN_PKT_BURSTWRAP_L            (190),
		.IN_PKT_BURST_SIZE_H           (193),
		.IN_PKT_BURST_SIZE_L           (191),
		.IN_PKT_RESPONSE_STATUS_H      (217),
		.IN_PKT_RESPONSE_STATUS_L      (216),
		.IN_PKT_TRANS_EXCLUSIVE        (180),
		.IN_PKT_BURST_TYPE_H           (195),
		.IN_PKT_BURST_TYPE_L           (194),
		.IN_PKT_ORI_BURST_SIZE_L       (218),
		.IN_PKT_ORI_BURST_SIZE_H       (220),
		.IN_ST_DATA_W                  (221),
		.OUT_PKT_ADDR_H                (66),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (81),
		.OUT_PKT_BYTE_CNT_L            (73),
		.OUT_PKT_TRANS_COMPRESSED_READ (67),
		.OUT_PKT_BURST_SIZE_H          (85),
		.OUT_PKT_BURST_SIZE_L          (83),
		.OUT_PKT_RESPONSE_STATUS_H     (109),
		.OUT_PKT_RESPONSE_STATUS_L     (108),
		.OUT_PKT_TRANS_EXCLUSIVE       (72),
		.OUT_PKT_BURST_TYPE_H          (87),
		.OUT_PKT_BURST_TYPE_L          (86),
		.OUT_PKT_ORI_BURST_SIZE_L      (110),
		.OUT_PKT_ORI_BURST_SIZE_H      (112),
		.OUT_ST_DATA_W                 (113),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                         //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.in_valid             (rsp_demux_003_src0_valid),                                                              //      sink.valid
		.in_channel           (rsp_demux_003_src0_channel),                                                            //          .channel
		.in_startofpacket     (rsp_demux_003_src0_startofpacket),                                                      //          .startofpacket
		.in_endofpacket       (rsp_demux_003_src0_endofpacket),                                                        //          .endofpacket
		.in_ready             (rsp_demux_003_src0_ready),                                                              //          .ready
		.in_data              (rsp_demux_003_src0_data),                                                               //          .data
		.out_endofpacket      (sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_from_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (174),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (189),
		.IN_PKT_BYTE_CNT_L             (181),
		.IN_PKT_TRANS_COMPRESSED_READ  (175),
		.IN_PKT_TRANS_WRITE            (177),
		.IN_PKT_BURSTWRAP_H            (190),
		.IN_PKT_BURSTWRAP_L            (190),
		.IN_PKT_BURST_SIZE_H           (193),
		.IN_PKT_BURST_SIZE_L           (191),
		.IN_PKT_RESPONSE_STATUS_H      (217),
		.IN_PKT_RESPONSE_STATUS_L      (216),
		.IN_PKT_TRANS_EXCLUSIVE        (180),
		.IN_PKT_BURST_TYPE_H           (195),
		.IN_PKT_BURST_TYPE_L           (194),
		.IN_PKT_ORI_BURST_SIZE_L       (218),
		.IN_PKT_ORI_BURST_SIZE_H       (220),
		.IN_ST_DATA_W                  (221),
		.OUT_PKT_ADDR_H                (66),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (81),
		.OUT_PKT_BYTE_CNT_L            (73),
		.OUT_PKT_TRANS_COMPRESSED_READ (67),
		.OUT_PKT_BURST_SIZE_H          (85),
		.OUT_PKT_BURST_SIZE_L          (83),
		.OUT_PKT_RESPONSE_STATUS_H     (109),
		.OUT_PKT_RESPONSE_STATUS_L     (108),
		.OUT_PKT_TRANS_EXCLUSIVE       (72),
		.OUT_PKT_BURST_TYPE_H          (87),
		.OUT_PKT_BURST_TYPE_L          (86),
		.OUT_PKT_ORI_BURST_SIZE_L      (110),
		.OUT_PKT_ORI_BURST_SIZE_H      (112),
		.OUT_ST_DATA_W                 (113),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                       //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.in_valid             (rsp_demux_004_src0_valid),                                                            //      sink.valid
		.in_channel           (rsp_demux_004_src0_channel),                                                          //          .channel
		.in_startofpacket     (rsp_demux_004_src0_startofpacket),                                                    //          .startofpacket
		.in_endofpacket       (rsp_demux_004_src0_endofpacket),                                                      //          .endofpacket
		.in_ready             (rsp_demux_004_src0_ready),                                                            //          .ready
		.in_data              (rsp_demux_004_src0_data),                                                             //          .data
		.out_endofpacket      (sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_to_fft_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (174),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (189),
		.IN_PKT_BYTE_CNT_L             (181),
		.IN_PKT_TRANS_COMPRESSED_READ  (175),
		.IN_PKT_TRANS_WRITE            (177),
		.IN_PKT_BURSTWRAP_H            (190),
		.IN_PKT_BURSTWRAP_L            (190),
		.IN_PKT_BURST_SIZE_H           (193),
		.IN_PKT_BURST_SIZE_L           (191),
		.IN_PKT_RESPONSE_STATUS_H      (217),
		.IN_PKT_RESPONSE_STATUS_L      (216),
		.IN_PKT_TRANS_EXCLUSIVE        (180),
		.IN_PKT_BURST_TYPE_H           (195),
		.IN_PKT_BURST_TYPE_L           (194),
		.IN_PKT_ORI_BURST_SIZE_L       (218),
		.IN_PKT_ORI_BURST_SIZE_H       (220),
		.IN_ST_DATA_W                  (221),
		.OUT_PKT_ADDR_H                (66),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (81),
		.OUT_PKT_BYTE_CNT_L            (73),
		.OUT_PKT_TRANS_COMPRESSED_READ (67),
		.OUT_PKT_BURST_SIZE_H          (85),
		.OUT_PKT_BURST_SIZE_L          (83),
		.OUT_PKT_RESPONSE_STATUS_H     (109),
		.OUT_PKT_RESPONSE_STATUS_L     (108),
		.OUT_PKT_TRANS_EXCLUSIVE       (72),
		.OUT_PKT_BURST_TYPE_H          (87),
		.OUT_PKT_BURST_TYPE_L          (86),
		.OUT_PKT_ORI_BURST_SIZE_L      (110),
		.OUT_PKT_ORI_BURST_SIZE_H      (112),
		.OUT_ST_DATA_W                 (113),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                         //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                         // clk_reset.reset
		.in_valid             (rsp_demux_005_src0_valid),                                                              //      sink.valid
		.in_channel           (rsp_demux_005_src0_channel),                                                            //          .channel
		.in_startofpacket     (rsp_demux_005_src0_startofpacket),                                                      //          .startofpacket
		.in_endofpacket       (rsp_demux_005_src0_endofpacket),                                                        //          .endofpacket
		.in_ready             (rsp_demux_005_src0_ready),                                                              //          .ready
		.in_data              (rsp_demux_005_src0_data),                                                               //          .data
		.out_endofpacket      (sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sgdma_from_ram_descriptor_slave_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (102),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (117),
		.IN_PKT_BYTE_CNT_L             (109),
		.IN_PKT_TRANS_COMPRESSED_READ  (103),
		.IN_PKT_TRANS_WRITE            (105),
		.IN_PKT_BURSTWRAP_H            (118),
		.IN_PKT_BURSTWRAP_L            (118),
		.IN_PKT_BURST_SIZE_H           (121),
		.IN_PKT_BURST_SIZE_L           (119),
		.IN_PKT_RESPONSE_STATUS_H      (145),
		.IN_PKT_RESPONSE_STATUS_L      (144),
		.IN_PKT_TRANS_EXCLUSIVE        (108),
		.IN_PKT_BURST_TYPE_H           (123),
		.IN_PKT_BURST_TYPE_L           (122),
		.IN_PKT_ORI_BURST_SIZE_L       (146),
		.IN_PKT_ORI_BURST_SIZE_H       (148),
		.IN_ST_DATA_W                  (149),
		.OUT_PKT_ADDR_H                (66),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (81),
		.OUT_PKT_BYTE_CNT_L            (73),
		.OUT_PKT_TRANS_COMPRESSED_READ (67),
		.OUT_PKT_BURST_SIZE_H          (85),
		.OUT_PKT_BURST_SIZE_L          (83),
		.OUT_PKT_RESPONSE_STATUS_H     (109),
		.OUT_PKT_RESPONSE_STATUS_L     (108),
		.OUT_PKT_TRANS_EXCLUSIVE       (72),
		.OUT_PKT_BURST_TYPE_H          (87),
		.OUT_PKT_BURST_TYPE_L          (86),
		.OUT_PKT_ORI_BURST_SIZE_L      (110),
		.OUT_PKT_ORI_BURST_SIZE_H      (112),
		.OUT_ST_DATA_W                 (113),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) data_s1_to_mm_bridge_0_m0_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                 //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_valid             (rsp_demux_007_src0_valid),                                      //      sink.valid
		.in_channel           (rsp_demux_007_src0_channel),                                    //          .channel
		.in_startofpacket     (rsp_demux_007_src0_startofpacket),                              //          .startofpacket
		.in_endofpacket       (rsp_demux_007_src0_endofpacket),                                //          .endofpacket
		.in_ready             (rsp_demux_007_src0_ready),                                      //          .ready
		.in_data              (rsp_demux_007_src0_data),                                       //          .data
		.out_endofpacket      (data_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (data_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (data_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (data_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (data_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (data_s1_to_mm_bridge_0_m0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (102),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (117),
		.IN_PKT_BYTE_CNT_L             (109),
		.IN_PKT_TRANS_COMPRESSED_READ  (103),
		.IN_PKT_TRANS_WRITE            (105),
		.IN_PKT_BURSTWRAP_H            (118),
		.IN_PKT_BURSTWRAP_L            (118),
		.IN_PKT_BURST_SIZE_H           (121),
		.IN_PKT_BURST_SIZE_L           (119),
		.IN_PKT_RESPONSE_STATUS_H      (145),
		.IN_PKT_RESPONSE_STATUS_L      (144),
		.IN_PKT_TRANS_EXCLUSIVE        (108),
		.IN_PKT_BURST_TYPE_H           (123),
		.IN_PKT_BURST_TYPE_L           (122),
		.IN_PKT_ORI_BURST_SIZE_L       (146),
		.IN_PKT_ORI_BURST_SIZE_H       (148),
		.IN_ST_DATA_W                  (149),
		.OUT_PKT_ADDR_H                (66),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (81),
		.OUT_PKT_BYTE_CNT_L            (73),
		.OUT_PKT_TRANS_COMPRESSED_READ (67),
		.OUT_PKT_BURST_SIZE_H          (85),
		.OUT_PKT_BURST_SIZE_L          (83),
		.OUT_PKT_RESPONSE_STATUS_H     (109),
		.OUT_PKT_RESPONSE_STATUS_L     (108),
		.OUT_PKT_TRANS_EXCLUSIVE       (72),
		.OUT_PKT_BURST_TYPE_H          (87),
		.OUT_PKT_BURST_TYPE_L          (86),
		.OUT_PKT_ORI_BURST_SIZE_L      (110),
		.OUT_PKT_ORI_BURST_SIZE_H      (112),
		.OUT_ST_DATA_W                 (113),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                       //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_valid             (rsp_demux_007_src1_valid),                                            //      sink.valid
		.in_channel           (rsp_demux_007_src1_channel),                                          //          .channel
		.in_startofpacket     (rsp_demux_007_src1_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (rsp_demux_007_src1_endofpacket),                                      //          .endofpacket
		.in_ready             (rsp_demux_007_src1_ready),                                            //          .ready
		.in_data              (rsp_demux_007_src1_data),                                             //          .data
		.out_endofpacket      (data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_data),          //          .data
		.out_channel          (data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (data_s1_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (102),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (117),
		.IN_PKT_BYTE_CNT_L             (109),
		.IN_PKT_TRANS_COMPRESSED_READ  (103),
		.IN_PKT_TRANS_WRITE            (105),
		.IN_PKT_BURSTWRAP_H            (118),
		.IN_PKT_BURSTWRAP_L            (118),
		.IN_PKT_BURST_SIZE_H           (121),
		.IN_PKT_BURST_SIZE_L           (119),
		.IN_PKT_RESPONSE_STATUS_H      (145),
		.IN_PKT_RESPONSE_STATUS_L      (144),
		.IN_PKT_TRANS_EXCLUSIVE        (108),
		.IN_PKT_BURST_TYPE_H           (123),
		.IN_PKT_BURST_TYPE_L           (122),
		.IN_PKT_ORI_BURST_SIZE_L       (146),
		.IN_PKT_ORI_BURST_SIZE_H       (148),
		.IN_ST_DATA_W                  (149),
		.OUT_PKT_ADDR_H                (66),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (81),
		.OUT_PKT_BYTE_CNT_L            (73),
		.OUT_PKT_TRANS_COMPRESSED_READ (67),
		.OUT_PKT_BURST_SIZE_H          (85),
		.OUT_PKT_BURST_SIZE_L          (83),
		.OUT_PKT_RESPONSE_STATUS_H     (109),
		.OUT_PKT_RESPONSE_STATUS_L     (108),
		.OUT_PKT_TRANS_EXCLUSIVE       (72),
		.OUT_PKT_BURST_TYPE_H          (87),
		.OUT_PKT_BURST_TYPE_L          (86),
		.OUT_PKT_ORI_BURST_SIZE_L      (110),
		.OUT_PKT_ORI_BURST_SIZE_H      (112),
		.OUT_ST_DATA_W                 (113),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ddr_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                      //       clk.clk
		.reset                (mm_bridge_0_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_valid             (rsp_demux_008_src0_valid),                                           //      sink.valid
		.in_channel           (rsp_demux_008_src0_channel),                                         //          .channel
		.in_startofpacket     (rsp_demux_008_src0_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (rsp_demux_008_src0_endofpacket),                                     //          .endofpacket
		.in_ready             (rsp_demux_008_src0_ready),                                           //          .ready
		.in_data              (rsp_demux_008_src0_data),                                            //          .data
		.out_endofpacket      (ddr_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ddr_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_data),          //          .data
		.out_channel          (ddr_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (ddr_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (ddr_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ddr_s0_to_sgdma_to_fft_mm_read_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (149),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (9),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) pipeline_stage (
		.clk               (clk_0_clk_clk),                                 //       cr0.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_008_src_ready),                         //     sink0.ready
		.in_valid          (cmd_mux_008_src_valid),                         //          .valid
		.in_startofpacket  (cmd_mux_008_src_startofpacket),                 //          .startofpacket
		.in_endofpacket    (cmd_mux_008_src_endofpacket),                   //          .endofpacket
		.in_data           (cmd_mux_008_src_data),                          //          .data
		.in_channel        (cmd_mux_008_src_channel),                       //          .channel
		.out_ready         (pipeline_stage_source0_ready),                  //   source0.ready
		.out_valid         (pipeline_stage_source0_valid),                  //          .valid
		.out_startofpacket (pipeline_stage_source0_startofpacket),          //          .startofpacket
		.out_endofpacket   (pipeline_stage_source0_endofpacket),            //          .endofpacket
		.out_data          (pipeline_stage_source0_data),                   //          .data
		.out_channel       (pipeline_stage_source0_channel),                //          .channel
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.out_error         (),                                              // (terminated)
		.in_error          (1'b0)                                           // (terminated)
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sgdma_from_fft_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sgdma_from_fft_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sgdma_from_fft_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                  //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sgdma_to_fft_csr_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (sgdma_to_fft_csr_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (sgdma_to_fft_csr_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)              //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sgdma_from_ram_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sgdma_from_ram_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sgdma_from_ram_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)              //         .error
	);

	soc_system_mm_interconnect_6_avalon_st_adapter #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset),              // in_rst_0.reset
		.in_0_data      (sgdma_from_fft_descriptor_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sgdma_from_fft_descriptor_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sgdma_from_fft_descriptor_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                           //         .error
	);

	soc_system_mm_interconnect_6_avalon_st_adapter #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (sgdma_to_fft_descriptor_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sgdma_to_fft_descriptor_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sgdma_to_fft_descriptor_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                         //         .error
	);

	soc_system_mm_interconnect_6_avalon_st_adapter #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset),              // in_rst_0.reset
		.in_0_data      (sgdma_from_ram_descriptor_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sgdma_from_ram_descriptor_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sgdma_from_ram_descriptor_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                           //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (fft_stadapter_0_s0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (fft_stadapter_0_s0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (fft_stadapter_0_s0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)              //         .error
	);

	soc_system_mm_interconnect_3_avalon_st_adapter_003 #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (data_s1_agent_rdata_fifo_out_data),             //     in_0.data
		.in_0_valid     (data_s1_agent_rdata_fifo_out_valid),            //         .valid
		.in_0_ready     (data_s1_agent_rdata_fifo_out_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)              //         .error
	);

	soc_system_mm_interconnect_3_avalon_st_adapter_003 #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_0_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (mm_bridge_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ddr_s0_agent_rdata_fifo_out_data),              //     in_0.data
		.in_0_valid     (ddr_s0_agent_rdata_fifo_out_valid),             //         .valid
		.in_0_ready     (ddr_s0_agent_rdata_fifo_out_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)              //         .error
	);

endmodule
