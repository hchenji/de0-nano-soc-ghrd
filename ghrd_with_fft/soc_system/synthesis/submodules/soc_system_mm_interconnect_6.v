// soc_system_mm_interconnect_6.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 20.1 720

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_6 (
		input  wire         hps_0_h2f_user0_clock_clk,                        //                      hps_0_h2f_user0_clock.clk
		input  wire         fft_ddr_bridge_reset_reset_bridge_in_reset_reset, // fft_ddr_bridge_reset_reset_bridge_in_reset.reset
		input  wire         fft_sub_reset_reset_bridge_in_reset_reset,        //        fft_sub_reset_reset_bridge_in_reset.reset
		input  wire [29:0]  fft_sub_to_ddr_address,                           //                             fft_sub_to_ddr.address
		output wire         fft_sub_to_ddr_waitrequest,                       //                                           .waitrequest
		input  wire [5:0]   fft_sub_to_ddr_burstcount,                        //                                           .burstcount
		input  wire [7:0]   fft_sub_to_ddr_byteenable,                        //                                           .byteenable
		input  wire         fft_sub_to_ddr_read,                              //                                           .read
		output wire [63:0]  fft_sub_to_ddr_readdata,                          //                                           .readdata
		output wire         fft_sub_to_ddr_readdatavalid,                     //                                           .readdatavalid
		input  wire         fft_sub_to_ddr_write,                             //                                           .write
		input  wire [63:0]  fft_sub_to_ddr_writedata,                         //                                           .writedata
		input  wire         fft_sub_to_ddr_debugaccess,                       //                                           .debugaccess
		output wire [25:0]  fft_ddr_bridge_windowed_slave_address,            //              fft_ddr_bridge_windowed_slave.address
		output wire         fft_ddr_bridge_windowed_slave_write,              //                                           .write
		output wire         fft_ddr_bridge_windowed_slave_read,               //                                           .read
		input  wire [127:0] fft_ddr_bridge_windowed_slave_readdata,           //                                           .readdata
		output wire [127:0] fft_ddr_bridge_windowed_slave_writedata,          //                                           .writedata
		output wire [4:0]   fft_ddr_bridge_windowed_slave_burstcount,         //                                           .burstcount
		output wire [15:0]  fft_ddr_bridge_windowed_slave_byteenable,         //                                           .byteenable
		input  wire         fft_ddr_bridge_windowed_slave_readdatavalid,      //                                           .readdatavalid
		input  wire         fft_ddr_bridge_windowed_slave_waitrequest         //                                           .waitrequest
	);

	wire          fft_sub_to_ddr_translator_avalon_universal_master_0_waitrequest;   // fft_sub_to_ddr_agent:av_waitrequest -> fft_sub_to_ddr_translator:uav_waitrequest
	wire   [63:0] fft_sub_to_ddr_translator_avalon_universal_master_0_readdata;      // fft_sub_to_ddr_agent:av_readdata -> fft_sub_to_ddr_translator:uav_readdata
	wire          fft_sub_to_ddr_translator_avalon_universal_master_0_debugaccess;   // fft_sub_to_ddr_translator:uav_debugaccess -> fft_sub_to_ddr_agent:av_debugaccess
	wire   [29:0] fft_sub_to_ddr_translator_avalon_universal_master_0_address;       // fft_sub_to_ddr_translator:uav_address -> fft_sub_to_ddr_agent:av_address
	wire          fft_sub_to_ddr_translator_avalon_universal_master_0_read;          // fft_sub_to_ddr_translator:uav_read -> fft_sub_to_ddr_agent:av_read
	wire    [7:0] fft_sub_to_ddr_translator_avalon_universal_master_0_byteenable;    // fft_sub_to_ddr_translator:uav_byteenable -> fft_sub_to_ddr_agent:av_byteenable
	wire          fft_sub_to_ddr_translator_avalon_universal_master_0_readdatavalid; // fft_sub_to_ddr_agent:av_readdatavalid -> fft_sub_to_ddr_translator:uav_readdatavalid
	wire          fft_sub_to_ddr_translator_avalon_universal_master_0_lock;          // fft_sub_to_ddr_translator:uav_lock -> fft_sub_to_ddr_agent:av_lock
	wire          fft_sub_to_ddr_translator_avalon_universal_master_0_write;         // fft_sub_to_ddr_translator:uav_write -> fft_sub_to_ddr_agent:av_write
	wire   [63:0] fft_sub_to_ddr_translator_avalon_universal_master_0_writedata;     // fft_sub_to_ddr_translator:uav_writedata -> fft_sub_to_ddr_agent:av_writedata
	wire    [8:0] fft_sub_to_ddr_translator_avalon_universal_master_0_burstcount;    // fft_sub_to_ddr_translator:uav_burstcount -> fft_sub_to_ddr_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                 // rsp_mux:src_valid -> fft_sub_to_ddr_agent:rp_valid
	wire  [141:0] rsp_mux_src_data;                                                  // rsp_mux:src_data -> fft_sub_to_ddr_agent:rp_data
	wire          rsp_mux_src_ready;                                                 // fft_sub_to_ddr_agent:rp_ready -> rsp_mux:src_ready
	wire    [0:0] rsp_mux_src_channel;                                               // rsp_mux:src_channel -> fft_sub_to_ddr_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                         // rsp_mux:src_startofpacket -> fft_sub_to_ddr_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                           // rsp_mux:src_endofpacket -> fft_sub_to_ddr_agent:rp_endofpacket
	wire  [127:0] fft_ddr_bridge_windowed_slave_agent_m0_readdata;                   // fft_ddr_bridge_windowed_slave_translator:uav_readdata -> fft_ddr_bridge_windowed_slave_agent:m0_readdata
	wire          fft_ddr_bridge_windowed_slave_agent_m0_waitrequest;                // fft_ddr_bridge_windowed_slave_translator:uav_waitrequest -> fft_ddr_bridge_windowed_slave_agent:m0_waitrequest
	wire          fft_ddr_bridge_windowed_slave_agent_m0_debugaccess;                // fft_ddr_bridge_windowed_slave_agent:m0_debugaccess -> fft_ddr_bridge_windowed_slave_translator:uav_debugaccess
	wire   [29:0] fft_ddr_bridge_windowed_slave_agent_m0_address;                    // fft_ddr_bridge_windowed_slave_agent:m0_address -> fft_ddr_bridge_windowed_slave_translator:uav_address
	wire   [15:0] fft_ddr_bridge_windowed_slave_agent_m0_byteenable;                 // fft_ddr_bridge_windowed_slave_agent:m0_byteenable -> fft_ddr_bridge_windowed_slave_translator:uav_byteenable
	wire          fft_ddr_bridge_windowed_slave_agent_m0_read;                       // fft_ddr_bridge_windowed_slave_agent:m0_read -> fft_ddr_bridge_windowed_slave_translator:uav_read
	wire          fft_ddr_bridge_windowed_slave_agent_m0_readdatavalid;              // fft_ddr_bridge_windowed_slave_translator:uav_readdatavalid -> fft_ddr_bridge_windowed_slave_agent:m0_readdatavalid
	wire          fft_ddr_bridge_windowed_slave_agent_m0_lock;                       // fft_ddr_bridge_windowed_slave_agent:m0_lock -> fft_ddr_bridge_windowed_slave_translator:uav_lock
	wire  [127:0] fft_ddr_bridge_windowed_slave_agent_m0_writedata;                  // fft_ddr_bridge_windowed_slave_agent:m0_writedata -> fft_ddr_bridge_windowed_slave_translator:uav_writedata
	wire          fft_ddr_bridge_windowed_slave_agent_m0_write;                      // fft_ddr_bridge_windowed_slave_agent:m0_write -> fft_ddr_bridge_windowed_slave_translator:uav_write
	wire    [8:0] fft_ddr_bridge_windowed_slave_agent_m0_burstcount;                 // fft_ddr_bridge_windowed_slave_agent:m0_burstcount -> fft_ddr_bridge_windowed_slave_translator:uav_burstcount
	wire          fft_ddr_bridge_windowed_slave_agent_rf_source_valid;               // fft_ddr_bridge_windowed_slave_agent:rf_source_valid -> fft_ddr_bridge_windowed_slave_agent_rsp_fifo:in_valid
	wire  [214:0] fft_ddr_bridge_windowed_slave_agent_rf_source_data;                // fft_ddr_bridge_windowed_slave_agent:rf_source_data -> fft_ddr_bridge_windowed_slave_agent_rsp_fifo:in_data
	wire          fft_ddr_bridge_windowed_slave_agent_rf_source_ready;               // fft_ddr_bridge_windowed_slave_agent_rsp_fifo:in_ready -> fft_ddr_bridge_windowed_slave_agent:rf_source_ready
	wire          fft_ddr_bridge_windowed_slave_agent_rf_source_startofpacket;       // fft_ddr_bridge_windowed_slave_agent:rf_source_startofpacket -> fft_ddr_bridge_windowed_slave_agent_rsp_fifo:in_startofpacket
	wire          fft_ddr_bridge_windowed_slave_agent_rf_source_endofpacket;         // fft_ddr_bridge_windowed_slave_agent:rf_source_endofpacket -> fft_ddr_bridge_windowed_slave_agent_rsp_fifo:in_endofpacket
	wire          fft_ddr_bridge_windowed_slave_agent_rsp_fifo_out_valid;            // fft_ddr_bridge_windowed_slave_agent_rsp_fifo:out_valid -> fft_ddr_bridge_windowed_slave_agent:rf_sink_valid
	wire  [214:0] fft_ddr_bridge_windowed_slave_agent_rsp_fifo_out_data;             // fft_ddr_bridge_windowed_slave_agent_rsp_fifo:out_data -> fft_ddr_bridge_windowed_slave_agent:rf_sink_data
	wire          fft_ddr_bridge_windowed_slave_agent_rsp_fifo_out_ready;            // fft_ddr_bridge_windowed_slave_agent:rf_sink_ready -> fft_ddr_bridge_windowed_slave_agent_rsp_fifo:out_ready
	wire          fft_ddr_bridge_windowed_slave_agent_rsp_fifo_out_startofpacket;    // fft_ddr_bridge_windowed_slave_agent_rsp_fifo:out_startofpacket -> fft_ddr_bridge_windowed_slave_agent:rf_sink_startofpacket
	wire          fft_ddr_bridge_windowed_slave_agent_rsp_fifo_out_endofpacket;      // fft_ddr_bridge_windowed_slave_agent_rsp_fifo:out_endofpacket -> fft_ddr_bridge_windowed_slave_agent:rf_sink_endofpacket
	wire          fft_ddr_bridge_windowed_slave_agent_rdata_fifo_src_valid;          // fft_ddr_bridge_windowed_slave_agent:rdata_fifo_src_valid -> fft_ddr_bridge_windowed_slave_agent_rdata_fifo:in_valid
	wire  [129:0] fft_ddr_bridge_windowed_slave_agent_rdata_fifo_src_data;           // fft_ddr_bridge_windowed_slave_agent:rdata_fifo_src_data -> fft_ddr_bridge_windowed_slave_agent_rdata_fifo:in_data
	wire          fft_ddr_bridge_windowed_slave_agent_rdata_fifo_src_ready;          // fft_ddr_bridge_windowed_slave_agent_rdata_fifo:in_ready -> fft_ddr_bridge_windowed_slave_agent:rdata_fifo_src_ready
	wire          fft_sub_to_ddr_agent_cp_valid;                                     // fft_sub_to_ddr_agent:cp_valid -> router:sink_valid
	wire  [141:0] fft_sub_to_ddr_agent_cp_data;                                      // fft_sub_to_ddr_agent:cp_data -> router:sink_data
	wire          fft_sub_to_ddr_agent_cp_ready;                                     // router:sink_ready -> fft_sub_to_ddr_agent:cp_ready
	wire          fft_sub_to_ddr_agent_cp_startofpacket;                             // fft_sub_to_ddr_agent:cp_startofpacket -> router:sink_startofpacket
	wire          fft_sub_to_ddr_agent_cp_endofpacket;                               // fft_sub_to_ddr_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                  // router:src_valid -> cmd_demux:sink_valid
	wire  [141:0] router_src_data;                                                   // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                  // cmd_demux:sink_ready -> router:src_ready
	wire    [0:0] router_src_channel;                                                // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                          // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                            // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          fft_ddr_bridge_windowed_slave_agent_rp_valid;                      // fft_ddr_bridge_windowed_slave_agent:rp_valid -> router_001:sink_valid
	wire  [213:0] fft_ddr_bridge_windowed_slave_agent_rp_data;                       // fft_ddr_bridge_windowed_slave_agent:rp_data -> router_001:sink_data
	wire          fft_ddr_bridge_windowed_slave_agent_rp_ready;                      // router_001:sink_ready -> fft_ddr_bridge_windowed_slave_agent:rp_ready
	wire          fft_ddr_bridge_windowed_slave_agent_rp_startofpacket;              // fft_ddr_bridge_windowed_slave_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          fft_ddr_bridge_windowed_slave_agent_rp_endofpacket;                // fft_ddr_bridge_windowed_slave_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          fft_ddr_bridge_windowed_slave_burst_adapter_source0_valid;         // fft_ddr_bridge_windowed_slave_burst_adapter:source0_valid -> fft_ddr_bridge_windowed_slave_agent:cp_valid
	wire  [213:0] fft_ddr_bridge_windowed_slave_burst_adapter_source0_data;          // fft_ddr_bridge_windowed_slave_burst_adapter:source0_data -> fft_ddr_bridge_windowed_slave_agent:cp_data
	wire          fft_ddr_bridge_windowed_slave_burst_adapter_source0_ready;         // fft_ddr_bridge_windowed_slave_agent:cp_ready -> fft_ddr_bridge_windowed_slave_burst_adapter:source0_ready
	wire    [0:0] fft_ddr_bridge_windowed_slave_burst_adapter_source0_channel;       // fft_ddr_bridge_windowed_slave_burst_adapter:source0_channel -> fft_ddr_bridge_windowed_slave_agent:cp_channel
	wire          fft_ddr_bridge_windowed_slave_burst_adapter_source0_startofpacket; // fft_ddr_bridge_windowed_slave_burst_adapter:source0_startofpacket -> fft_ddr_bridge_windowed_slave_agent:cp_startofpacket
	wire          fft_ddr_bridge_windowed_slave_burst_adapter_source0_endofpacket;   // fft_ddr_bridge_windowed_slave_burst_adapter:source0_endofpacket -> fft_ddr_bridge_windowed_slave_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                              // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [141:0] cmd_demux_src0_data;                                               // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                              // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [0:0] cmd_demux_src0_channel;                                            // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                      // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                        // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                              // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [141:0] rsp_demux_src0_data;                                               // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                              // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [0:0] rsp_demux_src0_channel;                                            // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                      // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                        // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          router_001_src_valid;                                              // router_001:src_valid -> fft_ddr_bridge_windowed_slave_rsp_width_adapter:in_valid
	wire  [213:0] router_001_src_data;                                               // router_001:src_data -> fft_ddr_bridge_windowed_slave_rsp_width_adapter:in_data
	wire          router_001_src_ready;                                              // fft_ddr_bridge_windowed_slave_rsp_width_adapter:in_ready -> router_001:src_ready
	wire    [0:0] router_001_src_channel;                                            // router_001:src_channel -> fft_ddr_bridge_windowed_slave_rsp_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                      // router_001:src_startofpacket -> fft_ddr_bridge_windowed_slave_rsp_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                        // router_001:src_endofpacket -> fft_ddr_bridge_windowed_slave_rsp_width_adapter:in_endofpacket
	wire          fft_ddr_bridge_windowed_slave_rsp_width_adapter_src_valid;         // fft_ddr_bridge_windowed_slave_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [141:0] fft_ddr_bridge_windowed_slave_rsp_width_adapter_src_data;          // fft_ddr_bridge_windowed_slave_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          fft_ddr_bridge_windowed_slave_rsp_width_adapter_src_ready;         // rsp_demux:sink_ready -> fft_ddr_bridge_windowed_slave_rsp_width_adapter:out_ready
	wire    [0:0] fft_ddr_bridge_windowed_slave_rsp_width_adapter_src_channel;       // fft_ddr_bridge_windowed_slave_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          fft_ddr_bridge_windowed_slave_rsp_width_adapter_src_startofpacket; // fft_ddr_bridge_windowed_slave_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          fft_ddr_bridge_windowed_slave_rsp_width_adapter_src_endofpacket;   // fft_ddr_bridge_windowed_slave_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                 // cmd_mux:src_valid -> fft_ddr_bridge_windowed_slave_cmd_width_adapter:in_valid
	wire  [141:0] cmd_mux_src_data;                                                  // cmd_mux:src_data -> fft_ddr_bridge_windowed_slave_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                 // fft_ddr_bridge_windowed_slave_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [0:0] cmd_mux_src_channel;                                               // cmd_mux:src_channel -> fft_ddr_bridge_windowed_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                         // cmd_mux:src_startofpacket -> fft_ddr_bridge_windowed_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                           // cmd_mux:src_endofpacket -> fft_ddr_bridge_windowed_slave_cmd_width_adapter:in_endofpacket
	wire          fft_ddr_bridge_windowed_slave_cmd_width_adapter_src_valid;         // fft_ddr_bridge_windowed_slave_cmd_width_adapter:out_valid -> fft_ddr_bridge_windowed_slave_burst_adapter:sink0_valid
	wire  [213:0] fft_ddr_bridge_windowed_slave_cmd_width_adapter_src_data;          // fft_ddr_bridge_windowed_slave_cmd_width_adapter:out_data -> fft_ddr_bridge_windowed_slave_burst_adapter:sink0_data
	wire          fft_ddr_bridge_windowed_slave_cmd_width_adapter_src_ready;         // fft_ddr_bridge_windowed_slave_burst_adapter:sink0_ready -> fft_ddr_bridge_windowed_slave_cmd_width_adapter:out_ready
	wire    [0:0] fft_ddr_bridge_windowed_slave_cmd_width_adapter_src_channel;       // fft_ddr_bridge_windowed_slave_cmd_width_adapter:out_channel -> fft_ddr_bridge_windowed_slave_burst_adapter:sink0_channel
	wire          fft_ddr_bridge_windowed_slave_cmd_width_adapter_src_startofpacket; // fft_ddr_bridge_windowed_slave_cmd_width_adapter:out_startofpacket -> fft_ddr_bridge_windowed_slave_burst_adapter:sink0_startofpacket
	wire          fft_ddr_bridge_windowed_slave_cmd_width_adapter_src_endofpacket;   // fft_ddr_bridge_windowed_slave_cmd_width_adapter:out_endofpacket -> fft_ddr_bridge_windowed_slave_burst_adapter:sink0_endofpacket
	wire          fft_ddr_bridge_windowed_slave_agent_rdata_fifo_out_valid;          // fft_ddr_bridge_windowed_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire  [129:0] fft_ddr_bridge_windowed_slave_agent_rdata_fifo_out_data;           // fft_ddr_bridge_windowed_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          fft_ddr_bridge_windowed_slave_agent_rdata_fifo_out_ready;          // avalon_st_adapter:in_0_ready -> fft_ddr_bridge_windowed_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                     // avalon_st_adapter:out_0_valid -> fft_ddr_bridge_windowed_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_out_0_data;                                      // avalon_st_adapter:out_0_data -> fft_ddr_bridge_windowed_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                     // fft_ddr_bridge_windowed_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                     // avalon_st_adapter:out_0_error -> fft_ddr_bridge_windowed_slave_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (30),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (6),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (30),
		.UAV_BURSTCOUNT_W            (9),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) fft_sub_to_ddr_translator (
		.clk                    (hps_0_h2f_user0_clock_clk),                                         //                       clk.clk
		.reset                  (fft_ddr_bridge_reset_reset_bridge_in_reset_reset),                  //                     reset.reset
		.uav_address            (fft_sub_to_ddr_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (fft_sub_to_ddr_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (fft_sub_to_ddr_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (fft_sub_to_ddr_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (fft_sub_to_ddr_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (fft_sub_to_ddr_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (fft_sub_to_ddr_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (fft_sub_to_ddr_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (fft_sub_to_ddr_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (fft_sub_to_ddr_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (fft_sub_to_ddr_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (fft_sub_to_ddr_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (fft_sub_to_ddr_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (fft_sub_to_ddr_burstcount),                                         //                          .burstcount
		.av_byteenable          (fft_sub_to_ddr_byteenable),                                         //                          .byteenable
		.av_read                (fft_sub_to_ddr_read),                                               //                          .read
		.av_readdata            (fft_sub_to_ddr_readdata),                                           //                          .readdata
		.av_readdatavalid       (fft_sub_to_ddr_readdatavalid),                                      //                          .readdatavalid
		.av_write               (fft_sub_to_ddr_write),                                              //                          .write
		.av_writedata           (fft_sub_to_ddr_writedata),                                          //                          .writedata
		.av_debugaccess         (fft_sub_to_ddr_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                              //               (terminated)
		.av_begintransfer       (1'b0),                                                              //               (terminated)
		.av_chipselect          (1'b0),                                                              //               (terminated)
		.av_lock                (1'b0),                                                              //               (terminated)
		.uav_clken              (),                                                                  //               (terminated)
		.av_clken               (1'b1),                                                              //               (terminated)
		.uav_response           (2'b00),                                                             //               (terminated)
		.av_response            (),                                                                  //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                              //               (terminated)
		.av_writeresponsevalid  ()                                                                   //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (26),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (5),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (9),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fft_ddr_bridge_windowed_slave_translator (
		.clk                    (hps_0_h2f_user0_clock_clk),                            //                      clk.clk
		.reset                  (fft_ddr_bridge_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (fft_ddr_bridge_windowed_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (fft_ddr_bridge_windowed_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (fft_ddr_bridge_windowed_slave_agent_m0_read),          //                         .read
		.uav_write              (fft_ddr_bridge_windowed_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (fft_ddr_bridge_windowed_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (fft_ddr_bridge_windowed_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (fft_ddr_bridge_windowed_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (fft_ddr_bridge_windowed_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (fft_ddr_bridge_windowed_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (fft_ddr_bridge_windowed_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (fft_ddr_bridge_windowed_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (fft_ddr_bridge_windowed_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (fft_ddr_bridge_windowed_slave_write),                  //                         .write
		.av_read                (fft_ddr_bridge_windowed_slave_read),                   //                         .read
		.av_readdata            (fft_ddr_bridge_windowed_slave_readdata),               //                         .readdata
		.av_writedata           (fft_ddr_bridge_windowed_slave_writedata),              //                         .writedata
		.av_burstcount          (fft_ddr_bridge_windowed_slave_burstcount),             //                         .burstcount
		.av_byteenable          (fft_ddr_bridge_windowed_slave_byteenable),             //                         .byteenable
		.av_readdatavalid       (fft_ddr_bridge_windowed_slave_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (fft_ddr_bridge_windowed_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (141),
		.PKT_ORI_BURST_SIZE_L      (139),
		.PKT_RESPONSE_STATUS_H     (138),
		.PKT_RESPONSE_STATUS_L     (137),
		.PKT_QOS_H                 (126),
		.PKT_QOS_L                 (126),
		.PKT_DATA_SIDEBAND_H       (124),
		.PKT_DATA_SIDEBAND_L       (124),
		.PKT_ADDR_SIDEBAND_H       (123),
		.PKT_ADDR_SIDEBAND_L       (123),
		.PKT_BURST_TYPE_H          (122),
		.PKT_BURST_TYPE_L          (121),
		.PKT_CACHE_H               (136),
		.PKT_CACHE_L               (133),
		.PKT_THREAD_ID_H           (129),
		.PKT_THREAD_ID_L           (129),
		.PKT_BURST_SIZE_H          (120),
		.PKT_BURST_SIZE_L          (118),
		.PKT_TRANS_EXCLUSIVE       (107),
		.PKT_TRANS_LOCK            (106),
		.PKT_BEGIN_BURST           (125),
		.PKT_PROTECTION_H          (132),
		.PKT_PROTECTION_L          (130),
		.PKT_BURSTWRAP_H           (117),
		.PKT_BURSTWRAP_L           (117),
		.PKT_BYTE_CNT_H            (116),
		.PKT_BYTE_CNT_L            (108),
		.PKT_ADDR_H                (101),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (102),
		.PKT_TRANS_POSTED          (103),
		.PKT_TRANS_WRITE           (104),
		.PKT_TRANS_READ            (105),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (127),
		.PKT_SRC_ID_L              (127),
		.PKT_DEST_ID_H             (128),
		.PKT_DEST_ID_L             (128),
		.ST_DATA_W                 (142),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (9),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) fft_sub_to_ddr_agent (
		.clk                   (hps_0_h2f_user0_clock_clk),                                         //       clk.clk
		.reset                 (fft_ddr_bridge_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.av_address            (fft_sub_to_ddr_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (fft_sub_to_ddr_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (fft_sub_to_ddr_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (fft_sub_to_ddr_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (fft_sub_to_ddr_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (fft_sub_to_ddr_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (fft_sub_to_ddr_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (fft_sub_to_ddr_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (fft_sub_to_ddr_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (fft_sub_to_ddr_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (fft_sub_to_ddr_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (fft_sub_to_ddr_agent_cp_valid),                                     //        cp.valid
		.cp_data               (fft_sub_to_ddr_agent_cp_data),                                      //          .data
		.cp_startofpacket      (fft_sub_to_ddr_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (fft_sub_to_ddr_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (fft_sub_to_ddr_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                 //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                  //          .data
		.rp_channel            (rsp_mux_src_channel),                                               //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                         //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                           //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                 //          .ready
		.av_response           (),                                                                  // (terminated)
		.av_writeresponsevalid ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (213),
		.PKT_ORI_BURST_SIZE_L      (211),
		.PKT_RESPONSE_STATUS_H     (210),
		.PKT_RESPONSE_STATUS_L     (209),
		.PKT_BURST_SIZE_H          (192),
		.PKT_BURST_SIZE_L          (190),
		.PKT_TRANS_LOCK            (178),
		.PKT_BEGIN_BURST           (197),
		.PKT_PROTECTION_H          (204),
		.PKT_PROTECTION_L          (202),
		.PKT_BURSTWRAP_H           (189),
		.PKT_BURSTWRAP_L           (189),
		.PKT_BYTE_CNT_H            (188),
		.PKT_BYTE_CNT_L            (180),
		.PKT_ADDR_H                (173),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (174),
		.PKT_TRANS_POSTED          (175),
		.PKT_TRANS_WRITE           (176),
		.PKT_TRANS_READ            (177),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (199),
		.PKT_SRC_ID_L              (199),
		.PKT_DEST_ID_H             (200),
		.PKT_DEST_ID_L             (200),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (214),
		.AVS_BURSTCOUNT_W          (9),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fft_ddr_bridge_windowed_slave_agent (
		.clk                     (hps_0_h2f_user0_clock_clk),                                         //             clk.clk
		.reset                   (fft_ddr_bridge_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (fft_ddr_bridge_windowed_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (fft_ddr_bridge_windowed_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (fft_ddr_bridge_windowed_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (fft_ddr_bridge_windowed_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (fft_ddr_bridge_windowed_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (fft_ddr_bridge_windowed_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (fft_ddr_bridge_windowed_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (fft_ddr_bridge_windowed_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (fft_ddr_bridge_windowed_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (fft_ddr_bridge_windowed_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (fft_ddr_bridge_windowed_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (fft_ddr_bridge_windowed_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (fft_ddr_bridge_windowed_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (fft_ddr_bridge_windowed_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (fft_ddr_bridge_windowed_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (fft_ddr_bridge_windowed_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (fft_ddr_bridge_windowed_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (fft_ddr_bridge_windowed_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (fft_ddr_bridge_windowed_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (fft_ddr_bridge_windowed_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (fft_ddr_bridge_windowed_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (fft_ddr_bridge_windowed_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (fft_ddr_bridge_windowed_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (fft_ddr_bridge_windowed_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (fft_ddr_bridge_windowed_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (fft_ddr_bridge_windowed_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (fft_ddr_bridge_windowed_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (fft_ddr_bridge_windowed_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (fft_ddr_bridge_windowed_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (fft_ddr_bridge_windowed_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (fft_ddr_bridge_windowed_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (fft_ddr_bridge_windowed_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (fft_ddr_bridge_windowed_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fft_ddr_bridge_windowed_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (fft_ddr_bridge_windowed_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (215),
		.FIFO_DEPTH          (9),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fft_ddr_bridge_windowed_slave_agent_rsp_fifo (
		.clk               (hps_0_h2f_user0_clock_clk),                                      //       clk.clk
		.reset             (fft_ddr_bridge_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (fft_ddr_bridge_windowed_slave_agent_rf_source_data),             //        in.data
		.in_valid          (fft_ddr_bridge_windowed_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (fft_ddr_bridge_windowed_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fft_ddr_bridge_windowed_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fft_ddr_bridge_windowed_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fft_ddr_bridge_windowed_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fft_ddr_bridge_windowed_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fft_ddr_bridge_windowed_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fft_ddr_bridge_windowed_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fft_ddr_bridge_windowed_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fft_ddr_bridge_windowed_slave_agent_rdata_fifo (
		.clk               (hps_0_h2f_user0_clock_clk),                                //       clk.clk
		.reset             (fft_ddr_bridge_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (fft_ddr_bridge_windowed_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (fft_ddr_bridge_windowed_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (fft_ddr_bridge_windowed_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (fft_ddr_bridge_windowed_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (fft_ddr_bridge_windowed_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (fft_ddr_bridge_windowed_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	soc_system_mm_interconnect_6_router router (
		.sink_ready         (fft_sub_to_ddr_agent_cp_ready),                    //      sink.ready
		.sink_valid         (fft_sub_to_ddr_agent_cp_valid),                    //          .valid
		.sink_data          (fft_sub_to_ddr_agent_cp_data),                     //          .data
		.sink_startofpacket (fft_sub_to_ddr_agent_cp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (fft_sub_to_ddr_agent_cp_endofpacket),              //          .endofpacket
		.clk                (hps_0_h2f_user0_clock_clk),                        //       clk.clk
		.reset              (fft_ddr_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                 //       src.ready
		.src_valid          (router_src_valid),                                 //          .valid
		.src_data           (router_src_data),                                  //          .data
		.src_channel        (router_src_channel),                               //          .channel
		.src_startofpacket  (router_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                            //          .endofpacket
	);

	soc_system_mm_interconnect_6_router_001 router_001 (
		.sink_ready         (fft_ddr_bridge_windowed_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (fft_ddr_bridge_windowed_slave_agent_rp_valid),         //          .valid
		.sink_data          (fft_ddr_bridge_windowed_slave_agent_rp_data),          //          .data
		.sink_startofpacket (fft_ddr_bridge_windowed_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (fft_ddr_bridge_windowed_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (hps_0_h2f_user0_clock_clk),                            //       clk.clk
		.reset              (fft_ddr_bridge_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_001_src_ready),                                 //       src.ready
		.src_valid          (router_001_src_valid),                                 //          .valid
		.src_data           (router_001_src_data),                                  //          .data
		.src_channel        (router_001_src_channel),                               //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                            //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (173),
		.PKT_ADDR_L                (144),
		.PKT_BEGIN_BURST           (197),
		.PKT_BYTE_CNT_H            (188),
		.PKT_BYTE_CNT_L            (180),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_BURST_SIZE_H          (192),
		.PKT_BURST_SIZE_L          (190),
		.PKT_BURST_TYPE_H          (194),
		.PKT_BURST_TYPE_L          (193),
		.PKT_BURSTWRAP_H           (189),
		.PKT_BURSTWRAP_L           (189),
		.PKT_TRANS_COMPRESSED_READ (174),
		.PKT_TRANS_WRITE           (176),
		.PKT_TRANS_READ            (177),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (214),
		.ST_CHANNEL_W              (1),
		.OUT_BYTE_CNT_H            (188),
		.OUT_BURSTWRAP_H           (189),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) fft_ddr_bridge_windowed_slave_burst_adapter (
		.clk                   (hps_0_h2f_user0_clock_clk),                                         //       cr0.clk
		.reset                 (fft_ddr_bridge_reset_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.sink0_valid           (fft_ddr_bridge_windowed_slave_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (fft_ddr_bridge_windowed_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (fft_ddr_bridge_windowed_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (fft_ddr_bridge_windowed_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (fft_ddr_bridge_windowed_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (fft_ddr_bridge_windowed_slave_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (fft_ddr_bridge_windowed_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fft_ddr_bridge_windowed_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (fft_ddr_bridge_windowed_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fft_ddr_bridge_windowed_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fft_ddr_bridge_windowed_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fft_ddr_bridge_windowed_slave_burst_adapter_source0_ready)          //          .ready
	);

	soc_system_mm_interconnect_6_cmd_demux cmd_demux (
		.clk                (hps_0_h2f_user0_clock_clk),                        //       clk.clk
		.reset              (fft_ddr_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                 //      sink.ready
		.sink_channel       (router_src_channel),                               //          .channel
		.sink_data          (router_src_data),                                  //          .data
		.sink_startofpacket (router_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_src_valid),                                 //          .valid
		.src0_ready         (cmd_demux_src0_ready),                             //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                             //          .valid
		.src0_data          (cmd_demux_src0_data),                              //          .data
		.src0_channel       (cmd_demux_src0_channel),                           //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_6_cmd_mux cmd_mux (
		.clk                 (hps_0_h2f_user0_clock_clk),                        //       clk.clk
		.reset               (fft_ddr_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_src_valid),                                //          .valid
		.src_data            (cmd_mux_src_data),                                 //          .data
		.src_channel         (cmd_mux_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                           //          .channel
		.sink0_data          (cmd_demux_src0_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                        //          .endofpacket
	);

	soc_system_mm_interconnect_6_cmd_demux rsp_demux (
		.clk                (hps_0_h2f_user0_clock_clk),                                         //       clk.clk
		.reset              (fft_ddr_bridge_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.sink_ready         (fft_ddr_bridge_windowed_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (fft_ddr_bridge_windowed_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (fft_ddr_bridge_windowed_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (fft_ddr_bridge_windowed_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (fft_ddr_bridge_windowed_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (fft_ddr_bridge_windowed_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                              //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                              //          .valid
		.src0_data          (rsp_demux_src0_data),                                               //          .data
		.src0_channel       (rsp_demux_src0_channel),                                            //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                         //          .endofpacket
	);

	soc_system_mm_interconnect_6_rsp_mux rsp_mux (
		.clk                 (hps_0_h2f_user0_clock_clk),                        //       clk.clk
		.reset               (fft_ddr_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                //       src.ready
		.src_valid           (rsp_mux_src_valid),                                //          .valid
		.src_data            (rsp_mux_src_data),                                 //          .data
		.src_channel         (rsp_mux_src_channel),                              //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                             //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                             //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                           //          .channel
		.sink0_data          (rsp_demux_src0_data),                              //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                        //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (189),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (192),
		.IN_PKT_BURST_SIZE_L           (190),
		.IN_PKT_RESPONSE_STATUS_H      (210),
		.IN_PKT_RESPONSE_STATUS_L      (209),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (194),
		.IN_PKT_BURST_TYPE_L           (193),
		.IN_PKT_ORI_BURST_SIZE_L       (211),
		.IN_PKT_ORI_BURST_SIZE_H       (213),
		.IN_ST_DATA_W                  (214),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (116),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (120),
		.OUT_PKT_BURST_SIZE_L          (118),
		.OUT_PKT_RESPONSE_STATUS_H     (138),
		.OUT_PKT_RESPONSE_STATUS_L     (137),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (122),
		.OUT_PKT_BURST_TYPE_L          (121),
		.OUT_PKT_ORI_BURST_SIZE_L      (139),
		.OUT_PKT_ORI_BURST_SIZE_H      (141),
		.OUT_ST_DATA_W                 (142),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) fft_ddr_bridge_windowed_slave_rsp_width_adapter (
		.clk                  (hps_0_h2f_user0_clock_clk),                                         //       clk.clk
		.reset                (fft_ddr_bridge_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (router_001_src_valid),                                              //      sink.valid
		.in_channel           (router_001_src_channel),                                            //          .channel
		.in_startofpacket     (router_001_src_startofpacket),                                      //          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                                        //          .endofpacket
		.in_ready             (router_001_src_ready),                                              //          .ready
		.in_data              (router_001_src_data),                                               //          .data
		.out_endofpacket      (fft_ddr_bridge_windowed_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (fft_ddr_bridge_windowed_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (fft_ddr_bridge_windowed_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (fft_ddr_bridge_windowed_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (fft_ddr_bridge_windowed_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (fft_ddr_bridge_windowed_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (116),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (117),
		.IN_PKT_BURSTWRAP_L            (117),
		.IN_PKT_BURST_SIZE_H           (120),
		.IN_PKT_BURST_SIZE_L           (118),
		.IN_PKT_RESPONSE_STATUS_H      (138),
		.IN_PKT_RESPONSE_STATUS_L      (137),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (122),
		.IN_PKT_BURST_TYPE_L           (121),
		.IN_PKT_ORI_BURST_SIZE_L       (139),
		.IN_PKT_ORI_BURST_SIZE_H       (141),
		.IN_ST_DATA_W                  (142),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (192),
		.OUT_PKT_BURST_SIZE_L          (190),
		.OUT_PKT_RESPONSE_STATUS_H     (210),
		.OUT_PKT_RESPONSE_STATUS_L     (209),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (194),
		.OUT_PKT_BURST_TYPE_L          (193),
		.OUT_PKT_ORI_BURST_SIZE_L      (211),
		.OUT_PKT_ORI_BURST_SIZE_H      (213),
		.OUT_ST_DATA_W                 (214),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) fft_ddr_bridge_windowed_slave_cmd_width_adapter (
		.clk                  (hps_0_h2f_user0_clock_clk),                                         //       clk.clk
		.reset                (fft_ddr_bridge_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                 //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                               //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                           //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                 //          .ready
		.in_data              (cmd_mux_src_data),                                                  //          .data
		.out_endofpacket      (fft_ddr_bridge_windowed_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (fft_ddr_bridge_windowed_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (fft_ddr_bridge_windowed_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (fft_ddr_bridge_windowed_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (fft_ddr_bridge_windowed_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (fft_ddr_bridge_windowed_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                             // (terminated)
	);

	soc_system_mm_interconnect_6_avalon_st_adapter #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (hps_0_h2f_user0_clock_clk),                                // in_clk_0.clk
		.in_rst_0_reset (fft_ddr_bridge_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (fft_ddr_bridge_windowed_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (fft_ddr_bridge_windowed_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (fft_ddr_bridge_windowed_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                             //         .error
	);

endmodule
